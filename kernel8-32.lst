
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001b06 	b	ec80 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8074:	e24ddef1 	sub	sp, sp, #3856	; 0xf10
    8078:	e24dd00c 	sub	sp, sp, #12
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000009 	bl	80ac <CKernel::CKernel()>
    8084:	e1a0000d 	mov	r0, sp
    8088:	eb00005a 	bl	81f8 <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e1a0000d 	mov	r0, sp
    8098:	eb000078 	bl	8280 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb001ae7 	bl	ec48 <halt>
    80a8:	eb001aeb 	bl	ec5c <reboot>

000080ac <CKernel::CKernel()>:
    80ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    80b0:	e1a04000 	mov	r4, r0
    80b4:	e28490e4 	add	r9, r4, #228	; 0xe4
    80b8:	e24dd00c 	sub	sp, sp, #12
    80bc:	e3a01001 	mov	r1, #1
    80c0:	eb0023e5 	bl	1105c <CMemorySystem::CMemorySystem(bool)>
    80c4:	e28470f0 	add	r7, r4, #240	; 0xf0
    80c8:	e3a01000 	mov	r1, #0
    80cc:	e1a00009 	mov	r0, r9
    80d0:	eb00046a 	bl	9280 <CActLED::CActLED(bool)>
    80d4:	e1a00007 	mov	r0, r7
    80d8:	eb000a60 	bl	aa60 <CKernelOptions::CKernelOptions()>
    80dc:	e2840d25 	add	r0, r4, #2368	; 0x940
    80e0:	e280000c 	add	r0, r0, #12
    80e4:	e2848e9e 	add	r8, r4, #2528	; 0x9e0
    80e8:	eb00056b 	bl	969c <CDeviceNameService::CDeviceNameService()>
    80ec:	e1a00007 	mov	r0, r7
    80f0:	eb0009f1 	bl	a8bc <CKernelOptions::GetWidth() const>
    80f4:	e1a05000 	mov	r5, r0
    80f8:	e1a00007 	mov	r0, r7
    80fc:	e288800c 	add	r8, r8, #12
    8100:	eb0009ef 	bl	a8c4 <CKernelOptions::GetHeight() const>
    8104:	e1a01005 	mov	r1, r5
    8108:	e1a02000 	mov	r2, r0
    810c:	e3a05000 	mov	r5, #0
    8110:	e2840e95 	add	r0, r4, #2384	; 0x950
    8114:	e1a03005 	mov	r3, r5
    8118:	e2846d32 	add	r6, r4, #3200	; 0xc80
    811c:	e58d5000 	str	r5, [sp]
    8120:	e2800008 	add	r0, r0, #8
    8124:	e286600c 	add	r6, r6, #12
    8128:	eb000fbf 	bl	c02c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    812c:	e1a00008 	mov	r0, r8
    8130:	eb002493 	bl	11384 <CInterruptSystem::CInterruptSystem()>
    8134:	e1a01008 	mov	r1, r8
    8138:	e1a00006 	mov	r0, r6
    813c:	eb001aff 	bl	ed40 <CTimer::CTimer(CInterruptSystem*)>
    8140:	e1a00007 	mov	r0, r7
    8144:	eb0009e3 	bl	a8d8 <CKernelOptions::GetLogLevel() const>
    8148:	e1a01000 	mov	r1, r0
    814c:	e2840ecd 	add	r0, r4, #3280	; 0xcd0
    8150:	e1a02006 	mov	r2, r6
    8154:	e3a03001 	mov	r3, #1
    8158:	e2800004 	add	r0, r0, #4
    815c:	eb000b17 	bl	adc0 <CLogger::CLogger(unsigned int, CTimer*, bool)>
    8160:	e2840edd 	add	r0, r4, #3536	; 0xdd0
    8164:	e2800008 	add	r0, r0, #8
    8168:	eb0006be 	bl	9c68 <CGPIOPin::CGPIOPin()>
    816c:	e1a03005 	mov	r3, r5
    8170:	e3a02001 	mov	r2, #1
    8174:	e3a01012 	mov	r1, #18
    8178:	e2840c0e 	add	r0, r4, #3584	; 0xe00
    817c:	eb000959 	bl	a6e8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8180:	e2840ee2 	add	r0, r4, #3616	; 0xe20
    8184:	e1a03005 	mov	r3, r5
    8188:	e3a02001 	mov	r2, #1
    818c:	e3a01011 	mov	r1, #17
    8190:	e2800008 	add	r0, r0, #8
    8194:	eb000953 	bl	a6e8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8198:	e1a03005 	mov	r3, r5
    819c:	e3a02001 	mov	r2, #1
    81a0:	e3a01008 	mov	r1, #8
    81a4:	e2840ee5 	add	r0, r4, #3664	; 0xe50
    81a8:	eb00094e 	bl	a6e8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    81ac:	e2840ee7 	add	r0, r4, #3696	; 0xe70
    81b0:	e1a03005 	mov	r3, r5
    81b4:	e3a02001 	mov	r2, #1
    81b8:	e3a01010 	mov	r1, #16
    81bc:	e2800008 	add	r0, r0, #8
    81c0:	eb000948 	bl	a6e8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    81c4:	e2840eea 	add	r0, r4, #3744	; 0xea0
    81c8:	eb0001b1 	bl	8894 <CScheduler::CScheduler()>
    81cc:	e1a01005 	mov	r1, r5
    81d0:	e2840ef1 	add	r0, r4, #3856	; 0xf10
    81d4:	eb0003eb 	bl	9188 <CSynchronizationEvent::CSynchronizationEvent(bool)>
    81d8:	e1a00009 	mov	r0, r9
    81dc:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81e0:	e3a020c8 	mov	r2, #200	; 0xc8
    81e4:	e3a01005 	mov	r1, #5
    81e8:	eb000477 	bl	93cc <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    81ec:	e1a00004 	mov	r0, r4
    81f0:	e28dd00c 	add	sp, sp, #12
    81f4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

000081f8 <CKernel::Initialize()>:
    81f8:	e92d4070 	push	{r4, r5, r6, lr}
    81fc:	e2805e95 	add	r5, r0, #2384	; 0x950
    8200:	e2855008 	add	r5, r5, #8
    8204:	e1a04000 	mov	r4, r0
    8208:	e1a00005 	mov	r0, r5
    820c:	eb00126e 	bl	cbcc <CScreenDevice::Initialize()>
    8210:	e3500000 	cmp	r0, #0
    8214:	1a000001 	bne	8220 <CKernel::Initialize()+0x28>
    8218:	e3a00000 	mov	r0, #0
    821c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8220:	e28400f0 	add	r0, r4, #240	; 0xf0
    8224:	eb0009a8 	bl	a8cc <CKernelOptions::GetLogDevice() const>
    8228:	e1a01000 	mov	r1, r0
    822c:	e2840d25 	add	r0, r4, #2368	; 0x940
    8230:	e3a02000 	mov	r2, #0
    8234:	e280000c 	add	r0, r0, #12
    8238:	eb0005ac 	bl	98f0 <CDeviceNameService::GetDevice(char const*, bool)>
    823c:	e1a01000 	mov	r1, r0
    8240:	e3510000 	cmp	r1, #0
    8244:	e2840ecd 	add	r0, r4, #3280	; 0xcd0
    8248:	01a01005 	moveq	r1, r5
    824c:	e2800004 	add	r0, r0, #4
    8250:	eb000cfe 	bl	b650 <CLogger::Initialize(CDevice*)>
    8254:	e3500000 	cmp	r0, #0
    8258:	0affffee 	beq	8218 <CKernel::Initialize()+0x20>
    825c:	e2840e9e 	add	r0, r4, #2528	; 0x9e0
    8260:	e280000c 	add	r0, r0, #12
    8264:	eb002461 	bl	113f0 <CInterruptSystem::Initialize()>
    8268:	e3500000 	cmp	r0, #0
    826c:	0affffe9 	beq	8218 <CKernel::Initialize()+0x20>
    8270:	e2840d32 	add	r0, r4, #3200	; 0xc80
    8274:	e280000c 	add	r0, r0, #12
    8278:	e8bd4070 	pop	{r4, r5, r6, lr}
    827c:	ea001d6c 	b	f834 <CTimer::Initialize()>

00008280 <CKernel::Run()>:
    8280:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8284:	e1a05000 	mov	r5, r0
    8288:	e2856ecd 	add	r6, r5, #3280	; 0xcd0
    828c:	e24ddfb9 	sub	sp, sp, #740	; 0x2e4
    8290:	e2866004 	add	r6, r6, #4
    8294:	e1a0000d 	mov	r0, sp
    8298:	e2854e95 	add	r4, r5, #2384	; 0x950
    829c:	eb0014ca 	bl	d5cc <CString::CString()>
    82a0:	e3a02003 	mov	r2, #3
    82a4:	e1a00006 	mov	r0, r6
    82a8:	e30430a4 	movw	r3, #16548	; 0x40a4
    82ac:	e3403001 	movt	r3, #1
    82b0:	e30410d4 	movw	r1, #16596	; 0x40d4
    82b4:	e3401001 	movt	r1, #1
    82b8:	e2844008 	add	r4, r4, #8
    82bc:	eb000cd7 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82c0:	e2852ee2 	add	r2, r5, #3616	; 0xe20
    82c4:	e1a03004 	mov	r3, r4
    82c8:	e2822008 	add	r2, r2, #8
    82cc:	e3a01001 	mov	r1, #1
    82d0:	e28d0010 	add	r0, sp, #16
    82d4:	eb000057 	bl	8438 <CLEDBlink::CLEDBlink(unsigned int, CGPIOPin*, CScreenDevice*)>
    82d8:	e1a03004 	mov	r3, r4
    82dc:	e2852ee5 	add	r2, r5, #3664	; 0xe50
    82e0:	e3a01002 	mov	r1, #2
    82e4:	e28d0c01 	add	r0, sp, #256	; 0x100
    82e8:	eb000052 	bl	8438 <CLEDBlink::CLEDBlink(unsigned int, CGPIOPin*, CScreenDevice*)>
    82ec:	e2852ee7 	add	r2, r5, #3696	; 0xe70
    82f0:	e1a03004 	mov	r3, r4
    82f4:	e3a01003 	mov	r1, #3
    82f8:	e2822008 	add	r2, r2, #8
    82fc:	e28d0e1f 	add	r0, sp, #496	; 0x1f0
    8300:	eb00004c 	bl	8438 <CLEDBlink::CLEDBlink(unsigned int, CGPIOPin*, CScreenDevice*)>
    8304:	e30430c8 	movw	r3, #16584	; 0x40c8
    8308:	e3403001 	movt	r3, #1
    830c:	e30410d4 	movw	r1, #16596	; 0x40d4
    8310:	e3401001 	movt	r1, #1
    8314:	e3a02003 	mov	r2, #3
    8318:	e1a00006 	mov	r0, r6
    831c:	e2854ef1 	add	r4, r5, #3856	; 0xf10
    8320:	e2855c0e 	add	r5, r5, #3584	; 0xe00
    8324:	eb000cbd 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8328:	e1a00004 	mov	r0, r4
    832c:	eb0003a5 	bl	91c8 <CSynchronizationEvent::Clear()>
    8330:	e1a00005 	mov	r0, r5
    8334:	eb0006b6 	bl	9e14 <CGPIOPin::Invert()>
    8338:	e1a00004 	mov	r0, r4
    833c:	eb0003b7 	bl	9220 <CSynchronizationEvent::Wait()>
    8340:	eafffff8 	b	8328 <CKernel::Run()+0xa8>

00008344 <CKernel::~CKernel()>:
    8344:	e92d4010 	push	{r4, lr}
    8348:	e1a04000 	mov	r4, r0
    834c:	e2800ef1 	add	r0, r0, #3856	; 0xf10
    8350:	eb000390 	bl	9198 <CSynchronizationEvent::~CSynchronizationEvent()>
    8354:	e2840eea 	add	r0, r4, #3744	; 0xea0
    8358:	eb00016d 	bl	8914 <CScheduler::~CScheduler()>
    835c:	e2840ee7 	add	r0, r4, #3696	; 0xe70
    8360:	e2800008 	add	r0, r0, #8
    8364:	eb000638 	bl	9c4c <CGPIOPin::~CGPIOPin()>
    8368:	e2840ee5 	add	r0, r4, #3664	; 0xe50
    836c:	eb000636 	bl	9c4c <CGPIOPin::~CGPIOPin()>
    8370:	e2840ee2 	add	r0, r4, #3616	; 0xe20
    8374:	e2800008 	add	r0, r0, #8
    8378:	eb000633 	bl	9c4c <CGPIOPin::~CGPIOPin()>
    837c:	e2840c0e 	add	r0, r4, #3584	; 0xe00
    8380:	eb000631 	bl	9c4c <CGPIOPin::~CGPIOPin()>
    8384:	e2840edd 	add	r0, r4, #3536	; 0xdd0
    8388:	e2800008 	add	r0, r0, #8
    838c:	eb00062e 	bl	9c4c <CGPIOPin::~CGPIOPin()>
    8390:	e2840ecd 	add	r0, r4, #3280	; 0xcd0
    8394:	e2800004 	add	r0, r0, #4
    8398:	eb000aa0 	bl	ae20 <CLogger::~CLogger()>
    839c:	e2840d32 	add	r0, r4, #3200	; 0xc80
    83a0:	e280000c 	add	r0, r0, #12
    83a4:	eb001a87 	bl	edc8 <CTimer::~CTimer()>
    83a8:	e2840e9e 	add	r0, r4, #2528	; 0x9e0
    83ac:	e280000c 	add	r0, r0, #12
    83b0:	eb0023fe 	bl	113b0 <CInterruptSystem::~CInterruptSystem()>
    83b4:	e2840e95 	add	r0, r4, #2384	; 0x950
    83b8:	e2800008 	add	r0, r0, #8
    83bc:	eb000ec8 	bl	bee4 <CScreenDevice::~CScreenDevice()>
    83c0:	e2840d25 	add	r0, r4, #2368	; 0x940
    83c4:	e280000c 	add	r0, r0, #12
    83c8:	eb0004c3 	bl	96dc <CDeviceNameService::~CDeviceNameService()>
    83cc:	e28400f0 	add	r0, r4, #240	; 0xf0
    83d0:	eb000934 	bl	a8a8 <CKernelOptions::~CKernelOptions()>
    83d4:	e28400e4 	add	r0, r4, #228	; 0xe4
    83d8:	eb0003de 	bl	9358 <CActLED::~CActLED()>
    83dc:	e1a00004 	mov	r0, r4
    83e0:	eb0022aa 	bl	10e90 <CMemorySystem::~CMemorySystem()>
    83e4:	e1a00004 	mov	r0, r4
    83e8:	e8bd8010 	pop	{r4, pc}

000083ec <CLEDBlink::~CLEDBlink()>:
    83ec:	e59f3014 	ldr	r3, [pc, #20]	; 8408 <CLEDBlink::~CLEDBlink()+0x1c>
    83f0:	e92d4010 	push	{r4, lr}
    83f4:	e1a04000 	mov	r4, r0
    83f8:	e5803000 	str	r3, [r0]
    83fc:	eb000070 	bl	85c4 <CTask::~CTask()>
    8400:	e1a00004 	mov	r0, r4
    8404:	e8bd8010 	pop	{r4, pc}
    8408:	000140f0 	.word	0x000140f0

0000840c <CLEDBlink::~CLEDBlink()>:
    840c:	e59f3020 	ldr	r3, [pc, #32]	; 8434 <CLEDBlink::~CLEDBlink()+0x28>
    8410:	e92d4010 	push	{r4, lr}
    8414:	e1a04000 	mov	r4, r0
    8418:	e5803000 	str	r3, [r0]
    841c:	eb000068 	bl	85c4 <CTask::~CTask()>
    8420:	e1a00004 	mov	r0, r4
    8424:	e3a010f0 	mov	r1, #240	; 0xf0
    8428:	eb002135 	bl	10904 <operator delete(void*, unsigned int)>
    842c:	e1a00004 	mov	r0, r4
    8430:	e8bd8010 	pop	{r4, pc}
    8434:	000140f0 	.word	0x000140f0

00008438 <CLEDBlink::CLEDBlink(unsigned int, CGPIOPin*, CScreenDevice*)>:
    8438:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    843c:	e1a04000 	mov	r4, r0
    8440:	e1a07001 	mov	r7, r1
    8444:	e1a06002 	mov	r6, r2
    8448:	e3a01902 	mov	r1, #32768	; 0x8000
    844c:	e3a02000 	mov	r2, #0
    8450:	e1a05003 	mov	r5, r3
    8454:	eb00008d 	bl	8690 <CTask::CTask(unsigned int, bool)>
    8458:	e59f3014 	ldr	r3, [pc, #20]	; 8474 <CLEDBlink::CLEDBlink(unsigned int, CGPIOPin*, CScreenDevice*)+0x3c>
    845c:	e1a00004 	mov	r0, r4
    8460:	e5843000 	str	r3, [r4]
    8464:	e58470e4 	str	r7, [r4, #228]	; 0xe4
    8468:	e58460e8 	str	r6, [r4, #232]	; 0xe8
    846c:	e58450ec 	str	r5, [r4, #236]	; 0xec
    8470:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8474:	000140f0 	.word	0x000140f0

00008478 <CLEDBlink::Run()>:
    8478:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    847c:	e30490dc 	movw	r9, #16604	; 0x40dc
    8480:	e3409001 	movt	r9, #1
    8484:	e30480e4 	movw	r8, #16612	; 0x40e4
    8488:	e3408001 	movt	r8, #1
    848c:	e24dd010 	sub	sp, sp, #16
    8490:	e1a05000 	mov	r5, r0
    8494:	ea000017 	b	84f8 <CLEDBlink::Run()+0x80>
    8498:	e3520001 	cmp	r2, #1
    849c:	0a000027 	beq	8540 <CLEDBlink::Run()+0xc8>
    84a0:	e1a01008 	mov	r1, r8
    84a4:	e1a0000d 	mov	r0, sp
    84a8:	eb0014c1 	bl	d7b4 <CString::Append(char const*)>
    84ac:	e59560ec 	ldr	r6, [r5, #236]	; 0xec
    84b0:	e1a0000d 	mov	r0, sp
    84b4:	e5963000 	ldr	r3, [r6]
    84b8:	e593a00c 	ldr	sl, [r3, #12]
    84bc:	eb00147a 	bl	d6ac <CString::operator char const*() const>
    84c0:	e1a04000 	mov	r4, r0
    84c4:	e1a0000d 	mov	r0, sp
    84c8:	eb0014b5 	bl	d7a4 <CString::GetLength() const>
    84cc:	e1a01004 	mov	r1, r4
    84d0:	e1a02000 	mov	r2, r0
    84d4:	e1a00006 	mov	r0, r6
    84d8:	e12fff3a 	blx	sl
    84dc:	e59500e8 	ldr	r0, [r5, #232]	; 0xe8
    84e0:	eb00064b 	bl	9e14 <CGPIOPin::Invert()>
    84e4:	eb000312 	bl	9134 <CScheduler::Get()>
    84e8:	e1a01007 	mov	r1, r7
    84ec:	eb0002a1 	bl	8f78 <CScheduler::MsSleep(unsigned int)>
    84f0:	e1a0000d 	mov	r0, sp
    84f4:	eb001401 	bl	d500 <CString::~CString()>
    84f8:	e1a0000d 	mov	r0, sp
    84fc:	eb001432 	bl	d5cc <CString::CString()>
    8500:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
    8504:	e3520002 	cmp	r2, #2
    8508:	0a000007 	beq	852c <CLEDBlink::Run()+0xb4>
    850c:	e3a07000 	mov	r7, #0
    8510:	e3520003 	cmp	r2, #3
    8514:	1affffdf 	bne	8498 <CLEDBlink::Run()+0x20>
    8518:	e1a01009 	mov	r1, r9
    851c:	e1a0000d 	mov	r0, sp
    8520:	e3a07e19 	mov	r7, #400	; 0x190
    8524:	eb0019b7 	bl	ec08 <CString::Format(char const*, ...)>
    8528:	eaffffdc 	b	84a0 <CLEDBlink::Run()+0x28>
    852c:	e1a01009 	mov	r1, r9
    8530:	e1a0000d 	mov	r0, sp
    8534:	e3a07f4b 	mov	r7, #300	; 0x12c
    8538:	eb0019b2 	bl	ec08 <CString::Format(char const*, ...)>
    853c:	eaffffd7 	b	84a0 <CLEDBlink::Run()+0x28>
    8540:	e1a01009 	mov	r1, r9
    8544:	e1a0000d 	mov	r0, sp
    8548:	e3a070c8 	mov	r7, #200	; 0xc8
    854c:	eb0019ad 	bl	ec08 <CString::Format(char const*, ...)>
    8550:	eaffffd2 	b	84a0 <CLEDBlink::Run()+0x28>

00008554 <CTask::Run()>:
    8554:	e30410fc 	movw	r1, #16636	; 0x40fc
    8558:	e3401001 	movt	r1, #1
    855c:	e3a02046 	mov	r2, #70	; 0x46
    8560:	e281000c 	add	r0, r1, #12
    8564:	e92d4010 	push	{r4, lr}
    8568:	eb0003c2 	bl	9478 <assertion_failed>

0000856c <CTask::TaskEntry(void*)>:
    856c:	e92d4010 	push	{r4, lr}
    8570:	e2504000 	subs	r4, r0, #0
    8574:	0a00000d 	beq	85b0 <CTask::TaskEntry(void*)+0x44>
    8578:	e5943000 	ldr	r3, [r4]
    857c:	e5933008 	ldr	r3, [r3, #8]
    8580:	e12fff33 	blx	r3
    8584:	e3a03005 	mov	r3, #5
    8588:	e28400d8 	add	r0, r4, #216	; 0xd8
    858c:	e5c43004 	strb	r3, [r4, #4]
    8590:	eb00030f 	bl	91d4 <CSynchronizationEvent::Set()>
    8594:	eb0002e6 	bl	9134 <CScheduler::Get()>
    8598:	eb00020f 	bl	8ddc <CScheduler::Yield()>
    859c:	e30410fc 	movw	r1, #16636	; 0x40fc
    85a0:	e3401001 	movt	r1, #1
    85a4:	e3a0209b 	mov	r2, #155	; 0x9b
    85a8:	e281000c 	add	r0, r1, #12
    85ac:	eb0003b1 	bl	9478 <assertion_failed>
    85b0:	e30410fc 	movw	r1, #16636	; 0x40fc
    85b4:	e3401001 	movt	r1, #1
    85b8:	e3a02093 	mov	r2, #147	; 0x93
    85bc:	e2810010 	add	r0, r1, #16
    85c0:	eb0003ac 	bl	9478 <assertion_failed>

000085c4 <CTask::~CTask()>:
    85c4:	e5d02004 	ldrb	r2, [r0, #4]
    85c8:	e59f3050 	ldr	r3, [pc, #80]	; 8620 <CTask::~CTask()+0x5c>
    85cc:	e92d4010 	push	{r4, lr}
    85d0:	e3520005 	cmp	r2, #5
    85d4:	e5803000 	str	r3, [r0]
    85d8:	1a00000c 	bne	8610 <CTask::~CTask()+0x4c>
    85dc:	e1a04000 	mov	r4, r0
    85e0:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
    85e4:	e3a03006 	mov	r3, #6
    85e8:	e3500000 	cmp	r0, #0
    85ec:	e5c43004 	strb	r3, [r4, #4]
    85f0:	0a000000 	beq	85f8 <CTask::~CTask()+0x34>
    85f4:	eb0020bc 	bl	108ec <operator delete[](void*)>
    85f8:	e3a03000 	mov	r3, #0
    85fc:	e28400d8 	add	r0, r4, #216	; 0xd8
    8600:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    8604:	eb0002e3 	bl	9198 <CSynchronizationEvent::~CSynchronizationEvent()>
    8608:	e1a00004 	mov	r0, r4
    860c:	e8bd8010 	pop	{r4, pc}
    8610:	e3a02037 	mov	r2, #55	; 0x37
    8614:	e2431024 	sub	r1, r3, #36	; 0x24
    8618:	e283000c 	add	r0, r3, #12
    861c:	eb000395 	bl	9478 <assertion_failed>
    8620:	00014120 	.word	0x00014120

00008624 <CTask::~CTask()>:
    8624:	e5d02004 	ldrb	r2, [r0, #4]
    8628:	e59f305c 	ldr	r3, [pc, #92]	; 868c <CTask::~CTask()+0x68>
    862c:	e92d4010 	push	{r4, lr}
    8630:	e3520005 	cmp	r2, #5
    8634:	e5803000 	str	r3, [r0]
    8638:	1a00000f 	bne	867c <CTask::~CTask()+0x58>
    863c:	e1a04000 	mov	r4, r0
    8640:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
    8644:	e3a03006 	mov	r3, #6
    8648:	e3500000 	cmp	r0, #0
    864c:	e5c43004 	strb	r3, [r4, #4]
    8650:	0a000000 	beq	8658 <CTask::~CTask()+0x34>
    8654:	eb0020a4 	bl	108ec <operator delete[](void*)>
    8658:	e3a03000 	mov	r3, #0
    865c:	e28400d8 	add	r0, r4, #216	; 0xd8
    8660:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    8664:	eb0002cb 	bl	9198 <CSynchronizationEvent::~CSynchronizationEvent()>
    8668:	e1a00004 	mov	r0, r4
    866c:	e3a010e4 	mov	r1, #228	; 0xe4
    8670:	eb0020a3 	bl	10904 <operator delete(void*, unsigned int)>
    8674:	e1a00004 	mov	r0, r4
    8678:	e8bd8010 	pop	{r4, pc}
    867c:	e3a02037 	mov	r2, #55	; 0x37
    8680:	e2431024 	sub	r1, r3, #36	; 0x24
    8684:	e283000c 	add	r0, r3, #12
    8688:	eb00037a 	bl	9478 <assertion_failed>
    868c:	00014120 	.word	0x00014120

00008690 <CTask::CTask(unsigned int, bool)>:
    8690:	e92d4070 	push	{r4, r5, r6, lr}
    8694:	e1a04000 	mov	r4, r0
    8698:	e3a05000 	mov	r5, #0
    869c:	e59f60e0 	ldr	r6, [pc, #224]	; 8784 <CTask::CTask(unsigned int, bool)+0xf4>
    86a0:	e1a03001 	mov	r3, r1
    86a4:	e2222001 	eor	r2, r2, #1
    86a8:	e5806000 	str	r6, [r0]
    86ac:	e5c02004 	strb	r2, [r0, #4]
    86b0:	e1a01005 	mov	r1, r5
    86b4:	e58030c4 	str	r3, [r0, #196]	; 0xc4
    86b8:	e28000d8 	add	r0, r0, #216	; 0xd8
    86bc:	e5005010 	str	r5, [r0, #-16]
    86c0:	eb0002b0 	bl	9188 <CSynchronizationEvent::CSynchronizationEvent(bool)>
    86c4:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
    86c8:	e58450e0 	str	r5, [r4, #224]	; 0xe0
    86cc:	e1500005 	cmp	r0, r5
    86d0:	e58450cc 	str	r5, [r4, #204]	; 0xcc
    86d4:	e58450d0 	str	r5, [r4, #208]	; 0xd0
    86d8:	e58450d4 	str	r5, [r4, #212]	; 0xd4
    86dc:	0a000017 	beq	8740 <CTask::CTask(unsigned int, bool)+0xb0>
    86e0:	e3500b01 	cmp	r0, #1024	; 0x400
    86e4:	3a00001e 	bcc	8764 <CTask::CTask(unsigned int, bool)+0xd4>
    86e8:	e2105003 	ands	r5, r0, #3
    86ec:	1a000020 	bne	8774 <CTask::CTask(unsigned int, bool)+0xe4>
    86f0:	eb002071 	bl	108bc <operator new[](unsigned int)>
    86f4:	e3a020b8 	mov	r2, #184	; 0xb8
    86f8:	e58400c8 	str	r0, [r4, #200]	; 0xc8
    86fc:	e1a01005 	mov	r1, r5
    8700:	e284000c 	add	r0, r4, #12
    8704:	eb001cfa 	bl	faf4 <memset>
    8708:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    870c:	e584400c 	str	r4, [r4, #12]
    8710:	e3530000 	cmp	r3, #0
    8714:	0a00000e 	beq	8754 <CTask::CTask(unsigned int, bool)+0xc4>
    8718:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
    871c:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
    8720:	e3a01402 	mov	r1, #33554432	; 0x2000000
    8724:	e308256c 	movw	r2, #34156	; 0x856c
    8728:	e3402000 	movt	r2, #0
    872c:	e0833000 	add	r3, r3, r0
    8730:	e584c010 	str	ip, [r4, #16]
    8734:	e5842040 	str	r2, [r4, #64]	; 0x40
    8738:	e5841014 	str	r1, [r4, #20]
    873c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    8740:	eb00027b 	bl	9134 <CScheduler::Get()>
    8744:	e1a01004 	mov	r1, r4
    8748:	eb0000d6 	bl	8aa8 <CScheduler::AddTask(CTask*)>
    874c:	e1a00004 	mov	r0, r4
    8750:	e8bd8070 	pop	{r4, r5, r6, pc}
    8754:	e3a02071 	mov	r2, #113	; 0x71
    8758:	e2461024 	sub	r1, r6, #36	; 0x24
    875c:	e286005c 	add	r0, r6, #92	; 0x5c
    8760:	eb000344 	bl	9478 <assertion_failed>
    8764:	e3a02026 	mov	r2, #38	; 0x26
    8768:	e2461024 	sub	r1, r6, #36	; 0x24
    876c:	e286002c 	add	r0, r6, #44	; 0x2c
    8770:	eb000340 	bl	9478 <assertion_failed>
    8774:	e3a02028 	mov	r2, #40	; 0x28
    8778:	e2461024 	sub	r1, r6, #36	; 0x24
    877c:	e2860044 	add	r0, r6, #68	; 0x44
    8780:	eb00033c 	bl	9478 <assertion_failed>
    8784:	00014120 	.word	0x00014120

00008788 <CTask::Start()>:
    8788:	e5d03004 	ldrb	r3, [r0, #4]
    878c:	e3530000 	cmp	r3, #0
    8790:	1a000002 	bne	87a0 <CTask::Start()+0x18>
    8794:	e3a03001 	mov	r3, #1
    8798:	e5c03004 	strb	r3, [r0, #4]
    879c:	e12fff1e 	bx	lr
    87a0:	e30410fc 	movw	r1, #16636	; 0x40fc
    87a4:	e3401001 	movt	r1, #1
    87a8:	e3a02040 	mov	r2, #64	; 0x40
    87ac:	e2810090 	add	r0, r1, #144	; 0x90
    87b0:	e92d4010 	push	{r4, lr}
    87b4:	eb00032f 	bl	9478 <assertion_failed>

000087b8 <CTask::Terminate()>:
    87b8:	e1a03000 	mov	r3, r0
    87bc:	e3a02005 	mov	r2, #5
    87c0:	e92d4010 	push	{r4, lr}
    87c4:	e28000d8 	add	r0, r0, #216	; 0xd8
    87c8:	e5c32004 	strb	r2, [r3, #4]
    87cc:	eb000280 	bl	91d4 <CSynchronizationEvent::Set()>
    87d0:	eb000257 	bl	9134 <CScheduler::Get()>
    87d4:	eb000180 	bl	8ddc <CScheduler::Yield()>
    87d8:	e30410fc 	movw	r1, #16636	; 0x40fc
    87dc:	e3401001 	movt	r1, #1
    87e0:	e3a0204f 	mov	r2, #79	; 0x4f
    87e4:	e281000c 	add	r0, r1, #12
    87e8:	eb000322 	bl	9478 <assertion_failed>

000087ec <CTask::WaitForTermination()>:
    87ec:	e92d4010 	push	{r4, lr}
    87f0:	e1a04000 	mov	r4, r0
    87f4:	eb00024e 	bl	9134 <CScheduler::Get()>
    87f8:	e1a01004 	mov	r1, r4
    87fc:	eb00004b 	bl	8930 <CScheduler::IsValidTask(CTask*)>
    8800:	e3500000 	cmp	r0, #0
    8804:	08bd8010 	popeq	{r4, pc}
    8808:	e28400d8 	add	r0, r4, #216	; 0xd8
    880c:	e8bd4010 	pop	{r4, lr}
    8810:	ea000282 	b	9220 <CSynchronizationEvent::Wait()>

00008814 <CTask::SetUserData(void*, unsigned int)>:
    8814:	e0800102 	add	r0, r0, r2, lsl #2
    8818:	e58010cc 	str	r1, [r0, #204]	; 0xcc
    881c:	e12fff1e 	bx	lr

00008820 <CTask::GetUserData(unsigned int)>:
    8820:	e0800101 	add	r0, r0, r1, lsl #2
    8824:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
    8828:	e12fff1e 	bx	lr

0000882c <CTask::InitializeRegs()>:
    882c:	e92d4010 	push	{r4, lr}
    8830:	e1a04000 	mov	r4, r0
    8834:	e3a020b8 	mov	r2, #184	; 0xb8
    8838:	e3a01000 	mov	r1, #0
    883c:	e280000c 	add	r0, r0, #12
    8840:	eb001cab 	bl	faf4 <memset>
    8844:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    8848:	e584400c 	str	r4, [r4, #12]
    884c:	e3530000 	cmp	r3, #0
    8850:	0a00000a 	beq	8880 <CTask::InitializeRegs()+0x54>
    8854:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
    8858:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
    885c:	e3a01402 	mov	r1, #33554432	; 0x2000000
    8860:	e308256c 	movw	r2, #34156	; 0x856c
    8864:	e3402000 	movt	r2, #0
    8868:	e0833000 	add	r3, r3, r0
    886c:	e584c010 	str	ip, [r4, #16]
    8870:	e5842040 	str	r2, [r4, #64]	; 0x40
    8874:	e5841014 	str	r1, [r4, #20]
    8878:	e584303c 	str	r3, [r4, #60]	; 0x3c
    887c:	e8bd8010 	pop	{r4, pc}
    8880:	e30410fc 	movw	r1, #16636	; 0x40fc
    8884:	e3401001 	movt	r1, #1
    8888:	e3a02071 	mov	r2, #113	; 0x71
    888c:	e2810080 	add	r0, r1, #128	; 0x80
    8890:	eb0002f8 	bl	9478 <assertion_failed>

00008894 <CScheduler::CScheduler()>:
    8894:	e3061908 	movw	r1, #26888	; 0x6908
    8898:	e3401001 	movt	r1, #1
    889c:	e92d4070 	push	{r4, r5, r6, lr}
    88a0:	e3a03000 	mov	r3, #0
    88a4:	e3a02001 	mov	r2, #1
    88a8:	e5915000 	ldr	r5, [r1]
    88ac:	e5803050 	str	r3, [r0, #80]	; 0x50
    88b0:	e1550003 	cmp	r5, r3
    88b4:	e5803054 	str	r3, [r0, #84]	; 0x54
    88b8:	e5803058 	str	r3, [r0, #88]	; 0x58
    88bc:	e580305c 	str	r3, [r0, #92]	; 0x5c
    88c0:	e5803060 	str	r3, [r0, #96]	; 0x60
    88c4:	e5803064 	str	r3, [r0, #100]	; 0x64
    88c8:	e5802068 	str	r2, [r0, #104]	; 0x68
    88cc:	1a00000a 	bne	88fc <CScheduler::CScheduler()+0x68>
    88d0:	e1a04000 	mov	r4, r0
    88d4:	e3a000e4 	mov	r0, #228	; 0xe4
    88d8:	e5814000 	str	r4, [r1]
    88dc:	eb001ff0 	bl	108a4 <operator new(unsigned int)>
    88e0:	e1a02005 	mov	r2, r5
    88e4:	e1a01005 	mov	r1, r5
    88e8:	e1a05000 	mov	r5, r0
    88ec:	ebffff67 	bl	8690 <CTask::CTask(unsigned int, bool)>
    88f0:	e1a00004 	mov	r0, r4
    88f4:	e5845054 	str	r5, [r4, #84]	; 0x54
    88f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    88fc:	e30411a4 	movw	r1, #16804	; 0x41a4
    8900:	e3401001 	movt	r1, #1
    8904:	e30401b4 	movw	r0, #16820	; 0x41b4
    8908:	e3400001 	movt	r0, #1
    890c:	e3a02025 	mov	r2, #37	; 0x25
    8910:	eb0002d8 	bl	9478 <assertion_failed>

00008914 <CScheduler::~CScheduler()>:
    8914:	e3063908 	movw	r3, #26888	; 0x6908
    8918:	e3403001 	movt	r3, #1
    891c:	e3a02000 	mov	r2, #0
    8920:	e5832000 	str	r2, [r3]
    8924:	e12fff1e 	bx	lr

00008928 <CScheduler::GetCurrentTask()>:
    8928:	e5900054 	ldr	r0, [r0, #84]	; 0x54
    892c:	e12fff1e 	bx	lr

00008930 <CScheduler::IsValidTask(CTask*)>:
    8930:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8934:	e590e050 	ldr	lr, [r0, #80]	; 0x50
    8938:	e35e0000 	cmp	lr, #0
    893c:	0a00000d 	beq	8978 <CScheduler::IsValidTask(CTask*)+0x48>
    8940:	e240c004 	sub	ip, r0, #4
    8944:	e3a03000 	mov	r3, #0
    8948:	e5bc2004 	ldr	r2, [ip, #4]!
    894c:	e2833001 	add	r3, r3, #1
    8950:	e0420001 	sub	r0, r2, r1
    8954:	e3520000 	cmp	r2, #0
    8958:	e16f0f10 	clz	r0, r0
    895c:	e1a002a0 	lsr	r0, r0, #5
    8960:	03a00000 	moveq	r0, #0
    8964:	e3500000 	cmp	r0, #0
    8968:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
    896c:	e153000e 	cmp	r3, lr
    8970:	1afffff4 	bne	8948 <CScheduler::IsValidTask(CTask*)+0x18>
    8974:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8978:	e1a0000e 	mov	r0, lr
    897c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008980 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
    8980:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    8984:	e92d4010 	push	{r4, lr}
    8988:	e3530000 	cmp	r3, #0
    898c:	1a000008 	bne	89b4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x34>
    8990:	e3510000 	cmp	r1, #0
    8994:	e580105c 	str	r1, [r0, #92]	; 0x5c
    8998:	18bd8010 	popne	{r4, pc}
    899c:	e30411a4 	movw	r1, #16804	; 0x41a4
    89a0:	e3401001 	movt	r1, #1
    89a4:	e30401e0 	movw	r0, #16864	; 0x41e0
    89a8:	e3400001 	movt	r0, #1
    89ac:	e3a0208d 	mov	r2, #141	; 0x8d
    89b0:	eb0002b0 	bl	9478 <assertion_failed>
    89b4:	e30411a4 	movw	r1, #16804	; 0x41a4
    89b8:	e3401001 	movt	r1, #1
    89bc:	e30401c4 	movw	r0, #16836	; 0x41c4
    89c0:	e3400001 	movt	r0, #1
    89c4:	e3a0208b 	mov	r2, #139	; 0x8b
    89c8:	eb0002aa 	bl	9478 <assertion_failed>

000089cc <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
    89cc:	e5903060 	ldr	r3, [r0, #96]	; 0x60
    89d0:	e92d4010 	push	{r4, lr}
    89d4:	e3530000 	cmp	r3, #0
    89d8:	1a000008 	bne	8a00 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x34>
    89dc:	e3510000 	cmp	r1, #0
    89e0:	e5801060 	str	r1, [r0, #96]	; 0x60
    89e4:	18bd8010 	popne	{r4, pc}
    89e8:	e30411a4 	movw	r1, #16804	; 0x41a4
    89ec:	e3401001 	movt	r1, #1
    89f0:	e304021c 	movw	r0, #16924	; 0x421c
    89f4:	e3400001 	movt	r0, #1
    89f8:	e3a02094 	mov	r2, #148	; 0x94
    89fc:	eb00029d 	bl	9478 <assertion_failed>
    8a00:	e30411a4 	movw	r1, #16804	; 0x41a4
    8a04:	e3401001 	movt	r1, #1
    8a08:	e30401fc 	movw	r0, #16892	; 0x41fc
    8a0c:	e3400001 	movt	r0, #1
    8a10:	e3a02092 	mov	r2, #146	; 0x92
    8a14:	eb000297 	bl	9478 <assertion_failed>

00008a18 <CScheduler::SuspendNewTasks()>:
    8a18:	e5903064 	ldr	r3, [r0, #100]	; 0x64
    8a1c:	e2833001 	add	r3, r3, #1
    8a20:	e5803064 	str	r3, [r0, #100]	; 0x64
    8a24:	e12fff1e 	bx	lr

00008a28 <CScheduler::ResumeNewTasks()>:
    8a28:	e92d4070 	push	{r4, r5, r6, lr}
    8a2c:	e5904064 	ldr	r4, [r0, #100]	; 0x64
    8a30:	e3540000 	cmp	r4, #0
    8a34:	da000015 	ble	8a90 <CScheduler::ResumeNewTasks()+0x68>
    8a38:	e2444001 	sub	r4, r4, #1
    8a3c:	e1a06000 	mov	r6, r0
    8a40:	e3540000 	cmp	r4, #0
    8a44:	e5804064 	str	r4, [r0, #100]	; 0x64
    8a48:	18bd8070 	popne	{r4, r5, r6, pc}
    8a4c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    8a50:	e3530000 	cmp	r3, #0
    8a54:	08bd8070 	popeq	{r4, r5, r6, pc}
    8a58:	e2405004 	sub	r5, r0, #4
    8a5c:	ea000002 	b	8a6c <CScheduler::ResumeNewTasks()+0x44>
    8a60:	e2844001 	add	r4, r4, #1
    8a64:	e1530004 	cmp	r3, r4
    8a68:	98bd8070 	popls	{r4, r5, r6, pc}
    8a6c:	e5b50004 	ldr	r0, [r5, #4]!
    8a70:	e3500000 	cmp	r0, #0
    8a74:	0afffff9 	beq	8a60 <CScheduler::ResumeNewTasks()+0x38>
    8a78:	e5d02004 	ldrb	r2, [r0, #4]
    8a7c:	e3520000 	cmp	r2, #0
    8a80:	1afffff6 	bne	8a60 <CScheduler::ResumeNewTasks()+0x38>
    8a84:	ebffff3f 	bl	8788 <CTask::Start()>
    8a88:	e5963050 	ldr	r3, [r6, #80]	; 0x50
    8a8c:	eafffff3 	b	8a60 <CScheduler::ResumeNewTasks()+0x38>
    8a90:	e30411a4 	movw	r1, #16804	; 0x41a4
    8a94:	e3401001 	movt	r1, #1
    8a98:	e304023c 	movw	r0, #16956	; 0x423c
    8a9c:	e3400001 	movt	r0, #1
    8aa0:	e3a0209e 	mov	r2, #158	; 0x9e
    8aa4:	eb000273 	bl	9478 <assertion_failed>

00008aa8 <CScheduler::AddTask(CTask*)>:
    8aa8:	e92d4070 	push	{r4, r5, r6, lr}
    8aac:	e2515000 	subs	r5, r1, #0
    8ab0:	0a000021 	beq	8b3c <CScheduler::AddTask(CTask*)+0x94>
    8ab4:	e5903064 	ldr	r3, [r0, #100]	; 0x64
    8ab8:	e1a04000 	mov	r4, r0
    8abc:	e590e050 	ldr	lr, [r0, #80]	; 0x50
    8ac0:	e3530000 	cmp	r3, #0
    8ac4:	13a03000 	movne	r3, #0
    8ac8:	15c53004 	strbne	r3, [r5, #4]
    8acc:	e35e0000 	cmp	lr, #0
    8ad0:	0a00000c 	beq	8b08 <CScheduler::AddTask(CTask*)+0x60>
    8ad4:	e2402004 	sub	r2, r0, #4
    8ad8:	e3a03000 	mov	r3, #0
    8adc:	ea000002 	b	8aec <CScheduler::AddTask(CTask*)+0x44>
    8ae0:	e2833001 	add	r3, r3, #1
    8ae4:	e15e0003 	cmp	lr, r3
    8ae8:	0a000004 	beq	8b00 <CScheduler::AddTask(CTask*)+0x58>
    8aec:	e5b2c004 	ldr	ip, [r2, #4]!
    8af0:	e35c0000 	cmp	ip, #0
    8af4:	1afffff9 	bne	8ae0 <CScheduler::AddTask(CTask*)+0x38>
    8af8:	e7845103 	str	r5, [r4, r3, lsl #2]
    8afc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b00:	e35e0014 	cmp	lr, #20
    8b04:	0a000003 	beq	8b18 <CScheduler::AddTask(CTask*)+0x70>
    8b08:	e28e3001 	add	r3, lr, #1
    8b0c:	e5843050 	str	r3, [r4, #80]	; 0x50
    8b10:	e784510e 	str	r5, [r4, lr, lsl #2]
    8b14:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b18:	eb0008e0 	bl	aea0 <CLogger::Get()>
    8b1c:	e3a02000 	mov	r2, #0
    8b20:	e3043260 	movw	r3, #16992	; 0x4260
    8b24:	e3403001 	movt	r3, #1
    8b28:	e3041394 	movw	r1, #17300	; 0x4394
    8b2c:	e3401001 	movt	r1, #1
    8b30:	eb000aba 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8b34:	e594e050 	ldr	lr, [r4, #80]	; 0x50
    8b38:	eafffff2 	b	8b08 <CScheduler::AddTask(CTask*)+0x60>
    8b3c:	e30411a4 	movw	r1, #16804	; 0x41a4
    8b40:	e3401001 	movt	r1, #1
    8b44:	e3040254 	movw	r0, #16980	; 0x4254
    8b48:	e3400001 	movt	r0, #1
    8b4c:	e3a020b1 	mov	r2, #177	; 0xb1
    8b50:	eb000248 	bl	9478 <assertion_failed>

00008b54 <CScheduler::RemoveTask(CTask*)>:
    8b54:	e92d4010 	push	{r4, lr}
    8b58:	e590e050 	ldr	lr, [r0, #80]	; 0x50
    8b5c:	e35e0000 	cmp	lr, #0
    8b60:	0a00000e 	beq	8ba0 <CScheduler::RemoveTask(CTask*)+0x4c>
    8b64:	e2402004 	sub	r2, r0, #4
    8b68:	e3a03000 	mov	r3, #0
    8b6c:	ea000002 	b	8b7c <CScheduler::RemoveTask(CTask*)+0x28>
    8b70:	e2833001 	add	r3, r3, #1
    8b74:	e15e0003 	cmp	lr, r3
    8b78:	0a000008 	beq	8ba0 <CScheduler::RemoveTask(CTask*)+0x4c>
    8b7c:	e5b2c004 	ldr	ip, [r2, #4]!
    8b80:	e15c0001 	cmp	ip, r1
    8b84:	1afffff9 	bne	8b70 <CScheduler::RemoveTask(CTask*)+0x1c>
    8b88:	e24ee001 	sub	lr, lr, #1
    8b8c:	e3a02000 	mov	r2, #0
    8b90:	e15e0003 	cmp	lr, r3
    8b94:	e7802103 	str	r2, [r0, r3, lsl #2]
    8b98:	05803050 	streq	r3, [r0, #80]	; 0x50
    8b9c:	e8bd8010 	pop	{r4, pc}
    8ba0:	e30411a4 	movw	r1, #16804	; 0x41a4
    8ba4:	e3401001 	movt	r1, #1
    8ba8:	e3050238 	movw	r0, #21048	; 0x5238
    8bac:	e3400001 	movt	r0, #1
    8bb0:	e3a020dc 	mov	r2, #220	; 0xdc
    8bb4:	eb00022f 	bl	9478 <assertion_failed>

00008bb8 <CScheduler::WakeTasks(CTask**)>:
    8bb8:	e92d4070 	push	{r4, r5, r6, lr}
    8bbc:	e2514000 	subs	r4, r1, #0
    8bc0:	0a000023 	beq	8c54 <CScheduler::WakeTasks(CTask**)+0x9c>
    8bc4:	e1a05000 	mov	r5, r0
    8bc8:	e5900068 	ldr	r0, [r0, #104]	; 0x68
    8bcc:	e3500000 	cmp	r0, #0
    8bd0:	1a00001d 	bne	8c4c <CScheduler::WakeTasks(CTask**)+0x94>
    8bd4:	e5943000 	ldr	r3, [r4]
    8bd8:	e3a0c000 	mov	ip, #0
    8bdc:	e584c000 	str	ip, [r4]
    8be0:	e153000c 	cmp	r3, ip
    8be4:	0a000013 	beq	8c38 <CScheduler::WakeTasks(CTask**)+0x80>
    8be8:	e3a01001 	mov	r1, #1
    8bec:	ea000005 	b	8c08 <CScheduler::WakeTasks(CTask**)+0x50>
    8bf0:	e59320e0 	ldr	r2, [r3, #224]	; 0xe0
    8bf4:	e5c31004 	strb	r1, [r3, #4]
    8bf8:	e3520000 	cmp	r2, #0
    8bfc:	e583c0e0 	str	ip, [r3, #224]	; 0xe0
    8c00:	0a00000c 	beq	8c38 <CScheduler::WakeTasks(CTask**)+0x80>
    8c04:	e1a03002 	mov	r3, r2
    8c08:	e5d32004 	ldrb	r2, [r3, #4]
    8c0c:	e3520002 	cmp	r2, #2
    8c10:	0afffff6 	beq	8bf0 <CScheduler::WakeTasks(CTask**)+0x38>
    8c14:	e5d32004 	ldrb	r2, [r3, #4]
    8c18:	e3520003 	cmp	r2, #3
    8c1c:	0afffff3 	beq	8bf0 <CScheduler::WakeTasks(CTask**)+0x38>
    8c20:	e30411a4 	movw	r1, #16804	; 0x41a4
    8c24:	e3401001 	movt	r1, #1
    8c28:	e3040294 	movw	r0, #17044	; 0x4294
    8c2c:	e3400001 	movt	r0, #1
    8c30:	e3a02f4b 	mov	r2, #300	; 0x12c
    8c34:	eb00020f 	bl	9478 <assertion_failed>
    8c38:	e5953068 	ldr	r3, [r5, #104]	; 0x68
    8c3c:	e3530000 	cmp	r3, #0
    8c40:	08bd8070 	popeq	{r4, r5, r6, pc}
    8c44:	e8bd4070 	pop	{r4, r5, r6, lr}
    8c48:	ea0021b0 	b	11310 <LeaveCritical>
    8c4c:	eb002184 	bl	11264 <EnterCritical>
    8c50:	eaffffdf 	b	8bd4 <CScheduler::WakeTasks(CTask**)+0x1c>
    8c54:	e30411a4 	movw	r1, #16804	; 0x41a4
    8c58:	e3401001 	movt	r1, #1
    8c5c:	e3040280 	movw	r0, #17024	; 0x4280
    8c60:	e3400001 	movt	r0, #1
    8c64:	e300211a 	movw	r2, #282	; 0x11a
    8c68:	eb000202 	bl	9478 <assertion_failed>

00008c6c <CScheduler::GetNextTask()>:
    8c6c:	e92d4070 	push	{r4, r5, r6, lr}
    8c70:	e1a06000 	mov	r6, r0
    8c74:	e5904058 	ldr	r4, [r0, #88]	; 0x58
    8c78:	e3540014 	cmp	r4, #20
    8c7c:	23a04000 	movcs	r4, #0
    8c80:	eb001b8f 	bl	fac4 <CTimer::Get()>
    8c84:	eb0018c0 	bl	ef8c <CTimer::GetClockTicks()>
    8c88:	e5961050 	ldr	r1, [r6, #80]	; 0x50
    8c8c:	e3510000 	cmp	r1, #0
    8c90:	0a000017 	beq	8cf4 <CScheduler::GetNextTask()+0x88>
    8c94:	e3a02001 	mov	r2, #1
    8c98:	e2844001 	add	r4, r4, #1
    8c9c:	e1540001 	cmp	r4, r1
    8ca0:	23a04000 	movcs	r4, #0
    8ca4:	e7965104 	ldr	r5, [r6, r4, lsl #2]
    8ca8:	e3550000 	cmp	r5, #0
    8cac:	0a00000d 	beq	8ce8 <CScheduler::GetNextTask()+0x7c>
    8cb0:	e5d53004 	ldrb	r3, [r5, #4]
    8cb4:	e3530005 	cmp	r3, #5
    8cb8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8cbc:	ea000040 	b	8dc4 <CScheduler::GetNextTask()+0x158>
    8cc0:	00008ce8 	.word	0x00008ce8
    8cc4:	00008cf8 	.word	0x00008cf8
    8cc8:	00008ce8 	.word	0x00008ce8
    8ccc:	00008cd8 	.word	0x00008cd8
    8cd0:	00008d74 	.word	0x00008d74
    8cd4:	00008d00 	.word	0x00008d00
    8cd8:	e5953008 	ldr	r3, [r5, #8]
    8cdc:	e0433000 	sub	r3, r3, r0
    8ce0:	e3530000 	cmp	r3, #0
    8ce4:	da00002a 	ble	8d94 <CScheduler::GetNextTask()+0x128>
    8ce8:	e2822001 	add	r2, r2, #1
    8cec:	e1520001 	cmp	r2, r1
    8cf0:	9affffe8 	bls	8c98 <CScheduler::GetNextTask()+0x2c>
    8cf4:	e3a04014 	mov	r4, #20
    8cf8:	e1a00004 	mov	r0, r4
    8cfc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d00:	e5963060 	ldr	r3, [r6, #96]	; 0x60
    8d04:	e3530000 	cmp	r3, #0
    8d08:	0a000004 	beq	8d20 <CScheduler::GetNextTask()+0xb4>
    8d0c:	e1a00005 	mov	r0, r5
    8d10:	e12fff33 	blx	r3
    8d14:	e5961050 	ldr	r1, [r6, #80]	; 0x50
    8d18:	e3510000 	cmp	r1, #0
    8d1c:	0a000022 	beq	8dac <CScheduler::GetNextTask()+0x140>
    8d20:	e2462004 	sub	r2, r6, #4
    8d24:	e3a03000 	mov	r3, #0
    8d28:	ea000002 	b	8d38 <CScheduler::GetNextTask()+0xcc>
    8d2c:	e2833001 	add	r3, r3, #1
    8d30:	e1510003 	cmp	r1, r3
    8d34:	9a00001c 	bls	8dac <CScheduler::GetNextTask()+0x140>
    8d38:	e5b2c004 	ldr	ip, [r2, #4]!
    8d3c:	e155000c 	cmp	r5, ip
    8d40:	1afffff9 	bne	8d2c <CScheduler::GetNextTask()+0xc0>
    8d44:	e2411001 	sub	r1, r1, #1
    8d48:	e3a02000 	mov	r2, #0
    8d4c:	e1510003 	cmp	r1, r3
    8d50:	e7862103 	str	r2, [r6, r3, lsl #2]
    8d54:	05863050 	streq	r3, [r6, #80]	; 0x50
    8d58:	e1a00005 	mov	r0, r5
    8d5c:	e5953000 	ldr	r3, [r5]
    8d60:	e3a04014 	mov	r4, #20
    8d64:	e5933004 	ldr	r3, [r3, #4]
    8d68:	e12fff33 	blx	r3
    8d6c:	e1a00004 	mov	r0, r4
    8d70:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d74:	e5953008 	ldr	r3, [r5, #8]
    8d78:	e0433000 	sub	r3, r3, r0
    8d7c:	e3530000 	cmp	r3, #0
    8d80:	caffffd8 	bgt	8ce8 <CScheduler::GetNextTask()+0x7c>
    8d84:	e3a03001 	mov	r3, #1
    8d88:	e1a00004 	mov	r0, r4
    8d8c:	e5c53004 	strb	r3, [r5, #4]
    8d90:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d94:	e3a02001 	mov	r2, #1
    8d98:	e3a03000 	mov	r3, #0
    8d9c:	e1a00004 	mov	r0, r4
    8da0:	e5c52004 	strb	r2, [r5, #4]
    8da4:	e5853008 	str	r3, [r5, #8]
    8da8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8dac:	e30411a4 	movw	r1, #16804	; 0x41a4
    8db0:	e3401001 	movt	r1, #1
    8db4:	e3050238 	movw	r0, #21048	; 0x5238
    8db8:	e3400001 	movt	r0, #1
    8dbc:	e3a020dc 	mov	r2, #220	; 0xdc
    8dc0:	eb0001ac 	bl	9478 <assertion_failed>
    8dc4:	e30411a4 	movw	r1, #16804	; 0x41a4
    8dc8:	e3401001 	movt	r1, #1
    8dcc:	e3050238 	movw	r0, #21048	; 0x5238
    8dd0:	e3400001 	movt	r0, #1
    8dd4:	e3002172 	movw	r2, #370	; 0x172
    8dd8:	eb0001a6 	bl	9478 <assertion_failed>

00008ddc <CScheduler::Yield()>:
    8ddc:	e92d4070 	push	{r4, r5, r6, lr}
    8de0:	e1a04000 	mov	r4, r0
    8de4:	e1a00004 	mov	r0, r4
    8de8:	ebffff9f 	bl	8c6c <CScheduler::GetNextTask()>
    8dec:	e3500014 	cmp	r0, #20
    8df0:	e5840058 	str	r0, [r4, #88]	; 0x58
    8df4:	1a000008 	bne	8e1c <CScheduler::Yield()+0x40>
    8df8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    8dfc:	e3530000 	cmp	r3, #0
    8e00:	1afffff7 	bne	8de4 <CScheduler::Yield()+0x8>
    8e04:	e30411a4 	movw	r1, #16804	; 0x41a4
    8e08:	e3401001 	movt	r1, #1
    8e0c:	e30402f0 	movw	r0, #17136	; 0x42f0
    8e10:	e3400001 	movt	r0, #1
    8e14:	e3a02038 	mov	r2, #56	; 0x38
    8e18:	eb000196 	bl	9478 <assertion_failed>
    8e1c:	e3500013 	cmp	r0, #19
    8e20:	8a000010 	bhi	8e68 <CScheduler::Yield()+0x8c>
    8e24:	e7940100 	ldr	r0, [r4, r0, lsl #2]
    8e28:	e3500000 	cmp	r0, #0
    8e2c:	0a000013 	beq	8e80 <CScheduler::Yield()+0xa4>
    8e30:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8e34:	e1530000 	cmp	r3, r0
    8e38:	08bd8070 	popeq	{r4, r5, r6, pc}
    8e3c:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
    8e40:	e283500c 	add	r5, r3, #12
    8e44:	e280600c 	add	r6, r0, #12
    8e48:	e5840054 	str	r0, [r4, #84]	; 0x54
    8e4c:	e3520000 	cmp	r2, #0
    8e50:	0a000000 	beq	8e58 <CScheduler::Yield()+0x7c>
    8e54:	e12fff32 	blx	r2
    8e58:	e1a01006 	mov	r1, r6
    8e5c:	e1a00005 	mov	r0, r5
    8e60:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e64:	ea0000be 	b	9164 <TaskSwitch>
    8e68:	e30411a4 	movw	r1, #16804	; 0x41a4
    8e6c:	e3401001 	movt	r1, #1
    8e70:	e3040300 	movw	r0, #17152	; 0x4300
    8e74:	e3400001 	movt	r0, #1
    8e78:	e3a0203b 	mov	r2, #59	; 0x3b
    8e7c:	eb00017d 	bl	9478 <assertion_failed>
    8e80:	e30411a4 	movw	r1, #16804	; 0x41a4
    8e84:	e3401001 	movt	r1, #1
    8e88:	e3040318 	movw	r0, #17176	; 0x4318
    8e8c:	e3400001 	movt	r0, #1
    8e90:	e3a0203d 	mov	r2, #61	; 0x3d
    8e94:	eb000177 	bl	9478 <assertion_failed>

00008e98 <CScheduler::usSleep(unsigned int) [clone .part.0]>:
    8e98:	e92d4070 	push	{r4, r5, r6, lr}
    8e9c:	e1a04000 	mov	r4, r0
    8ea0:	e1a05001 	mov	r5, r1
    8ea4:	eb001b06 	bl	fac4 <CTimer::Get()>
    8ea8:	eb001837 	bl	ef8c <CTimer::GetClockTicks()>
    8eac:	e5943054 	ldr	r3, [r4, #84]	; 0x54
    8eb0:	e3530000 	cmp	r3, #0
    8eb4:	0a000009 	beq	8ee0 <CScheduler::usSleep(unsigned int) [clone .part.0]+0x48>
    8eb8:	e5d32004 	ldrb	r2, [r3, #4]
    8ebc:	e3520001 	cmp	r2, #1
    8ec0:	1a00000c 	bne	8ef8 <CScheduler::usSleep(unsigned int) [clone .part.0]+0x60>
    8ec4:	e0801005 	add	r1, r0, r5
    8ec8:	e3a02004 	mov	r2, #4
    8ecc:	e1a00004 	mov	r0, r4
    8ed0:	e5831008 	str	r1, [r3, #8]
    8ed4:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ed8:	e5c32004 	strb	r2, [r3, #4]
    8edc:	eaffffbe 	b	8ddc <CScheduler::Yield()>
    8ee0:	e30411a4 	movw	r1, #16804	; 0x41a4
    8ee4:	e3401001 	movt	r1, #1
    8ee8:	e3040324 	movw	r0, #17188	; 0x4324
    8eec:	e3400001 	movt	r0, #1
    8ef0:	e3a0206f 	mov	r2, #111	; 0x6f
    8ef4:	eb00015f 	bl	9478 <assertion_failed>
    8ef8:	e30411a4 	movw	r1, #16804	; 0x41a4
    8efc:	e3401001 	movt	r1, #1
    8f00:	e3040334 	movw	r0, #17204	; 0x4334
    8f04:	e3400001 	movt	r0, #1
    8f08:	e3a02070 	mov	r2, #112	; 0x70
    8f0c:	eb000159 	bl	9478 <assertion_failed>

00008f10 <CScheduler::usSleep(unsigned int)>:
    8f10:	e3510000 	cmp	r1, #0
    8f14:	012fff1e 	bxeq	lr
    8f18:	eaffffde 	b	8e98 <CScheduler::usSleep(unsigned int) [clone .part.0]>

00008f1c <CScheduler::Sleep(unsigned int)>:
    8f1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f20:	e3006708 	movw	r6, #1800	; 0x708
    8f24:	e1a04001 	mov	r4, r1
    8f28:	e1a05000 	mov	r5, r0
    8f2c:	e1510006 	cmp	r1, r6
    8f30:	9a000008 	bls	8f58 <CScheduler::Sleep(unsigned int)+0x3c>
    8f34:	e3a07cd2 	mov	r7, #53760	; 0xd200
    8f38:	e3467b49 	movt	r7, #27465	; 0x6b49
    8f3c:	e2444c07 	sub	r4, r4, #1792	; 0x700
    8f40:	e1a01007 	mov	r1, r7
    8f44:	e1a00005 	mov	r0, r5
    8f48:	e2444008 	sub	r4, r4, #8
    8f4c:	ebffffd1 	bl	8e98 <CScheduler::usSleep(unsigned int) [clone .part.0]>
    8f50:	e1540006 	cmp	r4, r6
    8f54:	8afffff8 	bhi	8f3c <CScheduler::Sleep(unsigned int)+0x20>
    8f58:	e3041240 	movw	r1, #16960	; 0x4240
    8f5c:	e340100f 	movt	r1, #15
    8f60:	e0010491 	mul	r1, r1, r4
    8f64:	e3510000 	cmp	r1, #0
    8f68:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8f6c:	e1a00005 	mov	r0, r5
    8f70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8f74:	eaffffc7 	b	8e98 <CScheduler::usSleep(unsigned int) [clone .part.0]>

00008f78 <CScheduler::MsSleep(unsigned int)>:
    8f78:	e3510000 	cmp	r1, #0
    8f7c:	012fff1e 	bxeq	lr
    8f80:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    8f84:	e0010193 	mul	r1, r3, r1
    8f88:	e3510000 	cmp	r1, #0
    8f8c:	012fff1e 	bxeq	lr
    8f90:	eaffffc0 	b	8e98 <CScheduler::usSleep(unsigned int) [clone .part.0]>

00008f94 <CScheduler::BlockTask(CTask**, unsigned int)>:
    8f94:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8f98:	e2516000 	subs	r6, r1, #0
    8f9c:	0a000052 	beq	90ec <CScheduler::BlockTask(CTask**, unsigned int)+0x158>
    8fa0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    8fa4:	e1a05000 	mov	r5, r0
    8fa8:	e59340e0 	ldr	r4, [r3, #224]	; 0xe0
    8fac:	e3540000 	cmp	r4, #0
    8fb0:	1a000053 	bne	9104 <CScheduler::BlockTask(CTask**, unsigned int)+0x170>
    8fb4:	e1a07002 	mov	r7, r2
    8fb8:	e5d32004 	ldrb	r2, [r3, #4]
    8fbc:	e3520001 	cmp	r2, #1
    8fc0:	1a000055 	bne	911c <CScheduler::BlockTask(CTask**, unsigned int)+0x188>
    8fc4:	e5900068 	ldr	r0, [r0, #104]	; 0x68
    8fc8:	e3500000 	cmp	r0, #0
    8fcc:	1a000030 	bne	9094 <CScheduler::BlockTask(CTask**, unsigned int)+0x100>
    8fd0:	e5962000 	ldr	r2, [r6]
    8fd4:	e3570000 	cmp	r7, #0
    8fd8:	e58320e0 	str	r2, [r3, #224]	; 0xe0
    8fdc:	e5863000 	str	r3, [r6]
    8fe0:	1a00002e 	bne	90a0 <CScheduler::BlockTask(CTask**, unsigned int)+0x10c>
    8fe4:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    8fe8:	e3a02002 	mov	r2, #2
    8fec:	e5c32004 	strb	r2, [r3, #4]
    8ff0:	e5953068 	ldr	r3, [r5, #104]	; 0x68
    8ff4:	e3530000 	cmp	r3, #0
    8ff8:	1a000032 	bne	90c8 <CScheduler::BlockTask(CTask**, unsigned int)+0x134>
    8ffc:	e1a00005 	mov	r0, r5
    9000:	ebffff75 	bl	8ddc <CScheduler::Yield()>
    9004:	e5950068 	ldr	r0, [r5, #104]	; 0x68
    9008:	e3500000 	cmp	r0, #0
    900c:	1a00002f 	bne	90d0 <CScheduler::BlockTask(CTask**, unsigned int)+0x13c>
    9010:	e5963000 	ldr	r3, [r6]
    9014:	e3530000 	cmp	r3, #0
    9018:	0595c054 	ldreq	ip, [r5, #84]	; 0x54
    901c:	058c30e0 	streq	r3, [ip, #224]	; 0xe0
    9020:	0a000017 	beq	9084 <CScheduler::BlockTask(CTask**, unsigned int)+0xf0>
    9024:	e595c054 	ldr	ip, [r5, #84]	; 0x54
    9028:	ea000004 	b	9040 <CScheduler::BlockTask(CTask**, unsigned int)+0xac>
    902c:	e59320e0 	ldr	r2, [r3, #224]	; 0xe0
    9030:	e1a04003 	mov	r4, r3
    9034:	e3520000 	cmp	r2, #0
    9038:	0a00000b 	beq	906c <CScheduler::BlockTask(CTask**, unsigned int)+0xd8>
    903c:	e1a03002 	mov	r3, r2
    9040:	e153000c 	cmp	r3, ip
    9044:	1afffff8 	bne	902c <CScheduler::BlockTask(CTask**, unsigned int)+0x98>
    9048:	e59320e0 	ldr	r2, [r3, #224]	; 0xe0
    904c:	e3540000 	cmp	r4, #0
    9050:	158420e0 	strne	r2, [r4, #224]	; 0xe0
    9054:	e1a04003 	mov	r4, r3
    9058:	05862000 	streq	r2, [r6]
    905c:	e59320e0 	ldr	r2, [r3, #224]	; 0xe0
    9060:	0595c054 	ldreq	ip, [r5, #84]	; 0x54
    9064:	e3520000 	cmp	r2, #0
    9068:	1afffff3 	bne	903c <CScheduler::BlockTask(CTask**, unsigned int)+0xa8>
    906c:	e3a03000 	mov	r3, #0
    9070:	e58c30e0 	str	r3, [ip, #224]	; 0xe0
    9074:	e1500003 	cmp	r0, r3
    9078:	0a000001 	beq	9084 <CScheduler::BlockTask(CTask**, unsigned int)+0xf0>
    907c:	eb0020a3 	bl	11310 <LeaveCritical>
    9080:	e595c054 	ldr	ip, [r5, #84]	; 0x54
    9084:	e59c0008 	ldr	r0, [ip, #8]
    9088:	e16f0f10 	clz	r0, r0
    908c:	e1a002a0 	lsr	r0, r0, #5
    9090:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9094:	eb002072 	bl	11264 <EnterCritical>
    9098:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    909c:	eaffffcb 	b	8fd0 <CScheduler::BlockTask(CTask**, unsigned int)+0x3c>
    90a0:	eb001a87 	bl	fac4 <CTimer::Get()>
    90a4:	eb0017b8 	bl	ef8c <CTimer::GetClockTicks()>
    90a8:	e5953054 	ldr	r3, [r5, #84]	; 0x54
    90ac:	e0872000 	add	r2, r7, r0
    90b0:	e3a01003 	mov	r1, #3
    90b4:	e5832008 	str	r2, [r3, #8]
    90b8:	e5c31004 	strb	r1, [r3, #4]
    90bc:	e5953068 	ldr	r3, [r5, #104]	; 0x68
    90c0:	e3530000 	cmp	r3, #0
    90c4:	0affffcc 	beq	8ffc <CScheduler::BlockTask(CTask**, unsigned int)+0x68>
    90c8:	eb002090 	bl	11310 <LeaveCritical>
    90cc:	eaffffca 	b	8ffc <CScheduler::BlockTask(CTask**, unsigned int)+0x68>
    90d0:	eb002063 	bl	11264 <EnterCritical>
    90d4:	e5963000 	ldr	r3, [r6]
    90d8:	e5950068 	ldr	r0, [r5, #104]	; 0x68
    90dc:	e3530000 	cmp	r3, #0
    90e0:	1affffcf 	bne	9024 <CScheduler::BlockTask(CTask**, unsigned int)+0x90>
    90e4:	e595c054 	ldr	ip, [r5, #84]	; 0x54
    90e8:	eaffffdf 	b	906c <CScheduler::BlockTask(CTask**, unsigned int)+0xd8>
    90ec:	e30411a4 	movw	r1, #16804	; 0x41a4
    90f0:	e3401001 	movt	r1, #1
    90f4:	e3040280 	movw	r0, #17024	; 0x4280
    90f8:	e3400001 	movt	r0, #1
    90fc:	e3a020e1 	mov	r2, #225	; 0xe1
    9100:	eb0000dc 	bl	9478 <assertion_failed>
    9104:	e30411a4 	movw	r1, #16804	; 0x41a4
    9108:	e3401001 	movt	r1, #1
    910c:	e3040360 	movw	r0, #17248	; 0x4360
    9110:	e3400001 	movt	r0, #1
    9114:	e3a020e2 	mov	r2, #226	; 0xe2
    9118:	eb0000d6 	bl	9478 <assertion_failed>
    911c:	e30411a4 	movw	r1, #16804	; 0x41a4
    9120:	e3401001 	movt	r1, #1
    9124:	e3040334 	movw	r0, #17204	; 0x4334
    9128:	e3400001 	movt	r0, #1
    912c:	e3a020e4 	mov	r2, #228	; 0xe4
    9130:	eb0000d0 	bl	9478 <assertion_failed>

00009134 <CScheduler::Get()>:
    9134:	e3063908 	movw	r3, #26888	; 0x6908
    9138:	e3403001 	movt	r3, #1
    913c:	e5930000 	ldr	r0, [r3]
    9140:	e3500000 	cmp	r0, #0
    9144:	112fff1e 	bxne	lr
    9148:	e30411a4 	movw	r1, #16804	; 0x41a4
    914c:	e3401001 	movt	r1, #1
    9150:	e3040384 	movw	r0, #17284	; 0x4384
    9154:	e3400001 	movt	r0, #1
    9158:	e3a02f5f 	mov	r2, #380	; 0x17c
    915c:	e92d4010 	push	{r4, lr}
    9160:	eb0000c4 	bl	9478 <assertion_failed>

00009164 <TaskSwitch>:
    9164:	eef82a10 	vmrs	r2, fpexc
    9168:	eef13a10 	vmrs	r3, fpscr
    916c:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9170:	ec800b20 	vstmia	r0, {d0-d15}
    9174:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9178:	eee82a10 	vmsr	fpexc, r2
    917c:	eee13a10 	vmsr	fpscr, r3
    9180:	ec910b20 	vldmia	r1, {d0-d15}
    9184:	e12fff1e 	bx	lr

00009188 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
    9188:	e3a02000 	mov	r2, #0
    918c:	e5c01000 	strb	r1, [r0]
    9190:	e5802004 	str	r2, [r0, #4]
    9194:	e12fff1e 	bx	lr

00009198 <CSynchronizationEvent::~CSynchronizationEvent()>:
    9198:	e5903004 	ldr	r3, [r0, #4]
    919c:	e3530000 	cmp	r3, #0
    91a0:	012fff1e 	bxeq	lr
    91a4:	e304139c 	movw	r1, #17308	; 0x439c
    91a8:	e3401001 	movt	r1, #1
    91ac:	e30403b8 	movw	r0, #17336	; 0x43b8
    91b0:	e3400001 	movt	r0, #1
    91b4:	e3a02023 	mov	r2, #35	; 0x23
    91b8:	e92d4010 	push	{r4, lr}
    91bc:	eb0000ad 	bl	9478 <assertion_failed>

000091c0 <CSynchronizationEvent::GetState()>:
    91c0:	e5d00000 	ldrb	r0, [r0]
    91c4:	e12fff1e 	bx	lr

000091c8 <CSynchronizationEvent::Clear()>:
    91c8:	e3a03000 	mov	r3, #0
    91cc:	e5c03000 	strb	r3, [r0]
    91d0:	e12fff1e 	bx	lr

000091d4 <CSynchronizationEvent::Set()>:
    91d4:	e5d03000 	ldrb	r3, [r0]
    91d8:	e3530000 	cmp	r3, #0
    91dc:	112fff1e 	bxne	lr
    91e0:	e92d4010 	push	{r4, lr}
    91e4:	e1a04000 	mov	r4, r0
    91e8:	e3a03001 	mov	r3, #1
    91ec:	e4c43004 	strb	r3, [r4], #4
    91f0:	ebffffcf 	bl	9134 <CScheduler::Get()>
    91f4:	e1a01004 	mov	r1, r4
    91f8:	e8bd4010 	pop	{r4, lr}
    91fc:	eafffe6d 	b	8bb8 <CScheduler::WakeTasks(CTask**)>

00009200 <CSynchronizationEvent::Pulse()>:
    9200:	e92d4010 	push	{r4, lr}
    9204:	e1a04000 	mov	r4, r0
    9208:	e3a03000 	mov	r3, #0
    920c:	e4c43004 	strb	r3, [r4], #4
    9210:	ebffffc7 	bl	9134 <CScheduler::Get()>
    9214:	e1a01004 	mov	r1, r4
    9218:	e8bd4010 	pop	{r4, lr}
    921c:	eafffe65 	b	8bb8 <CScheduler::WakeTasks(CTask**)>

00009220 <CSynchronizationEvent::Wait()>:
    9220:	e5d02000 	ldrb	r2, [r0]
    9224:	e92d4070 	push	{r4, r5, r6, lr}
    9228:	e21250ff 	ands	r5, r2, #255	; 0xff
    922c:	18bd8070 	popne	{r4, r5, r6, pc}
    9230:	e1a04000 	mov	r4, r0
    9234:	ebffffbe 	bl	9134 <CScheduler::Get()>
    9238:	e1a02005 	mov	r2, r5
    923c:	e2841004 	add	r1, r4, #4
    9240:	e8bd4070 	pop	{r4, r5, r6, lr}
    9244:	eaffff52 	b	8f94 <CScheduler::BlockTask(CTask**, unsigned int)>

00009248 <CSynchronizationEvent::WaitWithTimeout(unsigned int)>:
    9248:	e5d03000 	ldrb	r3, [r0]
    924c:	e92d4070 	push	{r4, r5, r6, lr}
    9250:	e1a04001 	mov	r4, r1
    9254:	e3530000 	cmp	r3, #0
    9258:	0a000002 	beq	9268 <CSynchronizationEvent::WaitWithTimeout(unsigned int)+0x20>
    925c:	e16f0f11 	clz	r0, r1
    9260:	e1a002a0 	lsr	r0, r0, #5
    9264:	e8bd8070 	pop	{r4, r5, r6, pc}
    9268:	e1a05000 	mov	r5, r0
    926c:	ebffffb0 	bl	9134 <CScheduler::Get()>
    9270:	e1a02004 	mov	r2, r4
    9274:	e2851004 	add	r1, r5, #4
    9278:	e8bd4070 	pop	{r4, r5, r6, lr}
    927c:	eaffff44 	b	8f94 <CScheduler::BlockTask(CTask**, unsigned int)>

00009280 <CActLED::CActLED(bool)>:
    9280:	e306390c 	movw	r3, #26892	; 0x690c
    9284:	e3403001 	movt	r3, #1
    9288:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    928c:	e3a02000 	mov	r2, #0
    9290:	e1a06001 	mov	r6, r1
    9294:	e5802000 	str	r2, [r0]
    9298:	e1a05000 	mov	r5, r0
    929c:	e5802004 	str	r2, [r0, #4]
    92a0:	e5830000 	str	r0, [r3]
    92a4:	eb000b03 	bl	beb8 <CMachineInfo::Get()>
    92a8:	eb000a29 	bl	bb54 <CMachineInfo::GetActLEDInfo() const>
    92ac:	e1a04000 	mov	r4, r0
    92b0:	e2107080 	ands	r7, r0, #128	; 0x80
    92b4:	0a000015 	beq	9310 <CActLED::CActLED(bool)+0x90>
    92b8:	e3a00014 	mov	r0, #20
    92bc:	eb001d78 	bl	108a4 <operator new(unsigned int)>
    92c0:	e1a02006 	mov	r2, r6
    92c4:	e204103f 	and	r1, r4, #63	; 0x3f
    92c8:	e1a07000 	mov	r7, r0
    92cc:	eb001cd3 	bl	10620 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    92d0:	e5956000 	ldr	r6, [r5]
    92d4:	e2144040 	ands	r4, r4, #64	; 0x40
    92d8:	e5857004 	str	r7, [r5, #4]
    92dc:	03a03001 	moveq	r3, #1
    92e0:	13a03000 	movne	r3, #0
    92e4:	e3560000 	cmp	r6, #0
    92e8:	e5c53008 	strb	r3, [r5, #8]
    92ec:	1a000013 	bne	9340 <CActLED::CActLED(bool)+0xc0>
    92f0:	e3570000 	cmp	r7, #0
    92f4:	0a000015 	beq	9350 <CActLED::CActLED(bool)+0xd0>
    92f8:	e2541000 	subs	r1, r4, #0
    92fc:	e1a00007 	mov	r0, r7
    9300:	13a01001 	movne	r1, #1
    9304:	eb001c77 	bl	104e8 <CVirtualGPIOPin::Write(unsigned int)>
    9308:	e1a00005 	mov	r0, r5
    930c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9310:	e3a00028 	mov	r0, #40	; 0x28
    9314:	eb001d62 	bl	108a4 <operator new(unsigned int)>
    9318:	e1a03007 	mov	r3, r7
    931c:	e204103f 	and	r1, r4, #63	; 0x3f
    9320:	e3a02001 	mov	r2, #1
    9324:	e1a06000 	mov	r6, r0
    9328:	eb0004ee 	bl	a6e8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    932c:	e2144040 	ands	r4, r4, #64	; 0x40
    9330:	e5856000 	str	r6, [r5]
    9334:	03a03001 	moveq	r3, #1
    9338:	13a03000 	movne	r3, #0
    933c:	e5c53008 	strb	r3, [r5, #8]
    9340:	e2541000 	subs	r1, r4, #0
    9344:	e1a00006 	mov	r0, r6
    9348:	13a01001 	movne	r1, #1
    934c:	eb000274 	bl	9d24 <CGPIOPin::Write(unsigned int)>
    9350:	e1a00005 	mov	r0, r5
    9354:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009358 <CActLED::~CActLED()>:
    9358:	e306390c 	movw	r3, #26892	; 0x690c
    935c:	e3403001 	movt	r3, #1
    9360:	e3a02000 	mov	r2, #0
    9364:	e5832000 	str	r2, [r3]
    9368:	e12fff1e 	bx	lr

0000936c <CActLED::On()>:
    936c:	e1a03000 	mov	r3, r0
    9370:	e5900000 	ldr	r0, [r0]
    9374:	e3500000 	cmp	r0, #0
    9378:	0a000001 	beq	9384 <CActLED::On()+0x18>
    937c:	e5d31008 	ldrb	r1, [r3, #8]
    9380:	ea000267 	b	9d24 <CGPIOPin::Write(unsigned int)>
    9384:	e5930004 	ldr	r0, [r3, #4]
    9388:	e3500000 	cmp	r0, #0
    938c:	012fff1e 	bxeq	lr
    9390:	e5d31008 	ldrb	r1, [r3, #8]
    9394:	ea001c53 	b	104e8 <CVirtualGPIOPin::Write(unsigned int)>

00009398 <CActLED::Off()>:
    9398:	e1a03000 	mov	r3, r0
    939c:	e5900000 	ldr	r0, [r0]
    93a0:	e3500000 	cmp	r0, #0
    93a4:	0a000002 	beq	93b4 <CActLED::Off()+0x1c>
    93a8:	e5d31008 	ldrb	r1, [r3, #8]
    93ac:	e2211001 	eor	r1, r1, #1
    93b0:	ea00025b 	b	9d24 <CGPIOPin::Write(unsigned int)>
    93b4:	e5930004 	ldr	r0, [r3, #4]
    93b8:	e3500000 	cmp	r0, #0
    93bc:	012fff1e 	bxeq	lr
    93c0:	e5d31008 	ldrb	r1, [r3, #8]
    93c4:	e2211001 	eor	r1, r1, #1
    93c8:	ea001c46 	b	104e8 <CVirtualGPIOPin::Write(unsigned int)>

000093cc <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    93cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    93d0:	e2516000 	subs	r6, r1, #0
    93d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    93d8:	e1a04000 	mov	r4, r0
    93dc:	e1a07002 	mov	r7, r2
    93e0:	e1a08003 	mov	r8, r3
    93e4:	e3a05001 	mov	r5, #1
    93e8:	ea00000e 	b	9428 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x5c>
    93ec:	e5d41008 	ldrb	r1, [r4, #8]
    93f0:	eb00024b 	bl	9d24 <CGPIOPin::Write(unsigned int)>
    93f4:	e1a00007 	mov	r0, r7
    93f8:	eb001970 	bl	f9c0 <CTimer::SimpleMsDelay(unsigned int)>
    93fc:	e5940000 	ldr	r0, [r4]
    9400:	e3500000 	cmp	r0, #0
    9404:	0a000010 	beq	944c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x80>
    9408:	e5d41008 	ldrb	r1, [r4, #8]
    940c:	e2211001 	eor	r1, r1, #1
    9410:	eb000243 	bl	9d24 <CGPIOPin::Write(unsigned int)>
    9414:	e1a00008 	mov	r0, r8
    9418:	e2855001 	add	r5, r5, #1
    941c:	eb001967 	bl	f9c0 <CTimer::SimpleMsDelay(unsigned int)>
    9420:	e1560005 	cmp	r6, r5
    9424:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    9428:	e5940000 	ldr	r0, [r4]
    942c:	e3500000 	cmp	r0, #0
    9430:	1affffed 	bne	93ec <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    9434:	e5940004 	ldr	r0, [r4, #4]
    9438:	e3500000 	cmp	r0, #0
    943c:	0affffec 	beq	93f4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    9440:	e5d41008 	ldrb	r1, [r4, #8]
    9444:	eb001c27 	bl	104e8 <CVirtualGPIOPin::Write(unsigned int)>
    9448:	eaffffe9 	b	93f4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    944c:	e5940004 	ldr	r0, [r4, #4]
    9450:	e3500000 	cmp	r0, #0
    9454:	0affffee 	beq	9414 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
    9458:	e5d41008 	ldrb	r1, [r4, #8]
    945c:	e2211001 	eor	r1, r1, #1
    9460:	eb001c20 	bl	104e8 <CVirtualGPIOPin::Write(unsigned int)>
    9464:	eaffffea 	b	9414 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>

00009468 <CActLED::Get()>:
    9468:	e306390c 	movw	r3, #26892	; 0x690c
    946c:	e3403001 	movt	r3, #1
    9470:	e5930000 	ldr	r0, [r3]
    9474:	e12fff1e 	bx	lr

00009478 <assertion_failed>:
    9478:	e92d4080 	push	{r7, lr}
    947c:	e1a04000 	mov	r4, r0
    9480:	e1a05001 	mov	r5, r1
    9484:	e24dd018 	sub	sp, sp, #24
    9488:	e1a06002 	mov	r6, r2
    948c:	e1a0700d 	mov	r7, sp
    9490:	eb0020f1 	bl	1185c <CInterruptSystem::DisableFIQ()>
    9494:	f1080040 	cpsie	f
    9498:	e28d0008 	add	r0, sp, #8
    949c:	eb00104a 	bl	d5cc <CString::CString()>
    94a0:	e1a02005 	mov	r2, r5
    94a4:	e1a03006 	mov	r3, r6
    94a8:	e28d0008 	add	r0, sp, #8
    94ac:	e30413d0 	movw	r1, #17360	; 0x43d0
    94b0:	e3401001 	movt	r1, #1
    94b4:	eb0015d3 	bl	ec08 <CString::Format(char const*, ...)>
    94b8:	e28d0008 	add	r0, sp, #8
    94bc:	eb00107a 	bl	d6ac <CString::operator char const*() const>
    94c0:	e1a01000 	mov	r1, r0
    94c4:	e1a00007 	mov	r0, r7
    94c8:	eb00004f 	bl	960c <debug_stacktrace(unsigned int const*, char const*)>
    94cc:	eb000673 	bl	aea0 <CLogger::Get()>
    94d0:	e1a05000 	mov	r5, r0
    94d4:	e28d0008 	add	r0, sp, #8
    94d8:	eb001073 	bl	d6ac <CString::operator char const*() const>
    94dc:	e30433d8 	movw	r3, #17368	; 0x43d8
    94e0:	e3403001 	movt	r3, #1
    94e4:	e1a01000 	mov	r1, r0
    94e8:	e3a02000 	mov	r2, #0
    94ec:	e1a00005 	mov	r0, r5
    94f0:	e58d4000 	str	r4, [sp]
    94f4:	eb000849 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    94f8:	eafffffe 	b	94f8 <assertion_failed+0x80>

000094fc <debug_hexdump(void const*, unsigned int, char const*)>:
    94fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9500:	e3520000 	cmp	r2, #0
    9504:	e3048484 	movw	r8, #17540	; 0x4484
    9508:	e3408001 	movt	r8, #1
    950c:	e24dd054 	sub	sp, sp, #84	; 0x54
    9510:	11a08002 	movne	r8, r2
    9514:	e1a05001 	mov	r5, r1
    9518:	e1a04000 	mov	r4, r0
    951c:	eb00065f 	bl	aea0 <CLogger::Get()>
    9520:	e3a02004 	mov	r2, #4
    9524:	e1a01008 	mov	r1, r8
    9528:	e58d4004 	str	r4, [sp, #4]
    952c:	e30433f0 	movw	r3, #17392	; 0x43f0
    9530:	e3403001 	movt	r3, #1
    9534:	e58d5000 	str	r5, [sp]
    9538:	eb000838 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    953c:	e3550000 	cmp	r5, #0
    9540:	0a00002f 	beq	9604 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    9544:	e205300f 	and	r3, r5, #15
    9548:	e3049418 	movw	r9, #17432	; 0x4418
    954c:	e3409001 	movt	r9, #1
    9550:	e58d304c 	str	r3, [sp, #76]	; 0x4c
    9554:	ea000001 	b	9560 <debug_hexdump(void const*, unsigned int, char const*)+0x64>
    9558:	e2555010 	subs	r5, r5, #16
    955c:	0a000028 	beq	9604 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
    9560:	eb00064e 	bl	aea0 <CLogger::Get()>
    9564:	e5d4200f 	ldrb	r2, [r4, #15]
    9568:	e5d4300e 	ldrb	r3, [r4, #14]
    956c:	e5d4a00d 	ldrb	sl, [r4, #13]
    9570:	e5d4100c 	ldrb	r1, [r4, #12]
    9574:	e5d4700b 	ldrb	r7, [r4, #11]
    9578:	e5d4600a 	ldrb	r6, [r4, #10]
    957c:	e5d4e009 	ldrb	lr, [r4, #9]
    9580:	e5d4c008 	ldrb	ip, [r4, #8]
    9584:	e58d2040 	str	r2, [sp, #64]	; 0x40
    9588:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    958c:	e5d42007 	ldrb	r2, [r4, #7]
    9590:	e5d43006 	ldrb	r3, [r4, #6]
    9594:	e58da038 	str	sl, [sp, #56]	; 0x38
    9598:	e58d1034 	str	r1, [sp, #52]	; 0x34
    959c:	e5d41004 	ldrb	r1, [r4, #4]
    95a0:	e5d4b005 	ldrb	fp, [r4, #5]
    95a4:	e1cd62fc 	strd	r6, [sp, #44]	; 0x2c
    95a8:	e5d4a003 	ldrb	sl, [r4, #3]
    95ac:	e5d47002 	ldrb	r7, [r4, #2]
    95b0:	e58dc024 	str	ip, [sp, #36]	; 0x24
    95b4:	e6ffc074 	uxth	ip, r4
    95b8:	e58de028 	str	lr, [sp, #40]	; 0x28
    95bc:	e2844010 	add	r4, r4, #16
    95c0:	e554e010 	ldrb	lr, [r4, #-16]
    95c4:	e554600f 	ldrb	r6, [r4, #-15]
    95c8:	e58d2020 	str	r2, [sp, #32]
    95cc:	e3a02004 	mov	r2, #4
    95d0:	e58d301c 	str	r3, [sp, #28]
    95d4:	e1a03009 	mov	r3, r9
    95d8:	e58d1014 	str	r1, [sp, #20]
    95dc:	e1a01008 	mov	r1, r8
    95e0:	e58de004 	str	lr, [sp, #4]
    95e4:	e58db018 	str	fp, [sp, #24]
    95e8:	e58da010 	str	sl, [sp, #16]
    95ec:	e1cd60f8 	strd	r6, [sp, #8]
    95f0:	e58dc000 	str	ip, [sp]
    95f4:	eb000809 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    95f8:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
    95fc:	e1530005 	cmp	r3, r5
    9600:	1affffd4 	bne	9558 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
    9604:	e28dd054 	add	sp, sp, #84	; 0x54
    9608:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000960c <debug_stacktrace(unsigned int const*, char const*)>:
    960c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9610:	e3510000 	cmp	r1, #0
    9614:	e3047484 	movw	r7, #17540	; 0x4484
    9618:	e3407001 	movt	r7, #1
    961c:	e30460a4 	movw	r6, #16548	; 0x40a4
    9620:	e3406001 	movt	r6, #1
    9624:	e3048470 	movw	r8, #17520	; 0x4470
    9628:	e3408001 	movt	r8, #1
    962c:	e24dd008 	sub	sp, sp, #8
    9630:	11a07001 	movne	r7, r1
    9634:	e2405004 	sub	r5, r0, #4
    9638:	e3a04000 	mov	r4, #0
    963c:	ea000002 	b	964c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    9640:	e2844001 	add	r4, r4, #1
    9644:	e3540040 	cmp	r4, #64	; 0x40
    9648:	0a000011 	beq	9694 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    964c:	e5b53004 	ldr	r3, [r5, #4]!
    9650:	e3530902 	cmp	r3, #32768	; 0x8000
    9654:	3afffff9 	bcc	9640 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    9658:	e1530006 	cmp	r3, r6
    965c:	2afffff7 	bcs	9640 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    9660:	e3130003 	tst	r3, #3
    9664:	1afffff5 	bne	9640 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    9668:	eb00060c 	bl	aea0 <CLogger::Get()>
    966c:	e595c000 	ldr	ip, [r5]
    9670:	e1a03008 	mov	r3, r8
    9674:	e58d4000 	str	r4, [sp]
    9678:	e3a02004 	mov	r2, #4
    967c:	e1a01007 	mov	r1, r7
    9680:	e2844001 	add	r4, r4, #1
    9684:	e58dc004 	str	ip, [sp, #4]
    9688:	eb0007e4 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    968c:	e3540040 	cmp	r4, #64	; 0x40
    9690:	1affffed 	bne	964c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    9694:	e28dd008 	add	sp, sp, #8
    9698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000969c <CDeviceNameService::CDeviceNameService()>:
    969c:	e3062910 	movw	r2, #26896	; 0x6910
    96a0:	e3402001 	movt	r2, #1
    96a4:	e3a01000 	mov	r1, #0
    96a8:	e5801000 	str	r1, [r0]
    96ac:	e5801004 	str	r1, [r0, #4]
    96b0:	e592c000 	ldr	ip, [r2]
    96b4:	e15c0001 	cmp	ip, r1
    96b8:	1a000001 	bne	96c4 <CDeviceNameService::CDeviceNameService()+0x28>
    96bc:	e5820000 	str	r0, [r2]
    96c0:	e12fff1e 	bx	lr
    96c4:	e304148c 	movw	r1, #17548	; 0x448c
    96c8:	e3401001 	movt	r1, #1
    96cc:	e3a0201f 	mov	r2, #31
    96d0:	e2810018 	add	r0, r1, #24
    96d4:	e92d4010 	push	{r4, lr}
    96d8:	ebffff66 	bl	9478 <assertion_failed>

000096dc <CDeviceNameService::~CDeviceNameService()>:
    96dc:	e92d4070 	push	{r4, r5, r6, lr}
    96e0:	e1a05000 	mov	r5, r0
    96e4:	e5904000 	ldr	r4, [r0]
    96e8:	e3540000 	cmp	r4, #0
    96ec:	0a00000b 	beq	9720 <CDeviceNameService::~CDeviceNameService()+0x44>
    96f0:	e1a03004 	mov	r3, r4
    96f4:	e5944000 	ldr	r4, [r4]
    96f8:	e5930004 	ldr	r0, [r3, #4]
    96fc:	e3500000 	cmp	r0, #0
    9700:	0a000000 	beq	9708 <CDeviceNameService::~CDeviceNameService()+0x2c>
    9704:	eb001c78 	bl	108ec <operator delete[](void*)>
    9708:	e5950000 	ldr	r0, [r5]
    970c:	e3a01010 	mov	r1, #16
    9710:	eb001c7b 	bl	10904 <operator delete(void*, unsigned int)>
    9714:	e3540000 	cmp	r4, #0
    9718:	e5854000 	str	r4, [r5]
    971c:	1afffff3 	bne	96f0 <CDeviceNameService::~CDeviceNameService()+0x14>
    9720:	e3063910 	movw	r3, #26896	; 0x6910
    9724:	e3403001 	movt	r3, #1
    9728:	e3a02000 	mov	r2, #0
    972c:	e1a00005 	mov	r0, r5
    9730:	e5832000 	str	r2, [r3]
    9734:	e8bd8070 	pop	{r4, r5, r6, pc}

00009738 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    9738:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    973c:	e1a05000 	mov	r5, r0
    9740:	e5900004 	ldr	r0, [r0, #4]
    9744:	e1a06001 	mov	r6, r1
    9748:	e1a07002 	mov	r7, r2
    974c:	e1a08003 	mov	r8, r3
    9750:	e3500000 	cmp	r0, #0
    9754:	1a000016 	bne	97b4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
    9758:	e3a00010 	mov	r0, #16
    975c:	eb001c50 	bl	108a4 <operator new(unsigned int)>
    9760:	e3560000 	cmp	r6, #0
    9764:	e1a04000 	mov	r4, r0
    9768:	0a000013 	beq	97bc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
    976c:	e1a00006 	mov	r0, r6
    9770:	eb00194d 	bl	fcac <strlen>
    9774:	e2800001 	add	r0, r0, #1
    9778:	eb001c4f 	bl	108bc <operator new[](unsigned int)>
    977c:	e1a01006 	mov	r1, r6
    9780:	e5840004 	str	r0, [r4, #4]
    9784:	eb0019e9 	bl	ff30 <strcpy>
    9788:	e3570000 	cmp	r7, #0
    978c:	0a00000f 	beq	97d0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
    9790:	e1c520d0 	ldrd	r2, [r5]
    9794:	e5842000 	str	r2, [r4]
    9798:	e5847008 	str	r7, [r4, #8]
    979c:	e3530000 	cmp	r3, #0
    97a0:	e5c4800c 	strb	r8, [r4, #12]
    97a4:	e5854000 	str	r4, [r5]
    97a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    97ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    97b0:	ea001ed6 	b	11310 <LeaveCritical>
    97b4:	eb001eaa 	bl	11264 <EnterCritical>
    97b8:	eaffffe6 	b	9758 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    97bc:	e304148c 	movw	r1, #17548	; 0x448c
    97c0:	e3401001 	movt	r1, #1
    97c4:	e3a0203b 	mov	r2, #59	; 0x3b
    97c8:	e2810024 	add	r0, r1, #36	; 0x24
    97cc:	ebffff29 	bl	9478 <assertion_failed>
    97d0:	e304148c 	movw	r1, #17548	; 0x448c
    97d4:	e3401001 	movt	r1, #1
    97d8:	e3a02040 	mov	r2, #64	; 0x40
    97dc:	e2810030 	add	r0, r1, #48	; 0x30
    97e0:	ebffff24 	bl	9478 <assertion_failed>

000097e4 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    97e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    97e8:	e2515000 	subs	r5, r1, #0
    97ec:	0a00003a 	beq	98dc <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
    97f0:	e1a08000 	mov	r8, r0
    97f4:	e5900004 	ldr	r0, [r0, #4]
    97f8:	e1a07002 	mov	r7, r2
    97fc:	e3500000 	cmp	r0, #0
    9800:	1a000018 	bne	9868 <CDeviceNameService::RemoveDevice(char const*, bool)+0x84>
    9804:	e5984000 	ldr	r4, [r8]
    9808:	e3540000 	cmp	r4, #0
    980c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9810:	e3a06000 	mov	r6, #0
    9814:	ea00000b 	b	9848 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    9818:	e1a00005 	mov	r0, r5
    981c:	eb00192c 	bl	fcd4 <strcmp>
    9820:	e3500000 	cmp	r0, #0
    9824:	1a000002 	bne	9834 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    9828:	e5d4300c 	ldrb	r3, [r4, #12]
    982c:	e1530007 	cmp	r3, r7
    9830:	0a000015 	beq	988c <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>
    9834:	e5943000 	ldr	r3, [r4]
    9838:	e1a06004 	mov	r6, r4
    983c:	e3530000 	cmp	r3, #0
    9840:	0a00000c 	beq	9878 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
    9844:	e1a04003 	mov	r4, r3
    9848:	e5941004 	ldr	r1, [r4, #4]
    984c:	e3510000 	cmp	r1, #0
    9850:	1afffff0 	bne	9818 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    9854:	e304148c 	movw	r1, #17548	; 0x448c
    9858:	e3401001 	movt	r1, #1
    985c:	e3a0205e 	mov	r2, #94	; 0x5e
    9860:	e2810040 	add	r0, r1, #64	; 0x40
    9864:	ebffff03 	bl	9478 <assertion_failed>
    9868:	eb001e7d 	bl	11264 <EnterCritical>
    986c:	e5984000 	ldr	r4, [r8]
    9870:	e3540000 	cmp	r4, #0
    9874:	1affffe5 	bne	9810 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    9878:	e5983004 	ldr	r3, [r8, #4]
    987c:	e3530000 	cmp	r3, #0
    9880:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9884:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9888:	ea001ea0 	b	11310 <LeaveCritical>
    988c:	e3560000 	cmp	r6, #0
    9890:	15943000 	ldrne	r3, [r4]
    9894:	15863000 	strne	r3, [r6]
    9898:	0a00000c 	beq	98d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
    989c:	e5983004 	ldr	r3, [r8, #4]
    98a0:	e3530000 	cmp	r3, #0
    98a4:	1a000007 	bne	98c8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
    98a8:	e5940004 	ldr	r0, [r4, #4]
    98ac:	e3500000 	cmp	r0, #0
    98b0:	0a000000 	beq	98b8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
    98b4:	eb001c0c 	bl	108ec <operator delete[](void*)>
    98b8:	e1a00004 	mov	r0, r4
    98bc:	e3a01010 	mov	r1, #16
    98c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    98c4:	ea001c0e 	b	10904 <operator delete(void*, unsigned int)>
    98c8:	eb001e90 	bl	11310 <LeaveCritical>
    98cc:	eafffff5 	b	98a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc4>
    98d0:	e5943000 	ldr	r3, [r4]
    98d4:	e5883000 	str	r3, [r8]
    98d8:	eaffffef 	b	989c <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
    98dc:	e304148c 	movw	r1, #17548	; 0x448c
    98e0:	e3401001 	movt	r1, #1
    98e4:	e3a02056 	mov	r2, #86	; 0x56
    98e8:	e2810024 	add	r0, r1, #36	; 0x24
    98ec:	ebfffee1 	bl	9478 <assertion_failed>

000098f0 <CDeviceNameService::GetDevice(char const*, bool)>:
    98f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98f4:	e2515000 	subs	r5, r1, #0
    98f8:	0a000024 	beq	9990 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
    98fc:	e1a07000 	mov	r7, r0
    9900:	e5900004 	ldr	r0, [r0, #4]
    9904:	e1a06002 	mov	r6, r2
    9908:	e3500000 	cmp	r0, #0
    990c:	1a000015 	bne	9968 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
    9910:	e5974000 	ldr	r4, [r7]
    9914:	e3540000 	cmp	r4, #0
    9918:	1a00000a 	bne	9948 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    991c:	ea000018 	b	9984 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
    9920:	e1a00005 	mov	r0, r5
    9924:	eb0018ea 	bl	fcd4 <strcmp>
    9928:	e3500000 	cmp	r0, #0
    992c:	1a000002 	bne	993c <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
    9930:	e5d4300c 	ldrb	r3, [r4, #12]
    9934:	e1530006 	cmp	r3, r6
    9938:	0a000019 	beq	99a4 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
    993c:	e5944000 	ldr	r4, [r4]
    9940:	e3540000 	cmp	r4, #0
    9944:	0a00000b 	beq	9978 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
    9948:	e5941004 	ldr	r1, [r4, #4]
    994c:	e3510000 	cmp	r1, #0
    9950:	1afffff2 	bne	9920 <CDeviceNameService::GetDevice(char const*, bool)+0x30>
    9954:	e304148c 	movw	r1, #17548	; 0x448c
    9958:	e3401001 	movt	r1, #1
    995c:	e3a02092 	mov	r2, #146	; 0x92
    9960:	e2810040 	add	r0, r1, #64	; 0x40
    9964:	ebfffec3 	bl	9478 <assertion_failed>
    9968:	eb001e3d 	bl	11264 <EnterCritical>
    996c:	e5974000 	ldr	r4, [r7]
    9970:	e3540000 	cmp	r4, #0
    9974:	1afffff3 	bne	9948 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    9978:	e5973004 	ldr	r3, [r7, #4]
    997c:	e3530000 	cmp	r3, #0
    9980:	1a000012 	bne	99d0 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
    9984:	e3a04000 	mov	r4, #0
    9988:	e1a00004 	mov	r0, r4
    998c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9990:	e304148c 	movw	r1, #17548	; 0x448c
    9994:	e3401001 	movt	r1, #1
    9998:	e3a0208b 	mov	r2, #139	; 0x8b
    999c:	e2810024 	add	r0, r1, #36	; 0x24
    99a0:	ebfffeb4 	bl	9478 <assertion_failed>
    99a4:	e5973004 	ldr	r3, [r7, #4]
    99a8:	e5944008 	ldr	r4, [r4, #8]
    99ac:	e3530000 	cmp	r3, #0
    99b0:	1a000009 	bne	99dc <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    99b4:	e3540000 	cmp	r4, #0
    99b8:	1afffff2 	bne	9988 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    99bc:	e304148c 	movw	r1, #17548	; 0x448c
    99c0:	e3401001 	movt	r1, #1
    99c4:	e3a0209a 	mov	r2, #154	; 0x9a
    99c8:	e2810054 	add	r0, r1, #84	; 0x54
    99cc:	ebfffea9 	bl	9478 <assertion_failed>
    99d0:	e3a04000 	mov	r4, #0
    99d4:	eb001e4d 	bl	11310 <LeaveCritical>
    99d8:	eaffffea 	b	9988 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    99dc:	eb001e4b 	bl	11310 <LeaveCritical>
    99e0:	eafffff3 	b	99b4 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>

000099e4 <CDeviceNameService::Get()>:
    99e4:	e3063910 	movw	r3, #26896	; 0x6910
    99e8:	e3403001 	movt	r3, #1
    99ec:	e5930000 	ldr	r0, [r3]
    99f0:	e3500000 	cmp	r0, #0
    99f4:	112fff1e 	bxne	lr
    99f8:	e304148c 	movw	r1, #17548	; 0x448c
    99fc:	e3401001 	movt	r1, #1
    9a00:	e3a020cc 	mov	r2, #204	; 0xcc
    9a04:	e2810064 	add	r0, r1, #100	; 0x64
    9a08:	e92d4010 	push	{r4, lr}
    9a0c:	ebfffe99 	bl	9478 <assertion_failed>

00009a10 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    9a10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a14:	e1a06001 	mov	r6, r1
    9a18:	e1a07002 	mov	r7, r2
    9a1c:	e24dd010 	sub	sp, sp, #16
    9a20:	e1a04000 	mov	r4, r0
    9a24:	e1a0000d 	mov	r0, sp
    9a28:	e1a05003 	mov	r5, r3
    9a2c:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
    9a30:	eb000ee5 	bl	d5cc <CString::CString()>
    9a34:	e1a03007 	mov	r3, r7
    9a38:	e1a02006 	mov	r2, r6
    9a3c:	e59f1030 	ldr	r1, [pc, #48]	; 9a74 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
    9a40:	e1a0000d 	mov	r0, sp
    9a44:	eb00146f 	bl	ec08 <CString::Format(char const*, ...)>
    9a48:	e1a0000d 	mov	r0, sp
    9a4c:	eb000f16 	bl	d6ac <CString::operator char const*() const>
    9a50:	e1a03008 	mov	r3, r8
    9a54:	e1a01000 	mov	r1, r0
    9a58:	e1a02005 	mov	r2, r5
    9a5c:	e1a00004 	mov	r0, r4
    9a60:	ebffff34 	bl	9738 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    9a64:	e1a0000d 	mov	r0, sp
    9a68:	eb000ea4 	bl	d500 <CString::~CString()>
    9a6c:	e28dd010 	add	sp, sp, #16
    9a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9a74:	000144fc 	.word	0x000144fc

00009a78 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    9a78:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9a7c:	e1a06001 	mov	r6, r1
    9a80:	e1a07002 	mov	r7, r2
    9a84:	e24dd014 	sub	sp, sp, #20
    9a88:	e1a04000 	mov	r4, r0
    9a8c:	e1a0000d 	mov	r0, sp
    9a90:	e1a05003 	mov	r5, r3
    9a94:	eb000ecc 	bl	d5cc <CString::CString()>
    9a98:	e1a03007 	mov	r3, r7
    9a9c:	e1a02006 	mov	r2, r6
    9aa0:	e59f102c 	ldr	r1, [pc, #44]	; 9ad4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
    9aa4:	e1a0000d 	mov	r0, sp
    9aa8:	eb001456 	bl	ec08 <CString::Format(char const*, ...)>
    9aac:	e1a0000d 	mov	r0, sp
    9ab0:	eb000efd 	bl	d6ac <CString::operator char const*() const>
    9ab4:	e1a02005 	mov	r2, r5
    9ab8:	e1a01000 	mov	r1, r0
    9abc:	e1a00004 	mov	r0, r4
    9ac0:	ebffff47 	bl	97e4 <CDeviceNameService::RemoveDevice(char const*, bool)>
    9ac4:	e1a0000d 	mov	r0, sp
    9ac8:	eb000e8c 	bl	d500 <CString::~CString()>
    9acc:	e28dd014 	add	sp, sp, #20
    9ad0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9ad4:	000144fc 	.word	0x000144fc

00009ad8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    9ad8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9adc:	e1a06001 	mov	r6, r1
    9ae0:	e1a07002 	mov	r7, r2
    9ae4:	e24dd014 	sub	sp, sp, #20
    9ae8:	e1a04000 	mov	r4, r0
    9aec:	e1a0000d 	mov	r0, sp
    9af0:	e1a05003 	mov	r5, r3
    9af4:	eb000eb4 	bl	d5cc <CString::CString()>
    9af8:	e1a03007 	mov	r3, r7
    9afc:	e1a02006 	mov	r2, r6
    9b00:	e59f1034 	ldr	r1, [pc, #52]	; 9b3c <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
    9b04:	e1a0000d 	mov	r0, sp
    9b08:	eb00143e 	bl	ec08 <CString::Format(char const*, ...)>
    9b0c:	e1a0000d 	mov	r0, sp
    9b10:	eb000ee5 	bl	d6ac <CString::operator char const*() const>
    9b14:	e1a02005 	mov	r2, r5
    9b18:	e1a01000 	mov	r1, r0
    9b1c:	e1a00004 	mov	r0, r4
    9b20:	ebffff72 	bl	98f0 <CDeviceNameService::GetDevice(char const*, bool)>
    9b24:	e1a04000 	mov	r4, r0
    9b28:	e1a0000d 	mov	r0, sp
    9b2c:	eb000e73 	bl	d500 <CString::~CString()>
    9b30:	e1a00004 	mov	r0, r4
    9b34:	e28dd014 	add	sp, sp, #20
    9b38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9b3c:	000144fc 	.word	0x000144fc

00009b40 <CDeviceNameService::ListDevices(CDevice*)>:
    9b40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9b44:	e2517000 	subs	r7, r1, #0
    9b48:	e24dd018 	sub	sp, sp, #24
    9b4c:	0a000037 	beq	9c30 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    9b50:	e5904000 	ldr	r4, [r0]
    9b54:	e3540000 	cmp	r4, #0
    9b58:	0a000032 	beq	9c28 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
    9b5c:	e59f90e0 	ldr	r9, [pc, #224]	; 9c44 <CDeviceNameService::ListDevices(CDevice*)+0x104>
    9b60:	e3a05000 	mov	r5, #0
    9b64:	ea00001b 	b	9bd8 <CDeviceNameService::ListDevices(CDevice*)+0x98>
    9b68:	e5d4200c 	ldrb	r2, [r4, #12]
    9b6c:	e2855001 	add	r5, r5, #1
    9b70:	e1a01009 	mov	r1, r9
    9b74:	e28d0008 	add	r0, sp, #8
    9b78:	e3520000 	cmp	r2, #0
    9b7c:	13a02062 	movne	r2, #98	; 0x62
    9b80:	03a02063 	moveq	r2, #99	; 0x63
    9b84:	e215a003 	ands	sl, r5, #3
    9b88:	03a0c00a 	moveq	ip, #10
    9b8c:	13a0c020 	movne	ip, #32
    9b90:	e58dc000 	str	ip, [sp]
    9b94:	eb00141b 	bl	ec08 <CString::Format(char const*, ...)>
    9b98:	e5973000 	ldr	r3, [r7]
    9b9c:	e28d0008 	add	r0, sp, #8
    9ba0:	e593800c 	ldr	r8, [r3, #12]
    9ba4:	eb000ec0 	bl	d6ac <CString::operator char const*() const>
    9ba8:	e1a06000 	mov	r6, r0
    9bac:	e28d0008 	add	r0, sp, #8
    9bb0:	eb000efb 	bl	d7a4 <CString::GetLength() const>
    9bb4:	e1a01006 	mov	r1, r6
    9bb8:	e1a02000 	mov	r2, r0
    9bbc:	e1a00007 	mov	r0, r7
    9bc0:	e12fff38 	blx	r8
    9bc4:	e5944000 	ldr	r4, [r4]
    9bc8:	e28d0008 	add	r0, sp, #8
    9bcc:	eb000e4b 	bl	d500 <CString::~CString()>
    9bd0:	e3540000 	cmp	r4, #0
    9bd4:	0a000009 	beq	9c00 <CDeviceNameService::ListDevices(CDevice*)+0xc0>
    9bd8:	e28d0008 	add	r0, sp, #8
    9bdc:	eb000e7a 	bl	d5cc <CString::CString()>
    9be0:	e5943004 	ldr	r3, [r4, #4]
    9be4:	e3530000 	cmp	r3, #0
    9be8:	1affffde 	bne	9b68 <CDeviceNameService::ListDevices(CDevice*)+0x28>
    9bec:	e304148c 	movw	r1, #17548	; 0x448c
    9bf0:	e3401001 	movt	r1, #1
    9bf4:	e3a020b9 	mov	r2, #185	; 0xb9
    9bf8:	e2810040 	add	r0, r1, #64	; 0x40
    9bfc:	ebfffe1d 	bl	9478 <assertion_failed>
    9c00:	e35a0000 	cmp	sl, #0
    9c04:	0a000007 	beq	9c28 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
    9c08:	e5973000 	ldr	r3, [r7]
    9c0c:	e3a02001 	mov	r2, #1
    9c10:	e59f1030 	ldr	r1, [pc, #48]	; 9c48 <CDeviceNameService::ListDevices(CDevice*)+0x108>
    9c14:	e1a00007 	mov	r0, r7
    9c18:	e593300c 	ldr	r3, [r3, #12]
    9c1c:	e28dd018 	add	sp, sp, #24
    9c20:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9c24:	e12fff13 	bx	r3
    9c28:	e28dd018 	add	sp, sp, #24
    9c2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c30:	e304148c 	movw	r1, #17548	; 0x448c
    9c34:	e3401001 	movt	r1, #1
    9c38:	e3a020b0 	mov	r2, #176	; 0xb0
    9c3c:	e2810078 	add	r0, r1, #120	; 0x78
    9c40:	ebfffe0c 	bl	9478 <assertion_failed>
    9c44:	00014514 	.word	0x00014514
    9c48:	00014520 	.word	0x00014520

00009c4c <CGPIOPin::~CGPIOPin()>:
    9c4c:	e12fff1e 	bx	lr

00009c50 <CGPIOPin::~CGPIOPin()>:
    9c50:	e92d4010 	push	{r4, lr}
    9c54:	e3a01028 	mov	r1, #40	; 0x28
    9c58:	e1a04000 	mov	r4, r0
    9c5c:	eb001b28 	bl	10904 <operator delete(void*, unsigned int)>
    9c60:	e1a00004 	mov	r0, r4
    9c64:	e8bd8010 	pop	{r4, pc}

00009c68 <CGPIOPin::CGPIOPin()>:
    9c68:	e59fc02c 	ldr	ip, [pc, #44]	; 9c9c <CGPIOPin::CGPIOPin()+0x34>
    9c6c:	e3a01000 	mov	r1, #0
    9c70:	e3a02006 	mov	r2, #6
    9c74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9c78:	e3a0e036 	mov	lr, #54	; 0x36
    9c7c:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    9c80:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    9c84:	e3a0200a 	mov	r2, #10
    9c88:	e8805000 	stm	r0, {ip, lr}
    9c8c:	e5801018 	str	r1, [r0, #24]
    9c90:	e580101c 	str	r1, [r0, #28]
    9c94:	e5c02010 	strb	r2, [r0, #16]
    9c98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9c9c:	0001452c 	.word	0x0001452c

00009ca0 <CGPIOPin::AssignPin(unsigned int)>:
    9ca0:	e5903004 	ldr	r3, [r0, #4]
    9ca4:	e92d4070 	push	{r4, r5, r6, lr}
    9ca8:	e3530036 	cmp	r3, #54	; 0x36
    9cac:	1a000017 	bne	9d10 <CGPIOPin::AssignPin(unsigned int)+0x70>
    9cb0:	e1a05000 	mov	r5, r0
    9cb4:	e1a04001 	mov	r4, r1
    9cb8:	e3510035 	cmp	r1, #53	; 0x35
    9cbc:	e5801004 	str	r1, [r0, #4]
    9cc0:	8a000007 	bhi	9ce4 <CGPIOPin::AssignPin(unsigned int)+0x44>
    9cc4:	e1a032a4 	lsr	r3, r4, #5
    9cc8:	e3a01001 	mov	r1, #1
    9ccc:	e204401f 	and	r4, r4, #31
    9cd0:	e1a03103 	lsl	r3, r3, #2
    9cd4:	e5853008 	str	r3, [r5, #8]
    9cd8:	e1a04411 	lsl	r4, r1, r4
    9cdc:	e585400c 	str	r4, [r5, #12]
    9ce0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ce4:	eb000873 	bl	beb8 <CMachineInfo::Get()>
    9ce8:	e6ef1074 	uxtb	r1, r4
    9cec:	eb0007dc 	bl	bc64 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9cf0:	e1a04000 	mov	r4, r0
    9cf4:	e3500035 	cmp	r0, #53	; 0x35
    9cf8:	e5850004 	str	r0, [r5, #4]
    9cfc:	9afffff0 	bls	9cc4 <CGPIOPin::AssignPin(unsigned int)+0x24>
    9d00:	e59f1018 	ldr	r1, [pc, #24]	; 9d20 <CGPIOPin::AssignPin(unsigned int)+0x80>
    9d04:	e3a02047 	mov	r2, #71	; 0x47
    9d08:	e2810020 	add	r0, r1, #32
    9d0c:	ebfffdd9 	bl	9478 <assertion_failed>
    9d10:	e59f1008 	ldr	r1, [pc, #8]	; 9d20 <CGPIOPin::AssignPin(unsigned int)+0x80>
    9d14:	e3a02040 	mov	r2, #64	; 0x40
    9d18:	e281000c 	add	r0, r1, #12
    9d1c:	ebfffdd5 	bl	9478 <assertion_failed>
    9d20:	00014534 	.word	0x00014534

00009d24 <CGPIOPin::Write(unsigned int)>:
    9d24:	e5903004 	ldr	r3, [r0, #4]
    9d28:	e92d4010 	push	{r4, lr}
    9d2c:	e3530035 	cmp	r3, #53	; 0x35
    9d30:	8a00000f 	bhi	9d74 <CGPIOPin::Write(unsigned int)+0x50>
    9d34:	e5d03010 	ldrb	r3, [r0, #16]
    9d38:	e3530003 	cmp	r3, #3
    9d3c:	8a000010 	bhi	9d84 <CGPIOPin::Write(unsigned int)+0x60>
    9d40:	e3510001 	cmp	r1, #1
    9d44:	8a000012 	bhi	9d94 <CGPIOPin::Write(unsigned int)+0x70>
    9d48:	e3a02028 	mov	r2, #40	; 0x28
    9d4c:	e3432f20 	movt	r2, #16160	; 0x3f20
    9d50:	e3510000 	cmp	r1, #0
    9d54:	e590c008 	ldr	ip, [r0, #8]
    9d58:	e3a0301c 	mov	r3, #28
    9d5c:	e3433f20 	movt	r3, #16160	; 0x3f20
    9d60:	01a03002 	moveq	r3, r2
    9d64:	e590200c 	ldr	r2, [r0, #12]
    9d68:	e5801014 	str	r1, [r0, #20]
    9d6c:	e783200c 	str	r2, [r3, ip]
    9d70:	e8bd8010 	pop	{r4, pc}
    9d74:	e59f1028 	ldr	r1, [pc, #40]	; 9da4 <CGPIOPin::Write(unsigned int)+0x80>
    9d78:	e3a02091 	mov	r2, #145	; 0x91
    9d7c:	e2810020 	add	r0, r1, #32
    9d80:	ebfffdbc 	bl	9478 <assertion_failed>
    9d84:	e59f1018 	ldr	r1, [pc, #24]	; 9da4 <CGPIOPin::Write(unsigned int)+0x80>
    9d88:	e3a02094 	mov	r2, #148	; 0x94
    9d8c:	e2810034 	add	r0, r1, #52	; 0x34
    9d90:	ebfffdb8 	bl	9478 <assertion_failed>
    9d94:	e59f1008 	ldr	r1, [pc, #8]	; 9da4 <CGPIOPin::Write(unsigned int)+0x80>
    9d98:	e3a02098 	mov	r2, #152	; 0x98
    9d9c:	e2810058 	add	r0, r1, #88	; 0x58
    9da0:	ebfffdb4 	bl	9478 <assertion_failed>
    9da4:	00014534 	.word	0x00014534

00009da8 <CGPIOPin::Read() const>:
    9da8:	e5903004 	ldr	r3, [r0, #4]
    9dac:	e92d4010 	push	{r4, lr}
    9db0:	e3530035 	cmp	r3, #53	; 0x35
    9db4:	8a00000d 	bhi	9df0 <CGPIOPin::Read() const+0x48>
    9db8:	e5d03010 	ldrb	r3, [r0, #16]
    9dbc:	e2432002 	sub	r2, r3, #2
    9dc0:	e3530000 	cmp	r3, #0
    9dc4:	13520001 	cmpne	r2, #1
    9dc8:	8a00000c 	bhi	9e00 <CGPIOPin::Read() const+0x58>
    9dcc:	e5901008 	ldr	r1, [r0, #8]
    9dd0:	e3a03034 	mov	r3, #52	; 0x34
    9dd4:	e3433f20 	movt	r3, #16160	; 0x3f20
    9dd8:	e590200c 	ldr	r2, [r0, #12]
    9ddc:	e7913003 	ldr	r3, [r1, r3]
    9de0:	e1130002 	tst	r3, r2
    9de4:	13a00001 	movne	r0, #1
    9de8:	03a00000 	moveq	r0, #0
    9dec:	e8bd8010 	pop	{r4, pc}
    9df0:	e59f1018 	ldr	r1, [pc, #24]	; 9e10 <CGPIOPin::Read() const+0x68>
    9df4:	e3a020a4 	mov	r2, #164	; 0xa4
    9df8:	e2810020 	add	r0, r1, #32
    9dfc:	ebfffd9d 	bl	9478 <assertion_failed>
    9e00:	e59f1008 	ldr	r1, [pc, #8]	; 9e10 <CGPIOPin::Read() const+0x68>
    9e04:	e3a020a6 	mov	r2, #166	; 0xa6
    9e08:	e2810078 	add	r0, r1, #120	; 0x78
    9e0c:	ebfffd99 	bl	9478 <assertion_failed>
    9e10:	00014534 	.word	0x00014534

00009e14 <CGPIOPin::Invert()>:
    9e14:	e5d03010 	ldrb	r3, [r0, #16]
    9e18:	e92d4010 	push	{r4, lr}
    9e1c:	e3530001 	cmp	r3, #1
    9e20:	1a000011 	bne	9e6c <CGPIOPin::Invert()+0x58>
    9e24:	e5902014 	ldr	r2, [r0, #20]
    9e28:	e5903004 	ldr	r3, [r0, #4]
    9e2c:	e2221001 	eor	r1, r2, #1
    9e30:	e3530035 	cmp	r3, #53	; 0x35
    9e34:	8a000010 	bhi	9e7c <CGPIOPin::Invert()+0x68>
    9e38:	e3510001 	cmp	r1, #1
    9e3c:	8a000012 	bhi	9e8c <CGPIOPin::Invert()+0x78>
    9e40:	e3520001 	cmp	r2, #1
    9e44:	e3a0c028 	mov	ip, #40	; 0x28
    9e48:	e343cf20 	movt	ip, #16160	; 0x3f20
    9e4c:	e5902008 	ldr	r2, [r0, #8]
    9e50:	e3a0301c 	mov	r3, #28
    9e54:	e3433f20 	movt	r3, #16160	; 0x3f20
    9e58:	01a0300c 	moveq	r3, ip
    9e5c:	e590c00c 	ldr	ip, [r0, #12]
    9e60:	e5801014 	str	r1, [r0, #20]
    9e64:	e783c002 	str	ip, [r3, r2]
    9e68:	e8bd8010 	pop	{r4, pc}
    9e6c:	e59f1028 	ldr	r1, [pc, #40]	; 9e9c <CGPIOPin::Invert()+0x88>
    9e70:	e3a020b5 	mov	r2, #181	; 0xb5
    9e74:	e28100d4 	add	r0, r1, #212	; 0xd4
    9e78:	ebfffd7e 	bl	9478 <assertion_failed>
    9e7c:	e59f1018 	ldr	r1, [pc, #24]	; 9e9c <CGPIOPin::Invert()+0x88>
    9e80:	e3a02091 	mov	r2, #145	; 0x91
    9e84:	e2810020 	add	r0, r1, #32
    9e88:	ebfffd7a 	bl	9478 <assertion_failed>
    9e8c:	e59f1008 	ldr	r1, [pc, #8]	; 9e9c <CGPIOPin::Invert()+0x88>
    9e90:	e3a02098 	mov	r2, #152	; 0x98
    9e94:	e2810058 	add	r0, r1, #88	; 0x58
    9e98:	ebfffd76 	bl	9478 <assertion_failed>
    9e9c:	00014534 	.word	0x00014534

00009ea0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    9ea0:	e1a0c000 	mov	ip, r0
    9ea4:	e5d00010 	ldrb	r0, [r0, #16]
    9ea8:	e92d4010 	push	{r4, lr}
    9eac:	e240e002 	sub	lr, r0, #2
    9eb0:	e3500000 	cmp	r0, #0
    9eb4:	135e0001 	cmpne	lr, #1
    9eb8:	8a000027 	bhi	9f5c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    9ebc:	e5dc0025 	ldrb	r0, [ip, #37]	; 0x25
    9ec0:	e3500006 	cmp	r0, #6
    9ec4:	1a000010 	bne	9f0c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    9ec8:	e5dc0026 	ldrb	r0, [ip, #38]	; 0x26
    9ecc:	e3500006 	cmp	r0, #6
    9ed0:	1a000011 	bne	9f1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    9ed4:	e3510000 	cmp	r1, #0
    9ed8:	0a000013 	beq	9f2c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    9edc:	e59c001c 	ldr	r0, [ip, #28]
    9ee0:	e3500000 	cmp	r0, #0
    9ee4:	1a000014 	bne	9f3c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    9ee8:	e59c0018 	ldr	r0, [ip, #24]
    9eec:	e58c101c 	str	r1, [ip, #28]
    9ef0:	e3500000 	cmp	r0, #0
    9ef4:	e58c2020 	str	r2, [ip, #32]
    9ef8:	e5cc3024 	strb	r3, [ip, #36]	; 0x24
    9efc:	0a000012 	beq	9f4c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    9f00:	e8bd4010 	pop	{r4, lr}
    9f04:	e1a0100c 	mov	r1, ip
    9f08:	ea0023c7 	b	12e2c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    9f0c:	e59f1058 	ldr	r1, [pc, #88]	; 9f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9f10:	e3a020c0 	mov	r2, #192	; 0xc0
    9f14:	e28100f0 	add	r0, r1, #240	; 0xf0
    9f18:	ebfffd56 	bl	9478 <assertion_failed>
    9f1c:	e59f1048 	ldr	r1, [pc, #72]	; 9f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9f20:	e3a020c1 	mov	r2, #193	; 0xc1
    9f24:	e2810f45 	add	r0, r1, #276	; 0x114
    9f28:	ebfffd52 	bl	9478 <assertion_failed>
    9f2c:	e59f1038 	ldr	r1, [pc, #56]	; 9f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9f30:	e3a020c3 	mov	r2, #195	; 0xc3
    9f34:	e2810f4f 	add	r0, r1, #316	; 0x13c
    9f38:	ebfffd4e 	bl	9478 <assertion_failed>
    9f3c:	e59f1028 	ldr	r1, [pc, #40]	; 9f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9f40:	e3a020c4 	mov	r2, #196	; 0xc4
    9f44:	e2810f53 	add	r0, r1, #332	; 0x14c
    9f48:	ebfffd4a 	bl	9478 <assertion_failed>
    9f4c:	e59f1018 	ldr	r1, [pc, #24]	; 9f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9f50:	e3a020cb 	mov	r2, #203	; 0xcb
    9f54:	e2810f57 	add	r0, r1, #348	; 0x15c
    9f58:	ebfffd46 	bl	9478 <assertion_failed>
    9f5c:	e59f1008 	ldr	r1, [pc, #8]	; 9f6c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    9f60:	e3a020bc 	mov	r2, #188	; 0xbc
    9f64:	e2810078 	add	r0, r1, #120	; 0x78
    9f68:	ebfffd42 	bl	9478 <assertion_failed>
    9f6c:	00014534 	.word	0x00014534

00009f70 <CGPIOPin::DisconnectInterrupt()>:
    9f70:	e5d03010 	ldrb	r3, [r0, #16]
    9f74:	e92d4010 	push	{r4, lr}
    9f78:	e2432002 	sub	r2, r3, #2
    9f7c:	e3530000 	cmp	r3, #0
    9f80:	13520001 	cmpne	r2, #1
    9f84:	8a000020 	bhi	a00c <CGPIOPin::DisconnectInterrupt()+0x9c>
    9f88:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9f8c:	e1a01000 	mov	r1, r0
    9f90:	e3530006 	cmp	r3, #6
    9f94:	1a00000c 	bne	9fcc <CGPIOPin::DisconnectInterrupt()+0x5c>
    9f98:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9f9c:	e3530006 	cmp	r3, #6
    9fa0:	1a00000d 	bne	9fdc <CGPIOPin::DisconnectInterrupt()+0x6c>
    9fa4:	e590301c 	ldr	r3, [r0, #28]
    9fa8:	e3530000 	cmp	r3, #0
    9fac:	0a00000e 	beq	9fec <CGPIOPin::DisconnectInterrupt()+0x7c>
    9fb0:	e5900018 	ldr	r0, [r0, #24]
    9fb4:	e3a03000 	mov	r3, #0
    9fb8:	e581301c 	str	r3, [r1, #28]
    9fbc:	e1500003 	cmp	r0, r3
    9fc0:	0a00000d 	beq	9ffc <CGPIOPin::DisconnectInterrupt()+0x8c>
    9fc4:	e8bd4010 	pop	{r4, lr}
    9fc8:	ea0023be 	b	12ec8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    9fcc:	e59f1048 	ldr	r1, [pc, #72]	; a01c <CGPIOPin::DisconnectInterrupt()+0xac>
    9fd0:	e3a020d5 	mov	r2, #213	; 0xd5
    9fd4:	e28100f0 	add	r0, r1, #240	; 0xf0
    9fd8:	ebfffd26 	bl	9478 <assertion_failed>
    9fdc:	e59f1038 	ldr	r1, [pc, #56]	; a01c <CGPIOPin::DisconnectInterrupt()+0xac>
    9fe0:	e3a020d6 	mov	r2, #214	; 0xd6
    9fe4:	e2810f45 	add	r0, r1, #276	; 0x114
    9fe8:	ebfffd22 	bl	9478 <assertion_failed>
    9fec:	e59f1028 	ldr	r1, [pc, #40]	; a01c <CGPIOPin::DisconnectInterrupt()+0xac>
    9ff0:	e3a020d8 	mov	r2, #216	; 0xd8
    9ff4:	e2810f5b 	add	r0, r1, #364	; 0x16c
    9ff8:	ebfffd1e 	bl	9478 <assertion_failed>
    9ffc:	e59f1018 	ldr	r1, [pc, #24]	; a01c <CGPIOPin::DisconnectInterrupt()+0xac>
    a000:	e3a020db 	mov	r2, #219	; 0xdb
    a004:	e2810f57 	add	r0, r1, #348	; 0x15c
    a008:	ebfffd1a 	bl	9478 <assertion_failed>
    a00c:	e59f1008 	ldr	r1, [pc, #8]	; a01c <CGPIOPin::DisconnectInterrupt()+0xac>
    a010:	e3a020d1 	mov	r2, #209	; 0xd1
    a014:	e2810078 	add	r0, r1, #120	; 0x78
    a018:	ebfffd16 	bl	9478 <assertion_failed>
    a01c:	00014534 	.word	0x00014534

0000a020 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    a020:	e5d03010 	ldrb	r3, [r0, #16]
    a024:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a028:	e2432002 	sub	r2, r3, #2
    a02c:	e3530000 	cmp	r3, #0
    a030:	13520001 	cmpne	r2, #1
    a034:	8a000032 	bhi	a104 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
    a038:	e590301c 	ldr	r3, [r0, #28]
    a03c:	e1a04000 	mov	r4, r0
    a040:	e3530000 	cmp	r3, #0
    a044:	0a00001e 	beq	a0c4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
    a048:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a04c:	e3530006 	cmp	r3, #6
    a050:	1a00001f 	bne	a0d4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
    a054:	e3510005 	cmp	r1, #5
    a058:	8a000021 	bhi	a0e4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    a05c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a060:	e1530001 	cmp	r3, r1
    a064:	0a000022 	beq	a0f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
    a068:	e3067914 	movw	r7, #26900	; 0x6914
    a06c:	e3407001 	movt	r7, #1
    a070:	e3a0500c 	mov	r5, #12
    a074:	e5903008 	ldr	r3, [r0, #8]
    a078:	e5c01025 	strb	r1, [r0, #37]	; 0x25
    a07c:	e3a0604c 	mov	r6, #76	; 0x4c
    a080:	e3436f20 	movt	r6, #16160	; 0x3f20
    a084:	e5970000 	ldr	r0, [r7]
    a088:	e0050195 	mul	r5, r5, r1
    a08c:	e0836006 	add	r6, r3, r6
    a090:	e3500000 	cmp	r0, #0
    a094:	1a000008 	bne	a0bc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    a098:	e7963005 	ldr	r3, [r6, r5]
    a09c:	e594200c 	ldr	r2, [r4, #12]
    a0a0:	e1833002 	orr	r3, r3, r2
    a0a4:	e7863005 	str	r3, [r6, r5]
    a0a8:	e5973000 	ldr	r3, [r7]
    a0ac:	e3530000 	cmp	r3, #0
    a0b0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a0b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a0b8:	ea001c94 	b	11310 <LeaveCritical>
    a0bc:	eb001c68 	bl	11264 <EnterCritical>
    a0c0:	eafffff4 	b	a098 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    a0c4:	e59f1048 	ldr	r1, [pc, #72]	; a114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    a0c8:	e3a020e4 	mov	r2, #228	; 0xe4
    a0cc:	e2810f5b 	add	r0, r1, #364	; 0x16c
    a0d0:	ebfffce8 	bl	9478 <assertion_failed>
    a0d4:	e59f1038 	ldr	r1, [pc, #56]	; a114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    a0d8:	e3a020e6 	mov	r2, #230	; 0xe6
    a0dc:	e28100f0 	add	r0, r1, #240	; 0xf0
    a0e0:	ebfffce4 	bl	9478 <assertion_failed>
    a0e4:	e59f1028 	ldr	r1, [pc, #40]	; a114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    a0e8:	e3a020e7 	mov	r2, #231	; 0xe7
    a0ec:	e2810f5f 	add	r0, r1, #380	; 0x17c
    a0f0:	ebfffce0 	bl	9478 <assertion_failed>
    a0f4:	e59f1018 	ldr	r1, [pc, #24]	; a114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    a0f8:	e3a020e8 	mov	r2, #232	; 0xe8
    a0fc:	e2810e1a 	add	r0, r1, #416	; 0x1a0
    a100:	ebfffcdc 	bl	9478 <assertion_failed>
    a104:	e59f1008 	ldr	r1, [pc, #8]	; a114 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    a108:	e3a020e1 	mov	r2, #225	; 0xe1
    a10c:	e2810078 	add	r0, r1, #120	; 0x78
    a110:	ebfffcd8 	bl	9478 <assertion_failed>
    a114:	00014534 	.word	0x00014534

0000a118 <CGPIOPin::DisableInterrupt()>:
    a118:	e5d03010 	ldrb	r3, [r0, #16]
    a11c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a120:	e2432002 	sub	r2, r3, #2
    a124:	e3530000 	cmp	r3, #0
    a128:	13520001 	cmpne	r2, #1
    a12c:	8a000020 	bhi	a1b4 <CGPIOPin::DisableInterrupt()+0x9c>
    a130:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a134:	e1a04000 	mov	r4, r0
    a138:	e3530005 	cmp	r3, #5
    a13c:	8a000018 	bhi	a1a4 <CGPIOPin::DisableInterrupt()+0x8c>
    a140:	e3067914 	movw	r7, #26900	; 0x6914
    a144:	e3407001 	movt	r7, #1
    a148:	e3a0500c 	mov	r5, #12
    a14c:	e5902008 	ldr	r2, [r0, #8]
    a150:	e3a0604c 	mov	r6, #76	; 0x4c
    a154:	e3436f20 	movt	r6, #16160	; 0x3f20
    a158:	e5970000 	ldr	r0, [r7]
    a15c:	e0826006 	add	r6, r2, r6
    a160:	e0050395 	mul	r5, r5, r3
    a164:	e3500000 	cmp	r0, #0
    a168:	1a000009 	bne	a194 <CGPIOPin::DisableInterrupt()+0x7c>
    a16c:	e7963005 	ldr	r3, [r6, r5]
    a170:	e594200c 	ldr	r2, [r4, #12]
    a174:	e1c33002 	bic	r3, r3, r2
    a178:	e7863005 	str	r3, [r6, r5]
    a17c:	e5973000 	ldr	r3, [r7]
    a180:	e3530000 	cmp	r3, #0
    a184:	1a000004 	bne	a19c <CGPIOPin::DisableInterrupt()+0x84>
    a188:	e3a03006 	mov	r3, #6
    a18c:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    a190:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a194:	eb001c32 	bl	11264 <EnterCritical>
    a198:	eafffff3 	b	a16c <CGPIOPin::DisableInterrupt()+0x54>
    a19c:	eb001c5b 	bl	11310 <LeaveCritical>
    a1a0:	eafffff8 	b	a188 <CGPIOPin::DisableInterrupt()+0x70>
    a1a4:	e59f1018 	ldr	r1, [pc, #24]	; a1c4 <CGPIOPin::DisableInterrupt()+0xac>
    a1a8:	e3a020fb 	mov	r2, #251	; 0xfb
    a1ac:	e2810f6f 	add	r0, r1, #444	; 0x1bc
    a1b0:	ebfffcb0 	bl	9478 <assertion_failed>
    a1b4:	e59f1008 	ldr	r1, [pc, #8]	; a1c4 <CGPIOPin::DisableInterrupt()+0xac>
    a1b8:	e3a020f7 	mov	r2, #247	; 0xf7
    a1bc:	e2810078 	add	r0, r1, #120	; 0x78
    a1c0:	ebfffcac 	bl	9478 <assertion_failed>
    a1c4:	00014534 	.word	0x00014534

0000a1c8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    a1c8:	e5d03010 	ldrb	r3, [r0, #16]
    a1cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a1d0:	e2432002 	sub	r2, r3, #2
    a1d4:	e3530000 	cmp	r3, #0
    a1d8:	13520001 	cmpne	r2, #1
    a1dc:	8a000032 	bhi	a2ac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
    a1e0:	e590301c 	ldr	r3, [r0, #28]
    a1e4:	e1a04000 	mov	r4, r0
    a1e8:	e3530000 	cmp	r3, #0
    a1ec:	0a00001e 	beq	a26c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
    a1f0:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a1f4:	e3530006 	cmp	r3, #6
    a1f8:	1a00001f 	bne	a27c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
    a1fc:	e3510005 	cmp	r1, #5
    a200:	8a000021 	bhi	a28c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    a204:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a208:	e1530001 	cmp	r3, r1
    a20c:	0a000022 	beq	a29c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
    a210:	e3067914 	movw	r7, #26900	; 0x6914
    a214:	e3407001 	movt	r7, #1
    a218:	e3a0500c 	mov	r5, #12
    a21c:	e5903008 	ldr	r3, [r0, #8]
    a220:	e5c01026 	strb	r1, [r0, #38]	; 0x26
    a224:	e3a0604c 	mov	r6, #76	; 0x4c
    a228:	e3436f20 	movt	r6, #16160	; 0x3f20
    a22c:	e5970000 	ldr	r0, [r7]
    a230:	e0050195 	mul	r5, r5, r1
    a234:	e0836006 	add	r6, r3, r6
    a238:	e3500000 	cmp	r0, #0
    a23c:	1a000008 	bne	a264 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    a240:	e7963005 	ldr	r3, [r6, r5]
    a244:	e594200c 	ldr	r2, [r4, #12]
    a248:	e1833002 	orr	r3, r3, r2
    a24c:	e7863005 	str	r3, [r6, r5]
    a250:	e5973000 	ldr	r3, [r7]
    a254:	e3530000 	cmp	r3, #0
    a258:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a25c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a260:	ea001c2a 	b	11310 <LeaveCritical>
    a264:	eb001bfe 	bl	11264 <EnterCritical>
    a268:	eafffff4 	b	a240 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    a26c:	e59f1048 	ldr	r1, [pc, #72]	; a2bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a270:	e300210d 	movw	r2, #269	; 0x10d
    a274:	e2810f5b 	add	r0, r1, #364	; 0x16c
    a278:	ebfffc7e 	bl	9478 <assertion_failed>
    a27c:	e59f1038 	ldr	r1, [pc, #56]	; a2bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a280:	e300210f 	movw	r2, #271	; 0x10f
    a284:	e2810f45 	add	r0, r1, #276	; 0x114
    a288:	ebfffc7a 	bl	9478 <assertion_failed>
    a28c:	e59f1028 	ldr	r1, [pc, #40]	; a2bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a290:	e3a02e11 	mov	r2, #272	; 0x110
    a294:	e2810f5f 	add	r0, r1, #380	; 0x17c
    a298:	ebfffc76 	bl	9478 <assertion_failed>
    a29c:	e59f1018 	ldr	r1, [pc, #24]	; a2bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a2a0:	e3002111 	movw	r2, #273	; 0x111
    a2a4:	e2810e1e 	add	r0, r1, #480	; 0x1e0
    a2a8:	ebfffc72 	bl	9478 <assertion_failed>
    a2ac:	e59f1008 	ldr	r1, [pc, #8]	; a2bc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    a2b0:	e300210a 	movw	r2, #266	; 0x10a
    a2b4:	e2810078 	add	r0, r1, #120	; 0x78
    a2b8:	ebfffc6e 	bl	9478 <assertion_failed>
    a2bc:	00014534 	.word	0x00014534

0000a2c0 <CGPIOPin::DisableInterrupt2()>:
    a2c0:	e5d03010 	ldrb	r3, [r0, #16]
    a2c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a2c8:	e2432002 	sub	r2, r3, #2
    a2cc:	e3530000 	cmp	r3, #0
    a2d0:	13520001 	cmpne	r2, #1
    a2d4:	8a000020 	bhi	a35c <CGPIOPin::DisableInterrupt2()+0x9c>
    a2d8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a2dc:	e1a04000 	mov	r4, r0
    a2e0:	e3530005 	cmp	r3, #5
    a2e4:	8a000018 	bhi	a34c <CGPIOPin::DisableInterrupt2()+0x8c>
    a2e8:	e3067914 	movw	r7, #26900	; 0x6914
    a2ec:	e3407001 	movt	r7, #1
    a2f0:	e3a0500c 	mov	r5, #12
    a2f4:	e5902008 	ldr	r2, [r0, #8]
    a2f8:	e3a0604c 	mov	r6, #76	; 0x4c
    a2fc:	e3436f20 	movt	r6, #16160	; 0x3f20
    a300:	e5970000 	ldr	r0, [r7]
    a304:	e0826006 	add	r6, r2, r6
    a308:	e0050395 	mul	r5, r5, r3
    a30c:	e3500000 	cmp	r0, #0
    a310:	1a000009 	bne	a33c <CGPIOPin::DisableInterrupt2()+0x7c>
    a314:	e7963005 	ldr	r3, [r6, r5]
    a318:	e594200c 	ldr	r2, [r4, #12]
    a31c:	e1c33002 	bic	r3, r3, r2
    a320:	e7863005 	str	r3, [r6, r5]
    a324:	e5973000 	ldr	r3, [r7]
    a328:	e3530000 	cmp	r3, #0
    a32c:	1a000004 	bne	a344 <CGPIOPin::DisableInterrupt2()+0x84>
    a330:	e3a03006 	mov	r3, #6
    a334:	e5c43026 	strb	r3, [r4, #38]	; 0x26
    a338:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a33c:	eb001bc8 	bl	11264 <EnterCritical>
    a340:	eafffff3 	b	a314 <CGPIOPin::DisableInterrupt2()+0x54>
    a344:	eb001bf1 	bl	11310 <LeaveCritical>
    a348:	eafffff8 	b	a330 <CGPIOPin::DisableInterrupt2()+0x70>
    a34c:	e59f1018 	ldr	r1, [pc, #24]	; a36c <CGPIOPin::DisableInterrupt2()+0xac>
    a350:	e3a02f49 	mov	r2, #292	; 0x124
    a354:	e2810f7f 	add	r0, r1, #508	; 0x1fc
    a358:	ebfffc46 	bl	9478 <assertion_failed>
    a35c:	e59f1008 	ldr	r1, [pc, #8]	; a36c <CGPIOPin::DisableInterrupt2()+0xac>
    a360:	e3a02e12 	mov	r2, #288	; 0x120
    a364:	e2810078 	add	r0, r1, #120	; 0x78
    a368:	ebfffc42 	bl	9478 <assertion_failed>
    a36c:	00014534 	.word	0x00014534

0000a370 <CGPIOPin::AcknowledgeInterrupt()>:
    a370:	e590301c 	ldr	r3, [r0, #28]
    a374:	e92d4010 	push	{r4, lr}
    a378:	e3530000 	cmp	r3, #0
    a37c:	0a000008 	beq	a3a4 <CGPIOPin::AcknowledgeInterrupt()+0x34>
    a380:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
    a384:	e3530000 	cmp	r3, #0
    a388:	1a000009 	bne	a3b4 <CGPIOPin::AcknowledgeInterrupt()+0x44>
    a38c:	e5902008 	ldr	r2, [r0, #8]
    a390:	e3a03040 	mov	r3, #64	; 0x40
    a394:	e3433f20 	movt	r3, #16160	; 0x3f20
    a398:	e590100c 	ldr	r1, [r0, #12]
    a39c:	e7821003 	str	r1, [r2, r3]
    a3a0:	e8bd8010 	pop	{r4, pc}
    a3a4:	e59f1018 	ldr	r1, [pc, #24]	; a3c4 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    a3a8:	e3002133 	movw	r2, #307	; 0x133
    a3ac:	e2810f5b 	add	r0, r1, #364	; 0x16c
    a3b0:	ebfffc30 	bl	9478 <assertion_failed>
    a3b4:	e59f1008 	ldr	r1, [pc, #8]	; a3c4 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    a3b8:	e3a02f4d 	mov	r2, #308	; 0x134
    a3bc:	e2810e22 	add	r0, r1, #544	; 0x220
    a3c0:	ebfffc2c 	bl	9478 <assertion_failed>
    a3c4:	00014534 	.word	0x00014534

0000a3c8 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    a3c8:	e1d12000 	bics	r2, r1, r0
    a3cc:	13a03000 	movne	r3, #0
    a3d0:	13433f20 	movtne	r3, #16160	; 0x3f20
    a3d4:	15832028 	strne	r2, [r3, #40]	; 0x28
    a3d8:	e0100001 	ands	r0, r0, r1
    a3dc:	13a03000 	movne	r3, #0
    a3e0:	13433f20 	movtne	r3, #16160	; 0x3f20
    a3e4:	1583001c 	strne	r0, [r3, #28]
    a3e8:	e12fff1e 	bx	lr

0000a3ec <CGPIOPin::ReadAll()>:
    a3ec:	e3a03000 	mov	r3, #0
    a3f0:	e3433f20 	movt	r3, #16160	; 0x3f20
    a3f4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    a3f8:	e12fff1e 	bx	lr

0000a3fc <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    a3fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a400:	e3064914 	movw	r4, #26900	; 0x6914
    a404:	e3404001 	movt	r4, #1
    a408:	e1a05000 	mov	r5, r0
    a40c:	e1a06001 	mov	r6, r1
    a410:	e5940000 	ldr	r0, [r4]
    a414:	e3500000 	cmp	r0, #0
    a418:	1a000015 	bne	a474 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
    a41c:	e3a07098 	mov	r7, #152	; 0x98
    a420:	e3437f20 	movt	r7, #16160	; 0x3f20
    a424:	e5959008 	ldr	r9, [r5, #8]
    a428:	e3560002 	cmp	r6, #2
    a42c:	8a000012 	bhi	a47c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
    a430:	e3a08000 	mov	r8, #0
    a434:	e3438f20 	movt	r8, #16160	; 0x3f20
    a438:	e3a00005 	mov	r0, #5
    a43c:	e5886094 	str	r6, [r8, #148]	; 0x94
    a440:	eb00156d 	bl	f9fc <CTimer::SimpleusDelay(unsigned int)>
    a444:	e595300c 	ldr	r3, [r5, #12]
    a448:	e7893007 	str	r3, [r9, r7]
    a44c:	e3a00005 	mov	r0, #5
    a450:	eb001569 	bl	f9fc <CTimer::SimpleusDelay(unsigned int)>
    a454:	e3a03000 	mov	r3, #0
    a458:	e5883094 	str	r3, [r8, #148]	; 0x94
    a45c:	e7893007 	str	r3, [r9, r7]
    a460:	e5943000 	ldr	r3, [r4]
    a464:	e3530000 	cmp	r3, #0
    a468:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    a46c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    a470:	ea001ba6 	b	11310 <LeaveCritical>
    a474:	eb001b7a 	bl	11264 <EnterCritical>
    a478:	eaffffe7 	b	a41c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
    a47c:	e59f1008 	ldr	r1, [pc, #8]	; a48c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
    a480:	e3002165 	movw	r2, #357	; 0x165
    a484:	e2810f8b 	add	r0, r1, #556	; 0x22c
    a488:	ebfffbfa 	bl	9478 <assertion_failed>
    a48c:	00014534 	.word	0x00014534

0000a490 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    a490:	e5903004 	ldr	r3, [r0, #4]
    a494:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a498:	e3530035 	cmp	r3, #53	; 0x35
    a49c:	8a000021 	bhi	a528 <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
    a4a0:	e30c2ccd 	movw	r2, #52429	; 0xcccd
    a4a4:	e34c2ccc 	movt	r2, #52428	; 0xcccc
    a4a8:	e1a06001 	mov	r6, r1
    a4ac:	e3a0100a 	mov	r1, #10
    a4b0:	e3560005 	cmp	r6, #5
    a4b4:	e0820392 	umull	r0, r2, r2, r3
    a4b8:	e1a021a2 	lsr	r2, r2, #3
    a4bc:	e282053f 	add	r0, r2, #264241152	; 0xfc00000
    a4c0:	e2800702 	add	r0, r0, #524288	; 0x80000
    a4c4:	e0633291 	mls	r3, r1, r2, r3
    a4c8:	e1a07100 	lsl	r7, r0, #2
    a4cc:	e0834083 	add	r4, r3, r3, lsl #1
    a4d0:	8a000018 	bhi	a538 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
    a4d4:	e3065914 	movw	r5, #26900	; 0x6914
    a4d8:	e3405001 	movt	r5, #1
    a4dc:	e5950000 	ldr	r0, [r5]
    a4e0:	e3500000 	cmp	r0, #0
    a4e4:	1a00000d 	bne	a520 <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
    a4e8:	e3042524 	movw	r2, #17700	; 0x4524
    a4ec:	e3402001 	movt	r2, #1
    a4f0:	e0822106 	add	r2, r2, r6, lsl #2
    a4f4:	e5973000 	ldr	r3, [r7]
    a4f8:	e3a01007 	mov	r1, #7
    a4fc:	e5922258 	ldr	r2, [r2, #600]	; 0x258
    a500:	e1c33411 	bic	r3, r3, r1, lsl r4
    a504:	e1833412 	orr	r3, r3, r2, lsl r4
    a508:	e5873000 	str	r3, [r7]
    a50c:	e5953000 	ldr	r3, [r5]
    a510:	e3530000 	cmp	r3, #0
    a514:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a518:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a51c:	ea001b7b 	b	11310 <LeaveCritical>
    a520:	eb001b4f 	bl	11264 <EnterCritical>
    a524:	eaffffef 	b	a4e8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
    a528:	e59f1018 	ldr	r1, [pc, #24]	; a548 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    a52c:	e3002181 	movw	r2, #385	; 0x181
    a530:	e2810020 	add	r0, r1, #32
    a534:	ebfffbcf 	bl	9478 <assertion_failed>
    a538:	e59f1008 	ldr	r1, [pc, #8]	; a548 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
    a53c:	e3002185 	movw	r2, #389	; 0x185
    a540:	e2810f8e 	add	r0, r1, #568	; 0x238
    a544:	ebfffbcb 	bl	9478 <assertion_failed>
    a548:	00014534 	.word	0x00014534

0000a54c <CGPIOPin::SetMode(TGPIOMode, bool)>:
    a54c:	e3510009 	cmp	r1, #9
    a550:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a554:	8a000057 	bhi	a6b8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
    a558:	e1a03001 	mov	r3, r1
    a55c:	e2411004 	sub	r1, r1, #4
    a560:	e1a06002 	mov	r6, r2
    a564:	e1a04000 	mov	r4, r0
    a568:	e6ef2071 	uxtb	r2, r1
    a56c:	e5c03010 	strb	r3, [r0, #16]
    a570:	e3520005 	cmp	r2, #5
    a574:	9a00002d 	bls	a630 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
    a578:	e3530001 	cmp	r3, #1
    a57c:	13a02000 	movne	r2, #0
    a580:	02062001 	andeq	r2, r6, #1
    a584:	e3520000 	cmp	r2, #0
    a588:	1a00004e 	bne	a6c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x17c>
    a58c:	e5943004 	ldr	r3, [r4, #4]
    a590:	e3530035 	cmp	r3, #53	; 0x35
    a594:	8a00004e 	bhi	a6d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
    a598:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    a59c:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    a5a0:	e3068914 	movw	r8, #26900	; 0x6914
    a5a4:	e3408001 	movt	r8, #1
    a5a8:	e0852395 	umull	r2, r5, r5, r3
    a5ac:	e3a0200a 	mov	r2, #10
    a5b0:	e5980000 	ldr	r0, [r8]
    a5b4:	e1a051a5 	lsr	r5, r5, #3
    a5b8:	e3500000 	cmp	r0, #0
    a5bc:	e285753f 	add	r7, r5, #264241152	; 0xfc00000
    a5c0:	e2877702 	add	r7, r7, #524288	; 0x80000
    a5c4:	e0653592 	mls	r5, r2, r5, r3
    a5c8:	e1a07107 	lsl	r7, r7, #2
    a5cc:	e0855085 	add	r5, r5, r5, lsl #1
    a5d0:	1a00001f 	bne	a654 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
    a5d4:	e5d42010 	ldrb	r2, [r4, #16]
    a5d8:	e3a01007 	mov	r1, #7
    a5dc:	e5973000 	ldr	r3, [r7]
    a5e0:	e2422001 	sub	r2, r2, #1
    a5e4:	e16f2f12 	clz	r2, r2
    a5e8:	e1c33511 	bic	r3, r3, r1, lsl r5
    a5ec:	e1a022a2 	lsr	r2, r2, #5
    a5f0:	e1835512 	orr	r5, r3, r2, lsl r5
    a5f4:	e5875000 	str	r5, [r7]
    a5f8:	e5983000 	ldr	r3, [r8]
    a5fc:	e3530000 	cmp	r3, #0
    a600:	1a00000f 	bne	a644 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
    a604:	e3560000 	cmp	r6, #0
    a608:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a60c:	e5d43010 	ldrb	r3, [r4, #16]
    a610:	e3530003 	cmp	r3, #3
    a614:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a618:	ea000003 	b	a62c <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
    a61c:	0000a68c 	.word	0x0000a68c
    a620:	0000a67c 	.word	0x0000a67c
    a624:	0000a66c 	.word	0x0000a66c
    a628:	0000a65c 	.word	0x0000a65c
    a62c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a630:	e3560000 	cmp	r6, #0
    a634:	1a000018 	bne	a69c <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
    a638:	e1a00004 	mov	r0, r4
    a63c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a640:	eaffff92 	b	a490 <CGPIOPin::SetAlternateFunction(unsigned int)>
    a644:	eb001b31 	bl	11310 <LeaveCritical>
    a648:	e3560000 	cmp	r6, #0
    a64c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a650:	eaffffed 	b	a60c <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
    a654:	eb001b02 	bl	11264 <EnterCritical>
    a658:	eaffffdd 	b	a5d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
    a65c:	e1a00004 	mov	r0, r4
    a660:	e3a01001 	mov	r1, #1
    a664:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a668:	eaffff63 	b	a3fc <CGPIOPin::SetPullMode(TGPIOPullMode)>
    a66c:	e1a00004 	mov	r0, r4
    a670:	e3a01002 	mov	r1, #2
    a674:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a678:	eaffff5f 	b	a3fc <CGPIOPin::SetPullMode(TGPIOPullMode)>
    a67c:	e1a00004 	mov	r0, r4
    a680:	e3a01000 	mov	r1, #0
    a684:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a688:	eafffda5 	b	9d24 <CGPIOPin::Write(unsigned int)>
    a68c:	e1a00004 	mov	r0, r4
    a690:	e3a01000 	mov	r1, #0
    a694:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a698:	eaffff57 	b	a3fc <CGPIOPin::SetPullMode(TGPIOPullMode)>
    a69c:	e3a01000 	mov	r1, #0
    a6a0:	ebffff55 	bl	a3fc <CGPIOPin::SetPullMode(TGPIOPullMode)>
    a6a4:	e5d43010 	ldrb	r3, [r4, #16]
    a6a8:	e1a00004 	mov	r0, r4
    a6ac:	e2431004 	sub	r1, r3, #4
    a6b0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a6b4:	eaffff75 	b	a490 <CGPIOPin::SetAlternateFunction(unsigned int)>
    a6b8:	e59f1024 	ldr	r1, [pc, #36]	; a6e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
    a6bc:	e3a0204f 	mov	r2, #79	; 0x4f
    a6c0:	e2810e26 	add	r0, r1, #608	; 0x260
    a6c4:	ebfffb6b 	bl	9478 <assertion_failed>
    a6c8:	e3a01000 	mov	r1, #0
    a6cc:	ebffff4a 	bl	a3fc <CGPIOPin::SetPullMode(TGPIOPullMode)>
    a6d0:	eaffffad 	b	a58c <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
    a6d4:	e59f1008 	ldr	r1, [pc, #8]	; a6e4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
    a6d8:	e3a02068 	mov	r2, #104	; 0x68
    a6dc:	e2810020 	add	r0, r1, #32
    a6e0:	ebfffb64 	bl	9478 <assertion_failed>
    a6e4:	00014534 	.word	0x00014534

0000a6e8 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    a6e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a6ec:	e3510035 	cmp	r1, #53	; 0x35
    a6f0:	e59f7090 	ldr	r7, [pc, #144]	; a788 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
    a6f4:	e5803018 	str	r3, [r0, #24]
    a6f8:	e1a04000 	mov	r4, r0
    a6fc:	e3a03000 	mov	r3, #0
    a700:	e1a05001 	mov	r5, r1
    a704:	e580301c 	str	r3, [r0, #28]
    a708:	e1a06002 	mov	r6, r2
    a70c:	e3a03006 	mov	r3, #6
    a710:	e5807000 	str	r7, [r0]
    a714:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    a718:	e5c03026 	strb	r3, [r0, #38]	; 0x26
    a71c:	e3a0300a 	mov	r3, #10
    a720:	e5801004 	str	r1, [r0, #4]
    a724:	e5c03010 	strb	r3, [r0, #16]
    a728:	8a00000b 	bhi	a75c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    a72c:	e3a02001 	mov	r2, #1
    a730:	e1a032a5 	lsr	r3, r5, #5
    a734:	e205501f 	and	r5, r5, #31
    a738:	e1a00004 	mov	r0, r4
    a73c:	e1a03103 	lsl	r3, r3, #2
    a740:	e1a01006 	mov	r1, r6
    a744:	e1a05512 	lsl	r5, r2, r5
    a748:	e5843008 	str	r3, [r4, #8]
    a74c:	e584500c 	str	r5, [r4, #12]
    a750:	ebffff7d 	bl	a54c <CGPIOPin::SetMode(TGPIOMode, bool)>
    a754:	e1a00004 	mov	r0, r4
    a758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a75c:	eb0005d5 	bl	beb8 <CMachineInfo::Get()>
    a760:	e6ef1075 	uxtb	r1, r5
    a764:	eb00053e 	bl	bc64 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    a768:	e1a05000 	mov	r5, r0
    a76c:	e3500035 	cmp	r0, #53	; 0x35
    a770:	e5840004 	str	r0, [r4, #4]
    a774:	9affffec 	bls	a72c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    a778:	e3a02047 	mov	r2, #71	; 0x47
    a77c:	e2871008 	add	r1, r7, #8
    a780:	e2870028 	add	r0, r7, #40	; 0x28
    a784:	ebfffb3b 	bl	9478 <assertion_failed>
    a788:	0001452c 	.word	0x0001452c

0000a78c <CGPIOPin::InterruptHandler()>:
    a78c:	e5d03010 	ldrb	r3, [r0, #16]
    a790:	e92d4010 	push	{r4, lr}
    a794:	e2432002 	sub	r2, r3, #2
    a798:	e3530000 	cmp	r3, #0
    a79c:	13520001 	cmpne	r2, #1
    a7a0:	8a000013 	bhi	a7f4 <CGPIOPin::InterruptHandler()+0x68>
    a7a4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    a7a8:	e3530005 	cmp	r3, #5
    a7ac:	8a000005 	bhi	a7c8 <CGPIOPin::InterruptHandler()+0x3c>
    a7b0:	e590301c 	ldr	r3, [r0, #28]
    a7b4:	e3530000 	cmp	r3, #0
    a7b8:	0a000009 	beq	a7e4 <CGPIOPin::InterruptHandler()+0x58>
    a7bc:	e8bd4010 	pop	{r4, lr}
    a7c0:	e5900020 	ldr	r0, [r0, #32]
    a7c4:	e12fff13 	bx	r3
    a7c8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    a7cc:	e3530005 	cmp	r3, #5
    a7d0:	9afffff6 	bls	a7b0 <CGPIOPin::InterruptHandler()+0x24>
    a7d4:	e59f1028 	ldr	r1, [pc, #40]	; a804 <CGPIOPin::InterruptHandler()+0x78>
    a7d8:	e3002195 	movw	r2, #405	; 0x195
    a7dc:	e2810f9e 	add	r0, r1, #632	; 0x278
    a7e0:	ebfffb24 	bl	9478 <assertion_failed>
    a7e4:	e59f1018 	ldr	r1, [pc, #24]	; a804 <CGPIOPin::InterruptHandler()+0x78>
    a7e8:	e3a02f66 	mov	r2, #408	; 0x198
    a7ec:	e2810f5b 	add	r0, r1, #364	; 0x16c
    a7f0:	ebfffb20 	bl	9478 <assertion_failed>
    a7f4:	e59f1008 	ldr	r1, [pc, #8]	; a804 <CGPIOPin::InterruptHandler()+0x78>
    a7f8:	e3002192 	movw	r2, #402	; 0x192
    a7fc:	e2810078 	add	r0, r1, #120	; 0x78
    a800:	ebfffb1c 	bl	9478 <assertion_failed>
    a804:	00014534 	.word	0x00014534

0000a808 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    a808:	e3500035 	cmp	r0, #53	; 0x35
    a80c:	e92d4070 	push	{r4, r5, r6, lr}
    a810:	8a00001a 	bhi	a880 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    a814:	e3066914 	movw	r6, #26900	; 0x6914
    a818:	e3406001 	movt	r6, #1
    a81c:	e3a04013 	mov	r4, #19
    a820:	e3404fc8 	movt	r4, #4040	; 0xfc8
    a824:	e08442a0 	add	r4, r4, r0, lsr #5
    a828:	e200501f 	and	r5, r0, #31
    a82c:	e3a02001 	mov	r2, #1
    a830:	e5960000 	ldr	r0, [r6]
    a834:	e1a04104 	lsl	r4, r4, #2
    a838:	e1a05512 	lsl	r5, r2, r5
    a83c:	e3500000 	cmp	r0, #0
    a840:	1a00000c 	bne	a878 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    a844:	e3a0108b 	mov	r1, #139	; 0x8b
    a848:	e3431f20 	movt	r1, #16160	; 0x3f20
    a84c:	e1e02005 	mvn	r2, r5
    a850:	e5943000 	ldr	r3, [r4]
    a854:	e0033002 	and	r3, r3, r2
    a858:	e484300c 	str	r3, [r4], #12
    a85c:	e1540001 	cmp	r4, r1
    a860:	9afffffa 	bls	a850 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    a864:	e5963000 	ldr	r3, [r6]
    a868:	e3530000 	cmp	r3, #0
    a86c:	08bd8070 	popeq	{r4, r5, r6, pc}
    a870:	e8bd4070 	pop	{r4, r5, r6, lr}
    a874:	ea001aa5 	b	11310 <LeaveCritical>
    a878:	eb001a79 	bl	11264 <EnterCritical>
    a87c:	eafffff0 	b	a844 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    a880:	e59f1008 	ldr	r1, [pc, #8]	; a890 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    a884:	e300219e 	movw	r2, #414	; 0x19e
    a888:	e2810fb1 	add	r0, r1, #708	; 0x2c4
    a88c:	ebfffaf9 	bl	9478 <assertion_failed>
    a890:	00014534 	.word	0x00014534

0000a894 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    a894:	e3063914 	movw	r3, #26900	; 0x6914
    a898:	e3403001 	movt	r3, #1
    a89c:	e3a02001 	mov	r2, #1
    a8a0:	e5832000 	str	r2, [r3]
    a8a4:	e12fff1e 	bx	lr

0000a8a8 <CKernelOptions::~CKernelOptions()>:
    a8a8:	e3063918 	movw	r3, #26904	; 0x6918
    a8ac:	e3403001 	movt	r3, #1
    a8b0:	e3a02000 	mov	r2, #0
    a8b4:	e5832000 	str	r2, [r3]
    a8b8:	e12fff1e 	bx	lr

0000a8bc <CKernelOptions::GetWidth() const>:
    a8bc:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    a8c0:	e12fff1e 	bx	lr

0000a8c4 <CKernelOptions::GetHeight() const>:
    a8c4:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    a8c8:	e12fff1e 	bx	lr

0000a8cc <CKernelOptions::GetLogDevice() const>:
    a8cc:	e2800e81 	add	r0, r0, #2064	; 0x810
    a8d0:	e2800008 	add	r0, r0, #8
    a8d4:	e12fff1e 	bx	lr

0000a8d8 <CKernelOptions::GetLogLevel() const>:
    a8d8:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    a8dc:	e12fff1e 	bx	lr

0000a8e0 <CKernelOptions::GetKeyMap() const>:
    a8e0:	e2800e83 	add	r0, r0, #2096	; 0x830
    a8e4:	e12fff1e 	bx	lr

0000a8e8 <CKernelOptions::GetUSBPowerDelay() const>:
    a8e8:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    a8ec:	e12fff1e 	bx	lr

0000a8f0 <CKernelOptions::GetUSBFullSpeed() const>:
    a8f0:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    a8f4:	e12fff1e 	bx	lr

0000a8f8 <CKernelOptions::GetSoundDevice() const>:
    a8f8:	e2800e83 	add	r0, r0, #2096	; 0x830
    a8fc:	e2800009 	add	r0, r0, #9
    a900:	e12fff1e 	bx	lr

0000a904 <CKernelOptions::GetSoundOption() const>:
    a904:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
    a908:	e12fff1e 	bx	lr

0000a90c <CKernelOptions::GetCPUSpeed() const>:
    a90c:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
    a910:	e12fff1e 	bx	lr

0000a914 <CKernelOptions::GetSoCMaxTemp() const>:
    a914:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
    a918:	e12fff1e 	bx	lr

0000a91c <CKernelOptions::Get()>:
    a91c:	e3063918 	movw	r3, #26904	; 0x6918
    a920:	e3403001 	movt	r3, #1
    a924:	e5930000 	ldr	r0, [r3]
    a928:	e12fff1e 	bx	lr

0000a92c <CKernelOptions::GetToken()>:
    a92c:	e1a01000 	mov	r1, r0
    a930:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
    a934:	e1d030d0 	ldrsb	r3, [r0]
    a938:	e3530000 	cmp	r3, #0
    a93c:	1a000005 	bne	a958 <CKernelOptions::GetToken()+0x2c>
    a940:	ea000017 	b	a9a4 <CKernelOptions::GetToken()+0x78>
    a944:	e2800001 	add	r0, r0, #1
    a948:	e581080c 	str	r0, [r1, #2060]	; 0x80c
    a94c:	e1d030d0 	ldrsb	r3, [r0]
    a950:	e3530000 	cmp	r3, #0
    a954:	0a000012 	beq	a9a4 <CKernelOptions::GetToken()+0x78>
    a958:	e3530020 	cmp	r3, #32
    a95c:	0afffff8 	beq	a944 <CKernelOptions::GetToken()+0x18>
    a960:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
    a964:	e1d320d0 	ldrsb	r2, [r3]
    a968:	e3520000 	cmp	r2, #0
    a96c:	1a000005 	bne	a988 <CKernelOptions::GetToken()+0x5c>
    a970:	e12fff1e 	bx	lr
    a974:	e2833001 	add	r3, r3, #1
    a978:	e581380c 	str	r3, [r1, #2060]	; 0x80c
    a97c:	e1d320d0 	ldrsb	r2, [r3]
    a980:	e3520000 	cmp	r2, #0
    a984:	012fff1e 	bxeq	lr
    a988:	e3520020 	cmp	r2, #32
    a98c:	1afffff8 	bne	a974 <CKernelOptions::GetToken()+0x48>
    a990:	e283c001 	add	ip, r3, #1
    a994:	e3a02000 	mov	r2, #0
    a998:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
    a99c:	e5c32000 	strb	r2, [r3]
    a9a0:	e12fff1e 	bx	lr
    a9a4:	e3a00000 	mov	r0, #0
    a9a8:	e12fff1e 	bx	lr

0000a9ac <CKernelOptions::GetOptionValue(char*)>:
    a9ac:	e1d030d0 	ldrsb	r3, [r0]
    a9b0:	e3530000 	cmp	r3, #0
    a9b4:	1a000003 	bne	a9c8 <CKernelOptions::GetOptionValue(char*)+0x1c>
    a9b8:	ea000007 	b	a9dc <CKernelOptions::GetOptionValue(char*)+0x30>
    a9bc:	e1f030d1 	ldrsb	r3, [r0, #1]!
    a9c0:	e3530000 	cmp	r3, #0
    a9c4:	0a000004 	beq	a9dc <CKernelOptions::GetOptionValue(char*)+0x30>
    a9c8:	e353003d 	cmp	r3, #61	; 0x3d
    a9cc:	1afffffa 	bne	a9bc <CKernelOptions::GetOptionValue(char*)+0x10>
    a9d0:	e3a03000 	mov	r3, #0
    a9d4:	e4c03001 	strb	r3, [r0], #1
    a9d8:	e12fff1e 	bx	lr
    a9dc:	e1a00003 	mov	r0, r3
    a9e0:	e12fff1e 	bx	lr

0000a9e4 <CKernelOptions::GetDecimal(char*)>:
    a9e4:	e3500000 	cmp	r0, #0
    a9e8:	0a00001a 	beq	aa58 <CKernelOptions::GetDecimal(char*)+0x74>
    a9ec:	e1d030d0 	ldrsb	r3, [r0]
    a9f0:	e3530000 	cmp	r3, #0
    a9f4:	0a000017 	beq	aa58 <CKernelOptions::GetDecimal(char*)+0x74>
    a9f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a9fc:	e280c001 	add	ip, r0, #1
    aa00:	e3a01000 	mov	r1, #0
    aa04:	e3a0e00a 	mov	lr, #10
    aa08:	ea00000a 	b	aa38 <CKernelOptions::GetDecimal(char*)+0x54>
    aa0c:	e242202f 	sub	r2, r2, #47	; 0x2f
    aa10:	e16f2f12 	clz	r2, r2
    aa14:	e1a022a2 	lsr	r2, r2, #5
    aa18:	e1500001 	cmp	r0, r1
    aa1c:	33822001 	orrcc	r2, r2, #1
    aa20:	e1a01000 	mov	r1, r0
    aa24:	e3520000 	cmp	r2, #0
    aa28:	1a000008 	bne	aa50 <CKernelOptions::GetDecimal(char*)+0x6c>
    aa2c:	e0dc30d1 	ldrsb	r3, [ip], #1
    aa30:	e3530000 	cmp	r3, #0
    aa34:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    aa38:	e022319e 	mla	r2, lr, r1, r3
    aa3c:	e2433030 	sub	r3, r3, #48	; 0x30
    aa40:	e6ef3073 	uxtb	r3, r3
    aa44:	e2420030 	sub	r0, r2, #48	; 0x30
    aa48:	e3530009 	cmp	r3, #9
    aa4c:	9affffee 	bls	aa0c <CKernelOptions::GetDecimal(char*)+0x28>
    aa50:	e3e00000 	mvn	r0, #0
    aa54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    aa58:	e3e00000 	mvn	r0, #0
    aa5c:	e12fff1e 	bx	lr

0000aa60 <CKernelOptions::CKernelOptions()>:
    aa60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa64:	e1a04000 	mov	r4, r0
    aa68:	e2806e81 	add	r6, r0, #2064	; 0x810
    aa6c:	e2866008 	add	r6, r6, #8
    aa70:	e3a05000 	mov	r5, #0
    aa74:	e24dd01c 	sub	sp, sp, #28
    aa78:	e5805810 	str	r5, [r0, #2064]	; 0x810
    aa7c:	e5805814 	str	r5, [r0, #2068]	; 0x814
    aa80:	e3a02004 	mov	r2, #4
    aa84:	e3a0303c 	mov	r3, #60	; 0x3c
    aa88:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    aa8c:	e2847e83 	add	r7, r4, #2096	; 0x830
    aa90:	e5843858 	str	r3, [r4, #2136]	; 0x858
    aa94:	e1a00006 	mov	r0, r6
    aa98:	e5845834 	str	r5, [r4, #2100]	; 0x834
    aa9c:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
    aaa0:	e304180c 	movw	r1, #18444	; 0x480c
    aaa4:	e3401001 	movt	r1, #1
    aaa8:	e5845850 	str	r5, [r4, #2128]	; 0x850
    aaac:	e5c45854 	strb	r5, [r4, #2132]	; 0x854
    aab0:	eb00151e 	bl	ff30 <strcpy>
    aab4:	e59f12d4 	ldr	r1, [pc, #724]	; ad90 <CKernelOptions::CKernelOptions()+0x330>
    aab8:	e1a00007 	mov	r0, r7
    aabc:	eb00151b 	bl	ff30 <strcpy>
    aac0:	e3063918 	movw	r3, #26904	; 0x6918
    aac4:	e3403001 	movt	r3, #1
    aac8:	e1a01005 	mov	r1, r5
    aacc:	e28d0010 	add	r0, sp, #16
    aad0:	e5c45839 	strb	r5, [r4, #2105]	; 0x839
    aad4:	e5834000 	str	r4, [r3]
    aad8:	eb001d08 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    aadc:	e1a02004 	mov	r2, r4
    aae0:	e3a01001 	mov	r1, #1
    aae4:	e3401005 	movt	r1, #5
    aae8:	e28d0010 	add	r0, sp, #16
    aaec:	e58d5000 	str	r5, [sp]
    aaf0:	e300380c 	movw	r3, #2060	; 0x80c
    aaf4:	eb001d47 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aaf8:	e1500005 	cmp	r0, r5
    aafc:	0a000027 	beq	aba0 <CKernelOptions::CKernelOptions()+0x140>
    ab00:	e5943008 	ldr	r3, [r4, #8]
    ab04:	e3530b02 	cmp	r3, #2048	; 0x800
    ab08:	2a000024 	bcs	aba0 <CKernelOptions::CKernelOptions()+0x140>
    ab0c:	e0843003 	add	r3, r4, r3
    ab10:	e5c3500c 	strb	r5, [r3, #12]
    ab14:	e284300c 	add	r3, r4, #12
    ab18:	e59f5274 	ldr	r5, [pc, #628]	; ad94 <CKernelOptions::CKernelOptions()+0x334>
    ab1c:	e584380c 	str	r3, [r4, #2060]	; 0x80c
    ab20:	e2858008 	add	r8, r5, #8
    ab24:	e2859010 	add	r9, r5, #16
    ab28:	e1a00004 	mov	r0, r4
    ab2c:	ebffff7e 	bl	a92c <CKernelOptions::GetToken()>
    ab30:	e250b000 	subs	fp, r0, #0
    ab34:	0a000019 	beq	aba0 <CKernelOptions::CKernelOptions()+0x140>
    ab38:	e1db30d0 	ldrsb	r3, [fp]
    ab3c:	e3530000 	cmp	r3, #0
    ab40:	0a00001b 	beq	abb4 <CKernelOptions::CKernelOptions()+0x154>
    ab44:	e1a0100b 	mov	r1, fp
    ab48:	ea000002 	b	ab58 <CKernelOptions::CKernelOptions()+0xf8>
    ab4c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ab50:	e3530000 	cmp	r3, #0
    ab54:	0a000016 	beq	abb4 <CKernelOptions::CKernelOptions()+0x154>
    ab58:	e353003d 	cmp	r3, #61	; 0x3d
    ab5c:	1afffffa 	bne	ab4c <CKernelOptions::CKernelOptions()+0xec>
    ab60:	e1a0a001 	mov	sl, r1
    ab64:	e3a03000 	mov	r3, #0
    ab68:	e4ca3001 	strb	r3, [sl], #1
    ab6c:	e1a01005 	mov	r1, r5
    ab70:	e1a0000b 	mov	r0, fp
    ab74:	eb001456 	bl	fcd4 <strcmp>
    ab78:	e3500000 	cmp	r0, #0
    ab7c:	1a00000e 	bne	abbc <CKernelOptions::CKernelOptions()+0x15c>
    ab80:	e1a0000a 	mov	r0, sl
    ab84:	ebffff96 	bl	a9e4 <CKernelOptions::GetDecimal(char*)>
    ab88:	e3700001 	cmn	r0, #1
    ab8c:	15840810 	strne	r0, [r4, #2064]	; 0x810
    ab90:	e1a00004 	mov	r0, r4
    ab94:	ebffff64 	bl	a92c <CKernelOptions::GetToken()>
    ab98:	e250b000 	subs	fp, r0, #0
    ab9c:	1affffe5 	bne	ab38 <CKernelOptions::CKernelOptions()+0xd8>
    aba0:	e28d0010 	add	r0, sp, #16
    aba4:	eb001cdc 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
    aba8:	e1a00004 	mov	r0, r4
    abac:	e28dd01c 	add	sp, sp, #28
    abb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abb4:	e1a0a003 	mov	sl, r3
    abb8:	eaffffeb 	b	ab6c <CKernelOptions::CKernelOptions()+0x10c>
    abbc:	e1a01008 	mov	r1, r8
    abc0:	e1a0000b 	mov	r0, fp
    abc4:	eb001442 	bl	fcd4 <strcmp>
    abc8:	e3500000 	cmp	r0, #0
    abcc:	1a000004 	bne	abe4 <CKernelOptions::CKernelOptions()+0x184>
    abd0:	e1a0000a 	mov	r0, sl
    abd4:	ebffff82 	bl	a9e4 <CKernelOptions::GetDecimal(char*)>
    abd8:	e3700001 	cmn	r0, #1
    abdc:	15840814 	strne	r0, [r4, #2068]	; 0x814
    abe0:	eaffffd0 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    abe4:	e1a01009 	mov	r1, r9
    abe8:	e1a0000b 	mov	r0, fp
    abec:	eb001438 	bl	fcd4 <strcmp>
    abf0:	e2503000 	subs	r3, r0, #0
    abf4:	e58d300c 	str	r3, [sp, #12]
    abf8:	0a000009 	beq	ac24 <CKernelOptions::CKernelOptions()+0x1c4>
    abfc:	e59f1194 	ldr	r1, [pc, #404]	; ad98 <CKernelOptions::CKernelOptions()+0x338>
    ac00:	e1a0000b 	mov	r0, fp
    ac04:	eb001432 	bl	fcd4 <strcmp>
    ac08:	e3500000 	cmp	r0, #0
    ac0c:	1a00000b 	bne	ac40 <CKernelOptions::CKernelOptions()+0x1e0>
    ac10:	e1a0000a 	mov	r0, sl
    ac14:	ebffff72 	bl	a9e4 <CKernelOptions::GetDecimal(char*)>
    ac18:	e3500004 	cmp	r0, #4
    ac1c:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    ac20:	eaffffc0 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ac24:	e1a0100a 	mov	r1, sl
    ac28:	e3a02013 	mov	r2, #19
    ac2c:	e1a00006 	mov	r0, r6
    ac30:	eb0014c9 	bl	ff5c <strncpy>
    ac34:	e59d300c 	ldr	r3, [sp, #12]
    ac38:	e5c4382b 	strb	r3, [r4, #2091]	; 0x82b
    ac3c:	eaffffb9 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ac40:	e59f1154 	ldr	r1, [pc, #340]	; ad9c <CKernelOptions::CKernelOptions()+0x33c>
    ac44:	e1a0000b 	mov	r0, fp
    ac48:	eb001421 	bl	fcd4 <strcmp>
    ac4c:	e2503000 	subs	r3, r0, #0
    ac50:	e58d300c 	str	r3, [sp, #12]
    ac54:	0a00000b 	beq	ac88 <CKernelOptions::CKernelOptions()+0x228>
    ac58:	e59f1140 	ldr	r1, [pc, #320]	; ada0 <CKernelOptions::CKernelOptions()+0x340>
    ac5c:	e1a0000b 	mov	r0, fp
    ac60:	eb00141b 	bl	fcd4 <strcmp>
    ac64:	e3500000 	cmp	r0, #0
    ac68:	1a00000d 	bne	aca4 <CKernelOptions::CKernelOptions()+0x244>
    ac6c:	e1a0000a 	mov	r0, sl
    ac70:	ebffff5b 	bl	a9e4 <CKernelOptions::GetDecimal(char*)>
    ac74:	e24010c8 	sub	r1, r0, #200	; 0xc8
    ac78:	e3012e78 	movw	r2, #7800	; 0x1e78
    ac7c:	e1510002 	cmp	r1, r2
    ac80:	95840834 	strls	r0, [r4, #2100]	; 0x834
    ac84:	eaffffa7 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ac88:	e1a0100a 	mov	r1, sl
    ac8c:	e3a02002 	mov	r2, #2
    ac90:	e1a00007 	mov	r0, r7
    ac94:	eb0014b0 	bl	ff5c <strncpy>
    ac98:	e59d300c 	ldr	r3, [sp, #12]
    ac9c:	e5c43832 	strb	r3, [r4, #2098]	; 0x832
    aca0:	eaffffa0 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    aca4:	e59f10f8 	ldr	r1, [pc, #248]	; ada4 <CKernelOptions::CKernelOptions()+0x344>
    aca8:	e1a0000b 	mov	r0, fp
    acac:	eb001408 	bl	fcd4 <strcmp>
    acb0:	e3500000 	cmp	r0, #0
    acb4:	1a000006 	bne	acd4 <CKernelOptions::CKernelOptions()+0x274>
    acb8:	e59f10e8 	ldr	r1, [pc, #232]	; ada8 <CKernelOptions::CKernelOptions()+0x348>
    acbc:	e1a0000a 	mov	r0, sl
    acc0:	eb001403 	bl	fcd4 <strcmp>
    acc4:	e3500000 	cmp	r0, #0
    acc8:	03a03001 	moveq	r3, #1
    accc:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
    acd0:	eaffff94 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    acd4:	e59f10d0 	ldr	r1, [pc, #208]	; adac <CKernelOptions::CKernelOptions()+0x34c>
    acd8:	e1a0000b 	mov	r0, fp
    acdc:	eb0013fc 	bl	fcd4 <strcmp>
    ace0:	e2503000 	subs	r3, r0, #0
    ace4:	e58d300c 	str	r3, [sp, #12]
    ace8:	1a000007 	bne	ad0c <CKernelOptions::CKernelOptions()+0x2ac>
    acec:	e2840e83 	add	r0, r4, #2096	; 0x830
    acf0:	e1a0100a 	mov	r1, sl
    acf4:	e2800009 	add	r0, r0, #9
    acf8:	e3a02013 	mov	r2, #19
    acfc:	eb001496 	bl	ff5c <strncpy>
    ad00:	e59d300c 	ldr	r3, [sp, #12]
    ad04:	e5c4384c 	strb	r3, [r4, #2124]	; 0x84c
    ad08:	eaffff86 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ad0c:	e59f109c 	ldr	r1, [pc, #156]	; adb0 <CKernelOptions::CKernelOptions()+0x350>
    ad10:	e1a0000b 	mov	r0, fp
    ad14:	eb0013ee 	bl	fcd4 <strcmp>
    ad18:	e3500000 	cmp	r0, #0
    ad1c:	1a000004 	bne	ad34 <CKernelOptions::CKernelOptions()+0x2d4>
    ad20:	e1a0000a 	mov	r0, sl
    ad24:	ebffff2e 	bl	a9e4 <CKernelOptions::GetDecimal(char*)>
    ad28:	e3500002 	cmp	r0, #2
    ad2c:	95840850 	strls	r0, [r4, #2128]	; 0x850
    ad30:	eaffff7c 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ad34:	e59f1078 	ldr	r1, [pc, #120]	; adb4 <CKernelOptions::CKernelOptions()+0x354>
    ad38:	e1a0000b 	mov	r0, fp
    ad3c:	eb0013e4 	bl	fcd4 <strcmp>
    ad40:	e3500000 	cmp	r0, #0
    ad44:	1a000006 	bne	ad64 <CKernelOptions::CKernelOptions()+0x304>
    ad48:	e59f1068 	ldr	r1, [pc, #104]	; adb8 <CKernelOptions::CKernelOptions()+0x358>
    ad4c:	e1a0000a 	mov	r0, sl
    ad50:	eb0013df 	bl	fcd4 <strcmp>
    ad54:	e3500000 	cmp	r0, #0
    ad58:	03a03001 	moveq	r3, #1
    ad5c:	05c43854 	strbeq	r3, [r4, #2132]	; 0x854
    ad60:	eaffff70 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ad64:	e59f1050 	ldr	r1, [pc, #80]	; adbc <CKernelOptions::CKernelOptions()+0x35c>
    ad68:	e1a0000b 	mov	r0, fp
    ad6c:	eb0013d8 	bl	fcd4 <strcmp>
    ad70:	e3500000 	cmp	r0, #0
    ad74:	1affff6b 	bne	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ad78:	e1a0000a 	mov	r0, sl
    ad7c:	ebffff18 	bl	a9e4 <CKernelOptions::GetDecimal(char*)>
    ad80:	e2402028 	sub	r2, r0, #40	; 0x28
    ad84:	e3520026 	cmp	r2, #38	; 0x26
    ad88:	95840858 	strls	r0, [r4, #2136]	; 0x858
    ad8c:	eaffff65 	b	ab28 <CKernelOptions::CKernelOptions()+0xc8>
    ad90:	00014814 	.word	0x00014814
    ad94:	00014818 	.word	0x00014818
    ad98:	00014830 	.word	0x00014830
    ad9c:	0001483c 	.word	0x0001483c
    ada0:	00014844 	.word	0x00014844
    ada4:	00014854 	.word	0x00014854
    ada8:	00014860 	.word	0x00014860
    adac:	00014868 	.word	0x00014868
    adb0:	00014874 	.word	0x00014874
    adb4:	00014880 	.word	0x00014880
    adb8:	00014888 	.word	0x00014888
    adbc:	00014890 	.word	0x00014890

0000adc0 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    adc0:	e92d4010 	push	{r4, lr}
    adc4:	e1a04000 	mov	r4, r0
    adc8:	e3a0c000 	mov	ip, #0
    adcc:	e8800006 	stm	r0, {r1, r2}
    add0:	e3a02001 	mov	r2, #1
    add4:	e5c43008 	strb	r3, [r4, #8]
    add8:	e3a00901 	mov	r0, #16384	; 0x4000
    addc:	e584c00c 	str	ip, [r4, #12]
    ade0:	e584c010 	str	ip, [r4, #16]
    ade4:	e584c014 	str	ip, [r4, #20]
    ade8:	e584c018 	str	ip, [r4, #24]
    adec:	e584201c 	str	r2, [r4, #28]
    adf0:	e584c0e8 	str	ip, [r4, #232]	; 0xe8
    adf4:	e584c0ec 	str	ip, [r4, #236]	; 0xec
    adf8:	e58420f0 	str	r2, [r4, #240]	; 0xf0
    adfc:	e584c0f4 	str	ip, [r4, #244]	; 0xf4
    ae00:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
    ae04:	eb0016ac 	bl	108bc <operator new[](unsigned int)>
    ae08:	e306391c 	movw	r3, #26908	; 0x691c
    ae0c:	e3403001 	movt	r3, #1
    ae10:	e5840010 	str	r0, [r4, #16]
    ae14:	e1a00004 	mov	r0, r4
    ae18:	e5834000 	str	r4, [r3]
    ae1c:	e8bd8010 	pop	{r4, pc}

0000ae20 <CLogger::~CLogger()>:
    ae20:	e306291c 	movw	r2, #26908	; 0x691c
    ae24:	e3402001 	movt	r2, #1
    ae28:	e92d4070 	push	{r4, r5, r6, lr}
    ae2c:	e3a05000 	mov	r5, #0
    ae30:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
    ae34:	e590c0e8 	ldr	ip, [r0, #232]	; 0xe8
    ae38:	e1a04000 	mov	r4, r0
    ae3c:	e5825000 	str	r5, [r2]
    ae40:	ea00000a 	b	ae70 <CLogger::~CLogger()+0x50>
    ae44:	e7940102 	ldr	r0, [r4, r2, lsl #2]
    ae48:	e3500000 	cmp	r0, #0
    ae4c:	0a000002 	beq	ae5c <CLogger::~CLogger()+0x3c>
    ae50:	eb0016ab 	bl	10904 <operator delete(void*, unsigned int)>
    ae54:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    ae58:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
    ae5c:	e2833001 	add	r3, r3, #1
    ae60:	e58430ec 	str	r3, [r4, #236]	; 0xec
    ae64:	e3530032 	cmp	r3, #50	; 0x32
    ae68:	058450ec 	streq	r5, [r4, #236]	; 0xec
    ae6c:	03a03000 	moveq	r3, #0
    ae70:	e2832008 	add	r2, r3, #8
    ae74:	e3a01f42 	mov	r1, #264	; 0x108
    ae78:	e153000c 	cmp	r3, ip
    ae7c:	1afffff0 	bne	ae44 <CLogger::~CLogger()+0x24>
    ae80:	e5940010 	ldr	r0, [r4, #16]
    ae84:	e3500000 	cmp	r0, #0
    ae88:	0a000000 	beq	ae90 <CLogger::~CLogger()+0x70>
    ae8c:	eb001696 	bl	108ec <operator delete[](void*)>
    ae90:	e1a00004 	mov	r0, r4
    ae94:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ae98 <CLogger::SetNewTarget(CDevice*)>:
    ae98:	e580100c 	str	r1, [r0, #12]
    ae9c:	e12fff1e 	bx	lr

0000aea0 <CLogger::Get()>:
    aea0:	e92d4070 	push	{r4, r5, r6, lr}
    aea4:	e306591c 	movw	r5, #26908	; 0x691c
    aea8:	e3405001 	movt	r5, #1
    aeac:	e5954000 	ldr	r4, [r5]
    aeb0:	e3540000 	cmp	r4, #0
    aeb4:	0a000001 	beq	aec0 <CLogger::Get()+0x20>
    aeb8:	e1a00004 	mov	r0, r4
    aebc:	e8bd8070 	pop	{r4, r5, r6, pc}
    aec0:	e3a000fc 	mov	r0, #252	; 0xfc
    aec4:	eb001676 	bl	108a4 <operator new(unsigned int)>
    aec8:	e1a04000 	mov	r4, r0
    aecc:	e3a03000 	mov	r3, #0
    aed0:	e3a02001 	mov	r2, #1
    aed4:	e3a00901 	mov	r0, #16384	; 0x4000
    aed8:	e5843000 	str	r3, [r4]
    aedc:	e5843004 	str	r3, [r4, #4]
    aee0:	e5c42008 	strb	r2, [r4, #8]
    aee4:	e584300c 	str	r3, [r4, #12]
    aee8:	e5843010 	str	r3, [r4, #16]
    aeec:	e5843014 	str	r3, [r4, #20]
    aef0:	e5843018 	str	r3, [r4, #24]
    aef4:	e584201c 	str	r2, [r4, #28]
    aef8:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    aefc:	e58430ec 	str	r3, [r4, #236]	; 0xec
    af00:	e1c42ff0 	strd	r2, [r4, #240]	; 0xf0
    af04:	e58430f8 	str	r3, [r4, #248]	; 0xf8
    af08:	eb00166b 	bl	108bc <operator new[](unsigned int)>
    af0c:	e5854000 	str	r4, [r5]
    af10:	e5840010 	str	r0, [r4, #16]
    af14:	e1a00004 	mov	r0, r4
    af18:	e8bd8070 	pop	{r4, r5, r6, pc}

0000af1c <CLogger::Write(char const*)>:
    af1c:	e92d4070 	push	{r4, r5, r6, lr}
    af20:	e1a04000 	mov	r4, r0
    af24:	e1a00001 	mov	r0, r1
    af28:	e1a05001 	mov	r5, r1
    af2c:	eb00135e 	bl	fcac <strlen>
    af30:	e1a06000 	mov	r6, r0
    af34:	e594000c 	ldr	r0, [r4, #12]
    af38:	e3500000 	cmp	r0, #0
    af3c:	0a000004 	beq	af54 <CLogger::Write(char const*)+0x38>
    af40:	e5903000 	ldr	r3, [r0]
    af44:	e1a02006 	mov	r2, r6
    af48:	e1a01005 	mov	r1, r5
    af4c:	e593300c 	ldr	r3, [r3, #12]
    af50:	e12fff33 	blx	r3
    af54:	e594001c 	ldr	r0, [r4, #28]
    af58:	e3500000 	cmp	r0, #0
    af5c:	1a000023 	bne	aff0 <CLogger::Write(char const*)+0xd4>
    af60:	e3560000 	cmp	r6, #0
    af64:	e246c001 	sub	ip, r6, #1
    af68:	08bd8070 	popeq	{r4, r5, r6, pc}
    af6c:	e1a02005 	mov	r2, r5
    af70:	ea000003 	b	af84 <CLogger::Write(char const*)+0x68>
    af74:	e2623001 	rsb	r3, r2, #1
    af78:	e0853003 	add	r3, r5, r3
    af7c:	e173000c 	cmn	r3, ip
    af80:	0a000015 	beq	afdc <CLogger::Write(char const*)+0xc0>
    af84:	e0d230d1 	ldrsb	r3, [r2], #1
    af88:	e353000d 	cmp	r3, #13
    af8c:	0afffff8 	beq	af74 <CLogger::Write(char const*)+0x58>
    af90:	e1c401d0 	ldrd	r0, [r4, #16]
    af94:	e7c03001 	strb	r3, [r0, r1]
    af98:	e5943014 	ldr	r3, [r4, #20]
    af9c:	e5940018 	ldr	r0, [r4, #24]
    afa0:	e2833001 	add	r3, r3, #1
    afa4:	e7ed3053 	ubfx	r3, r3, #0, #14
    afa8:	e5843014 	str	r3, [r4, #20]
    afac:	e1530000 	cmp	r3, r0
    afb0:	1affffef 	bne	af74 <CLogger::Write(char const*)+0x58>
    afb4:	e5d40008 	ldrb	r0, [r4, #8]
    afb8:	e2831001 	add	r1, r3, #1
    afbc:	e3500000 	cmp	r0, #0
    afc0:	0a00000f 	beq	b004 <CLogger::Write(char const*)+0xe8>
    afc4:	e2623001 	rsb	r3, r2, #1
    afc8:	e7ed1051 	ubfx	r1, r1, #0, #14
    afcc:	e0853003 	add	r3, r5, r3
    afd0:	e5841018 	str	r1, [r4, #24]
    afd4:	e173000c 	cmn	r3, ip
    afd8:	1affffe9 	bne	af84 <CLogger::Write(char const*)+0x68>
    afdc:	e594301c 	ldr	r3, [r4, #28]
    afe0:	e3530000 	cmp	r3, #0
    afe4:	08bd8070 	popeq	{r4, r5, r6, pc}
    afe8:	e8bd4070 	pop	{r4, r5, r6, lr}
    afec:	ea0018c7 	b	11310 <LeaveCritical>
    aff0:	eb00189b 	bl	11264 <EnterCritical>
    aff4:	e246c001 	sub	ip, r6, #1
    aff8:	e3560000 	cmp	r6, #0
    affc:	1affffda 	bne	af6c <CLogger::Write(char const*)+0x50>
    b000:	eafffff5 	b	afdc <CLogger::Write(char const*)+0xc0>
    b004:	e2433001 	sub	r3, r3, #1
    b008:	e7ed3053 	ubfx	r3, r3, #0, #14
    b00c:	e5843014 	str	r3, [r4, #20]
    b010:	eafffff1 	b	afdc <CLogger::Write(char const*)+0xc0>

0000b014 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    b014:	e92d4070 	push	{r4, r5, r6, lr}
    b018:	e1a05003 	mov	r5, r3
    b01c:	e5903000 	ldr	r3, [r0]
    b020:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    b024:	e1520003 	cmp	r2, r3
    b028:	8a000012 	bhi	b078 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
    b02c:	e3a03000 	mov	r3, #0
    b030:	e1a04000 	mov	r4, r0
    b034:	e3520000 	cmp	r2, #0
    b038:	e5cd3000 	strb	r3, [sp]
    b03c:	0a00000f 	beq	b080 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    b040:	e1a0000d 	mov	r0, sp
    b044:	eb0013d2 	bl	ff94 <strcat>
    b048:	e59f1098 	ldr	r1, [pc, #152]	; b0e8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    b04c:	e1a0000d 	mov	r0, sp
    b050:	eb0013cf 	bl	ff94 <strcat>
    b054:	e1a01005 	mov	r1, r5
    b058:	e1a0000d 	mov	r0, sp
    b05c:	eb0013cc 	bl	ff94 <strcat>
    b060:	e59f1084 	ldr	r1, [pc, #132]	; b0ec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    b064:	e1a0000d 	mov	r0, sp
    b068:	eb0013c9 	bl	ff94 <strcat>
    b06c:	e1a0100d 	mov	r1, sp
    b070:	e1a00004 	mov	r0, r4
    b074:	ebffffa8 	bl	af1c <CLogger::Write(char const*)>
    b078:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    b07c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b080:	e1a06001 	mov	r6, r1
    b084:	e1a0000d 	mov	r0, sp
    b088:	e304189c 	movw	r1, #18588	; 0x489c
    b08c:	e3401001 	movt	r1, #1
    b090:	eb0013a6 	bl	ff30 <strcpy>
    b094:	e1a01006 	mov	r1, r6
    b098:	e1a0000d 	mov	r0, sp
    b09c:	eb0013bc 	bl	ff94 <strcat>
    b0a0:	e59f1040 	ldr	r1, [pc, #64]	; b0e8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    b0a4:	e1a0000d 	mov	r0, sp
    b0a8:	eb0013b9 	bl	ff94 <strcat>
    b0ac:	e1a01005 	mov	r1, r5
    b0b0:	e1a0000d 	mov	r0, sp
    b0b4:	eb0013b6 	bl	ff94 <strcat>
    b0b8:	e59f1030 	ldr	r1, [pc, #48]	; b0f0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    b0bc:	e1a0000d 	mov	r0, sp
    b0c0:	eb0013b3 	bl	ff94 <strcat>
    b0c4:	e59f1020 	ldr	r1, [pc, #32]	; b0ec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    b0c8:	e1a0000d 	mov	r0, sp
    b0cc:	eb0013b0 	bl	ff94 <strcat>
    b0d0:	e1a0100d 	mov	r1, sp
    b0d4:	e1a00004 	mov	r0, r4
    b0d8:	ebffff8f 	bl	af1c <CLogger::Write(char const*)>
    b0dc:	e3a000ff 	mov	r0, #255	; 0xff
    b0e0:	eb000ed7 	bl	ec44 <set_qemu_exit_status>
    b0e4:	eb000ed7 	bl	ec48 <halt>
    b0e8:	000148a4 	.word	0x000148a4
    b0ec:	000148b0 	.word	0x000148b0
    b0f0:	000148a8 	.word	0x000148a8

0000b0f4 <CLogger::Read(void*, unsigned int, bool)>:
    b0f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b0f8:	e1a04000 	mov	r4, r0
    b0fc:	e590001c 	ldr	r0, [r0, #28]
    b100:	e1a05001 	mov	r5, r1
    b104:	e1a07002 	mov	r7, r2
    b108:	e1a08003 	mov	r8, r3
    b10c:	e3500000 	cmp	r0, #0
    b110:	1a00001a 	bne	b180 <CLogger::Read(void*, unsigned int, bool)+0x8c>
    b114:	e594c018 	ldr	ip, [r4, #24]
    b118:	e5943014 	ldr	r3, [r4, #20]
    b11c:	e153000c 	cmp	r3, ip
    b120:	0a000024 	beq	b1b8 <CLogger::Read(void*, unsigned int, bool)+0xc4>
    b124:	e1a09007 	mov	r9, r7
    b128:	e3a0e000 	mov	lr, #0
    b12c:	ea000007 	b	b150 <CLogger::Read(void*, unsigned int, bool)+0x5c>
    b130:	e5946010 	ldr	r6, [r4, #16]
    b134:	e28ee001 	add	lr, lr, #1
    b138:	e19660dc 	ldrsb	r6, [r6, ip]
    b13c:	e7edc051 	ubfx	ip, r1, #0, #14
    b140:	e4c56001 	strb	r6, [r5], #1
    b144:	e5941014 	ldr	r1, [r4, #20]
    b148:	e151000c 	cmp	r1, ip
    b14c:	0a000009 	beq	b178 <CLogger::Read(void*, unsigned int, bool)+0x84>
    b150:	e28c1001 	add	r1, ip, #1
    b154:	e15e0007 	cmp	lr, r7
    b158:	1afffff4 	bne	b130 <CLogger::Read(void*, unsigned int, bool)+0x3c>
    b15c:	e594301c 	ldr	r3, [r4, #28]
    b160:	e3580000 	cmp	r8, #0
    b164:	1584c018 	strne	ip, [r4, #24]
    b168:	e3530000 	cmp	r3, #0
    b16c:	1a00000e 	bne	b1ac <CLogger::Read(void*, unsigned int, bool)+0xb8>
    b170:	e1a00009 	mov	r0, r9
    b174:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b178:	e1a0900e 	mov	r9, lr
    b17c:	eafffff6 	b	b15c <CLogger::Read(void*, unsigned int, bool)+0x68>
    b180:	eb001837 	bl	11264 <EnterCritical>
    b184:	e594c018 	ldr	ip, [r4, #24]
    b188:	e5943014 	ldr	r3, [r4, #20]
    b18c:	e153000c 	cmp	r3, ip
    b190:	1affffe3 	bne	b124 <CLogger::Read(void*, unsigned int, bool)+0x30>
    b194:	e594301c 	ldr	r3, [r4, #28]
    b198:	e3530000 	cmp	r3, #0
    b19c:	0a000005 	beq	b1b8 <CLogger::Read(void*, unsigned int, bool)+0xc4>
    b1a0:	e3e09000 	mvn	r9, #0
    b1a4:	eb001859 	bl	11310 <LeaveCritical>
    b1a8:	eafffff0 	b	b170 <CLogger::Read(void*, unsigned int, bool)+0x7c>
    b1ac:	eb001857 	bl	11310 <LeaveCritical>
    b1b0:	e1a00009 	mov	r0, r9
    b1b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b1b8:	e3e09000 	mvn	r9, #0
    b1bc:	eaffffeb 	b	b170 <CLogger::Read(void*, unsigned int, bool)+0x7c>

0000b1c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    b1c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b1c4:	e1a04000 	mov	r4, r0
    b1c8:	e3a00f42 	mov	r0, #264	; 0x108
    b1cc:	e24dd008 	sub	sp, sp, #8
    b1d0:	e1a06003 	mov	r6, r3
    b1d4:	e1a07002 	mov	r7, r2
    b1d8:	e1a08001 	mov	r8, r1
    b1dc:	eb0015b0 	bl	108a4 <operator new(unsigned int)>
    b1e0:	e1a05000 	mov	r5, r0
    b1e4:	e1a01008 	mov	r1, r8
    b1e8:	e3a02032 	mov	r2, #50	; 0x32
    b1ec:	e4c07001 	strb	r7, [r0], #1
    b1f0:	eb001359 	bl	ff5c <strncpy>
    b1f4:	e1a01006 	mov	r1, r6
    b1f8:	e3a020c8 	mov	r2, #200	; 0xc8
    b1fc:	e3a06000 	mov	r6, #0
    b200:	e2850033 	add	r0, r5, #51	; 0x33
    b204:	e5c56032 	strb	r6, [r5, #50]	; 0x32
    b208:	eb001353 	bl	ff5c <strncpy>
    b20c:	e5940004 	ldr	r0, [r4, #4]
    b210:	e5c560fa 	strb	r6, [r5, #250]	; 0xfa
    b214:	e1500006 	cmp	r0, r6
    b218:	0a000004 	beq	b230 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    b21c:	e28d2004 	add	r2, sp, #4
    b220:	e1a0100d 	mov	r1, sp
    b224:	eb000f61 	bl	efb0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    b228:	e1500006 	cmp	r0, r6
    b22c:	1a000039 	bne	b318 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x158>
    b230:	e3a03000 	mov	r3, #0
    b234:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    b238:	e5853100 	str	r3, [r5, #256]	; 0x100
    b23c:	e5853104 	str	r3, [r5, #260]	; 0x104
    b240:	e59420f0 	ldr	r2, [r4, #240]	; 0xf0
    b244:	e3520000 	cmp	r2, #0
    b248:	1a00002e 	bne	b308 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
    b24c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    b250:	e2831008 	add	r1, r3, #8
    b254:	e3530031 	cmp	r3, #49	; 0x31
    b258:	e7845101 	str	r5, [r4, r1, lsl #2]
    b25c:	e2831001 	add	r1, r3, #1
    b260:	0a00001c 	beq	b2d8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
    b264:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    b268:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    b26c:	e1510000 	cmp	r1, r0
    b270:	0a000007 	beq	b294 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
    b274:	e3520000 	cmp	r2, #0
    b278:	1a000014 	bne	b2d0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
    b27c:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    b280:	e3530000 	cmp	r3, #0
    b284:	0a000000 	beq	b28c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    b288:	e12fff33 	blx	r3
    b28c:	e28dd008 	add	sp, sp, #8
    b290:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b294:	e2833009 	add	r3, r3, #9
    b298:	e3510031 	cmp	r1, #49	; 0x31
    b29c:	e2810001 	add	r0, r1, #1
    b2a0:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    b2a4:	03a03000 	moveq	r3, #0
    b2a8:	058430ec 	streq	r3, [r4, #236]	; 0xec
    b2ac:	1a000010 	bne	b2f4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
    b2b0:	e3520000 	cmp	r2, #0
    b2b4:	1a000011 	bne	b300 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
    b2b8:	e3550000 	cmp	r5, #0
    b2bc:	0affffee 	beq	b27c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    b2c0:	e3a01f42 	mov	r1, #264	; 0x108
    b2c4:	e1a00005 	mov	r0, r5
    b2c8:	eb00158d 	bl	10904 <operator delete(void*, unsigned int)>
    b2cc:	eaffffea 	b	b27c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    b2d0:	eb00180e 	bl	11310 <LeaveCritical>
    b2d4:	eaffffe8 	b	b27c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    b2d8:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    b2dc:	e3a01000 	mov	r1, #0
    b2e0:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    b2e4:	e1530001 	cmp	r3, r1
    b2e8:	1affffe1 	bne	b274 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
    b2ec:	e5945020 	ldr	r5, [r4, #32]
    b2f0:	e3a00001 	mov	r0, #1
    b2f4:	e3520000 	cmp	r2, #0
    b2f8:	e58400ec 	str	r0, [r4, #236]	; 0xec
    b2fc:	0affffed 	beq	b2b8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    b300:	eb001802 	bl	11310 <LeaveCritical>
    b304:	eaffffeb 	b	b2b8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    b308:	e1a00002 	mov	r0, r2
    b30c:	eb0017d4 	bl	11264 <EnterCritical>
    b310:	e59420f0 	ldr	r2, [r4, #240]	; 0xf0
    b314:	eaffffcc 	b	b24c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    b318:	e59d3004 	ldr	r3, [sp, #4]
    b31c:	e3012759 	movw	r2, #5977	; 0x1759
    b320:	e34d21b7 	movt	r2, #53687	; 0xd1b7
    b324:	e59d1000 	ldr	r1, [sp]
    b328:	e5940004 	ldr	r0, [r4, #4]
    b32c:	e58510fc 	str	r1, [r5, #252]	; 0xfc
    b330:	e0832392 	umull	r2, r3, r2, r3
    b334:	e1a036a3 	lsr	r3, r3, #13
    b338:	e5853100 	str	r3, [r5, #256]	; 0x100
    b33c:	eb000ee5 	bl	eed8 <CTimer::GetTimeZone() const>
    b340:	e5850104 	str	r0, [r5, #260]	; 0x104
    b344:	eaffffbd 	b	b240 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0000b348 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    b348:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b34c:	e1a04000 	mov	r4, r0
    b350:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
    b354:	e1a08001 	mov	r8, r1
    b358:	e1a06002 	mov	r6, r2
    b35c:	e1a07003 	mov	r7, r3
    b360:	e3500000 	cmp	r0, #0
    b364:	1a000021 	bne	b3f0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
    b368:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    b36c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    b370:	e15c0003 	cmp	ip, r3
    b374:	0a000027 	beq	b418 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
    b378:	e28c3008 	add	r3, ip, #8
    b37c:	e35c0031 	cmp	ip, #49	; 0x31
    b380:	e28cc001 	add	ip, ip, #1
    b384:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    b388:	03a03000 	moveq	r3, #0
    b38c:	1584c0ec 	strne	ip, [r4, #236]	; 0xec
    b390:	058430ec 	streq	r3, [r4, #236]	; 0xec
    b394:	e3500000 	cmp	r0, #0
    b398:	1a000020 	bne	b420 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd8>
    b39c:	e1a01005 	mov	r1, r5
    b3a0:	e1a00006 	mov	r0, r6
    b3a4:	e4d13001 	ldrb	r3, [r1], #1
    b3a8:	e5c83000 	strb	r3, [r8]
    b3ac:	eb0012df 	bl	ff30 <strcpy>
    b3b0:	e2851033 	add	r1, r5, #51	; 0x33
    b3b4:	e1a00007 	mov	r0, r7
    b3b8:	eb0012dc 	bl	ff30 <strcpy>
    b3bc:	e59d1018 	ldr	r1, [sp, #24]
    b3c0:	e1c52fdc 	ldrd	r2, [r5, #252]	; 0xfc
    b3c4:	e1a00005 	mov	r0, r5
    b3c8:	e5812000 	str	r2, [r1]
    b3cc:	e3a01f42 	mov	r1, #264	; 0x108
    b3d0:	e59d201c 	ldr	r2, [sp, #28]
    b3d4:	e5823000 	str	r3, [r2]
    b3d8:	e59d2020 	ldr	r2, [sp, #32]
    b3dc:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    b3e0:	e5823000 	str	r3, [r2]
    b3e4:	eb001546 	bl	10904 <operator delete(void*, unsigned int)>
    b3e8:	e3a00001 	mov	r0, #1
    b3ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b3f0:	eb00179b 	bl	11264 <EnterCritical>
    b3f4:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    b3f8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    b3fc:	e153000c 	cmp	r3, ip
    b400:	159400f0 	ldrne	r0, [r4, #240]	; 0xf0
    b404:	1affffdb 	bne	b378 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    b408:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    b40c:	e3530000 	cmp	r3, #0
    b410:	0a000000 	beq	b418 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
    b414:	eb0017bd 	bl	11310 <LeaveCritical>
    b418:	e3a00000 	mov	r0, #0
    b41c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b420:	eb0017ba 	bl	11310 <LeaveCritical>
    b424:	eaffffdc 	b	b39c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000b428 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    b428:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    b42c:	e12fff1e 	bx	lr

0000b430 <CLogger::RegisterPanicHandler(void (*)())>:
    b430:	e58010f8 	str	r1, [r0, #248]	; 0xf8
    b434:	e12fff1e 	bx	lr

0000b438 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    b438:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b43c:	e1a07003 	mov	r7, r3
    b440:	e1a04000 	mov	r4, r0
    b444:	e24dd024 	sub	sp, sp, #36	; 0x24
    b448:	e1a05002 	mov	r5, r2
    b44c:	e1a0000d 	mov	r0, sp
    b450:	e1a06001 	mov	r6, r1
    b454:	eb00085c 	bl	d5cc <CString::CString()>
    b458:	e1a01007 	mov	r1, r7
    b45c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    b460:	e1a0000d 	mov	r0, sp
    b464:	eb000aae 	bl	df24 <CString::FormatV(char const*, std::__va_list)>
    b468:	e1a0000d 	mov	r0, sp
    b46c:	eb00088e 	bl	d6ac <CString::operator char const*() const>
    b470:	e1a02005 	mov	r2, r5
    b474:	e1a03000 	mov	r3, r0
    b478:	e1a01006 	mov	r1, r6
    b47c:	e1a00004 	mov	r0, r4
    b480:	ebffff4e 	bl	b1c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    b484:	e5943000 	ldr	r3, [r4]
    b488:	e1550003 	cmp	r5, r3
    b48c:	8a000029 	bhi	b538 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    b490:	e28d0010 	add	r0, sp, #16
    b494:	eb00084c 	bl	d5cc <CString::CString()>
    b498:	e3550000 	cmp	r5, #0
    b49c:	0a000029 	beq	b548 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
    b4a0:	e5940004 	ldr	r0, [r4, #4]
    b4a4:	e3500000 	cmp	r0, #0
    b4a8:	0a00000d 	beq	b4e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    b4ac:	eb000f2a 	bl	f15c <CTimer::GetTimeString()>
    b4b0:	e2505000 	subs	r5, r0, #0
    b4b4:	0a00000a 	beq	b4e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    b4b8:	eb00087b 	bl	d6ac <CString::operator char const*() const>
    b4bc:	e1a01000 	mov	r1, r0
    b4c0:	e28d0010 	add	r0, sp, #16
    b4c4:	eb0008ba 	bl	d7b4 <CString::Append(char const*)>
    b4c8:	e28d0010 	add	r0, sp, #16
    b4cc:	e59f113c 	ldr	r1, [pc, #316]	; b610 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    b4d0:	eb0008b7 	bl	d7b4 <CString::Append(char const*)>
    b4d4:	e5953000 	ldr	r3, [r5]
    b4d8:	e1a00005 	mov	r0, r5
    b4dc:	e5933004 	ldr	r3, [r3, #4]
    b4e0:	e12fff33 	blx	r3
    b4e4:	e1a01006 	mov	r1, r6
    b4e8:	e28d0010 	add	r0, sp, #16
    b4ec:	eb0008b0 	bl	d7b4 <CString::Append(char const*)>
    b4f0:	e59f111c 	ldr	r1, [pc, #284]	; b614 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    b4f4:	e28d0010 	add	r0, sp, #16
    b4f8:	eb0008ad 	bl	d7b4 <CString::Append(char const*)>
    b4fc:	e1a0000d 	mov	r0, sp
    b500:	eb000869 	bl	d6ac <CString::operator char const*() const>
    b504:	e1a01000 	mov	r1, r0
    b508:	e28d0010 	add	r0, sp, #16
    b50c:	eb0008a8 	bl	d7b4 <CString::Append(char const*)>
    b510:	e59f1100 	ldr	r1, [pc, #256]	; b618 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    b514:	e28d0010 	add	r0, sp, #16
    b518:	eb0008a5 	bl	d7b4 <CString::Append(char const*)>
    b51c:	e28d0010 	add	r0, sp, #16
    b520:	eb000861 	bl	d6ac <CString::operator char const*() const>
    b524:	e1a01000 	mov	r1, r0
    b528:	e1a00004 	mov	r0, r4
    b52c:	ebfffe7a 	bl	af1c <CLogger::Write(char const*)>
    b530:	e28d0010 	add	r0, sp, #16
    b534:	eb0007f1 	bl	d500 <CString::~CString()>
    b538:	e1a0000d 	mov	r0, sp
    b53c:	eb0007ef 	bl	d500 <CString::~CString()>
    b540:	e28dd024 	add	sp, sp, #36	; 0x24
    b544:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b548:	e28d0010 	add	r0, sp, #16
    b54c:	e304189c 	movw	r1, #18588	; 0x489c
    b550:	e3401001 	movt	r1, #1
    b554:	eb00085a 	bl	d6c4 <CString::operator=(char const*)>
    b558:	e5940004 	ldr	r0, [r4, #4]
    b55c:	e3500000 	cmp	r0, #0
    b560:	0a00000d 	beq	b59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    b564:	eb000efc 	bl	f15c <CTimer::GetTimeString()>
    b568:	e2505000 	subs	r5, r0, #0
    b56c:	0a00000a 	beq	b59c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    b570:	eb00084d 	bl	d6ac <CString::operator char const*() const>
    b574:	e1a01000 	mov	r1, r0
    b578:	e28d0010 	add	r0, sp, #16
    b57c:	eb00088c 	bl	d7b4 <CString::Append(char const*)>
    b580:	e28d0010 	add	r0, sp, #16
    b584:	e59f1084 	ldr	r1, [pc, #132]	; b610 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    b588:	eb000889 	bl	d7b4 <CString::Append(char const*)>
    b58c:	e5953000 	ldr	r3, [r5]
    b590:	e1a00005 	mov	r0, r5
    b594:	e5933004 	ldr	r3, [r3, #4]
    b598:	e12fff33 	blx	r3
    b59c:	e1a01006 	mov	r1, r6
    b5a0:	e28d0010 	add	r0, sp, #16
    b5a4:	eb000882 	bl	d7b4 <CString::Append(char const*)>
    b5a8:	e59f1064 	ldr	r1, [pc, #100]	; b614 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    b5ac:	e28d0010 	add	r0, sp, #16
    b5b0:	eb00087f 	bl	d7b4 <CString::Append(char const*)>
    b5b4:	e1a0000d 	mov	r0, sp
    b5b8:	eb00083b 	bl	d6ac <CString::operator char const*() const>
    b5bc:	e1a01000 	mov	r1, r0
    b5c0:	e28d0010 	add	r0, sp, #16
    b5c4:	eb00087a 	bl	d7b4 <CString::Append(char const*)>
    b5c8:	e59f104c 	ldr	r1, [pc, #76]	; b61c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    b5cc:	e28d0010 	add	r0, sp, #16
    b5d0:	eb000877 	bl	d7b4 <CString::Append(char const*)>
    b5d4:	e59f103c 	ldr	r1, [pc, #60]	; b618 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    b5d8:	e28d0010 	add	r0, sp, #16
    b5dc:	eb000874 	bl	d7b4 <CString::Append(char const*)>
    b5e0:	e28d0010 	add	r0, sp, #16
    b5e4:	eb000830 	bl	d6ac <CString::operator char const*() const>
    b5e8:	e1a01000 	mov	r1, r0
    b5ec:	e1a00004 	mov	r0, r4
    b5f0:	ebfffe49 	bl	af1c <CLogger::Write(char const*)>
    b5f4:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    b5f8:	e3530000 	cmp	r3, #0
    b5fc:	0a000000 	beq	b604 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1cc>
    b600:	e12fff33 	blx	r3
    b604:	e3a000ff 	mov	r0, #255	; 0xff
    b608:	eb000d8d 	bl	ec44 <set_qemu_exit_status>
    b60c:	eb000d8d 	bl	ec48 <halt>
    b610:	000148b4 	.word	0x000148b4
    b614:	000148a4 	.word	0x000148a4
    b618:	000148b0 	.word	0x000148b0
    b61c:	000148a8 	.word	0x000148a8

0000b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    b620:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    b624:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b628:	e24dd010 	sub	sp, sp, #16
    b62c:	e28dc018 	add	ip, sp, #24
    b630:	e59d3014 	ldr	r3, [sp, #20]
    b634:	e58dc000 	str	ip, [sp]
    b638:	e58dc00c 	str	ip, [sp, #12]
    b63c:	ebffff7d 	bl	b438 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    b640:	e28dd010 	add	sp, sp, #16
    b644:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    b648:	e28dd004 	add	sp, sp, #4
    b64c:	e12fff1e 	bx	lr

0000b650 <CLogger::Initialize(CDevice*)>:
    b650:	e92d4010 	push	{r4, lr}
    b654:	e1a04000 	mov	r4, r0
    b658:	e24dd008 	sub	sp, sp, #8
    b65c:	e580100c 	str	r1, [r0, #12]
    b660:	eb000214 	bl	beb8 <CMachineInfo::Get()>
    b664:	eb000125 	bl	bb00 <CMachineInfo::GetMachineName() const>
    b668:	e304189c 	movw	r1, #18588	; 0x489c
    b66c:	e3401001 	movt	r1, #1
    b670:	e1a0c000 	mov	ip, r0
    b674:	e281301c 	add	r3, r1, #28
    b678:	e1a00004 	mov	r0, r4
    b67c:	e3a02003 	mov	r2, #3
    b680:	e2811038 	add	r1, r1, #56	; 0x38
    b684:	e58dc000 	str	ip, [sp]
    b688:	ebffffe4 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b68c:	e3a00001 	mov	r0, #1
    b690:	e28dd008 	add	sp, sp, #8
    b694:	e8bd8010 	pop	{r4, pc}

0000b698 <CMachineInfo::CMachineInfo()>:
    b698:	e92d4810 	push	{r4, fp, lr}
    b69c:	e28db008 	add	fp, sp, #8
    b6a0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    b6a4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    b6a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6ac:	e3a02000 	mov	r2, #0
    b6b0:	e5832000 	str	r2, [r3]
    b6b4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6b8:	e3a02012 	mov	r2, #18
    b6bc:	e5c32004 	strb	r2, [r3, #4]
    b6c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6c4:	e3a02000 	mov	r2, #0
    b6c8:	e5832008 	str	r2, [r3, #8]
    b6cc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6d0:	e3a02000 	mov	r2, #0
    b6d4:	e583200c 	str	r2, [r3, #12]
    b6d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6dc:	e3a02004 	mov	r2, #4
    b6e0:	e5c32010 	strb	r2, [r3, #16]
    b6e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6e8:	e3a02000 	mov	r2, #0
    b6ec:	e5832014 	str	r2, [r3, #20]
    b6f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b6f4:	e3012f35 	movw	r2, #7989	; 0x1f35
    b6f8:	e1c321b8 	strh	r2, [r3, #24]
    b6fc:	e3063920 	movw	r3, #26912	; 0x6920
    b700:	e3403001 	movt	r3, #1
    b704:	e5933000 	ldr	r3, [r3]
    b708:	e3530000 	cmp	r3, #0
    b70c:	0a000024 	beq	b7a4 <CMachineInfo::CMachineInfo()+0x10c>
    b710:	e3063920 	movw	r3, #26912	; 0x6920
    b714:	e3403001 	movt	r3, #1
    b718:	e5933000 	ldr	r3, [r3]
    b71c:	e5932000 	ldr	r2, [r3]
    b720:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b724:	e5832000 	str	r2, [r3]
    b728:	e3063920 	movw	r3, #26912	; 0x6920
    b72c:	e3403001 	movt	r3, #1
    b730:	e5933000 	ldr	r3, [r3]
    b734:	e5d32004 	ldrb	r2, [r3, #4]
    b738:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b73c:	e5c32004 	strb	r2, [r3, #4]
    b740:	e3063920 	movw	r3, #26912	; 0x6920
    b744:	e3403001 	movt	r3, #1
    b748:	e5933000 	ldr	r3, [r3]
    b74c:	e5932008 	ldr	r2, [r3, #8]
    b750:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b754:	e5832008 	str	r2, [r3, #8]
    b758:	e3063920 	movw	r3, #26912	; 0x6920
    b75c:	e3403001 	movt	r3, #1
    b760:	e5933000 	ldr	r3, [r3]
    b764:	e593200c 	ldr	r2, [r3, #12]
    b768:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b76c:	e583200c 	str	r2, [r3, #12]
    b770:	e3063920 	movw	r3, #26912	; 0x6920
    b774:	e3403001 	movt	r3, #1
    b778:	e5933000 	ldr	r3, [r3]
    b77c:	e5d32010 	ldrb	r2, [r3, #16]
    b780:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b784:	e5c32010 	strb	r2, [r3, #16]
    b788:	e3063920 	movw	r3, #26912	; 0x6920
    b78c:	e3403001 	movt	r3, #1
    b790:	e5933000 	ldr	r3, [r3]
    b794:	e5932014 	ldr	r2, [r3, #20]
    b798:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b79c:	e5832014 	str	r2, [r3, #20]
    b7a0:	ea0000c9 	b	bacc <CMachineInfo::CMachineInfo()+0x434>
    b7a4:	e3063920 	movw	r3, #26912	; 0x6920
    b7a8:	e3403001 	movt	r3, #1
    b7ac:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
    b7b0:	e5832000 	str	r2, [r3]
    b7b4:	e24b3020 	sub	r3, fp, #32
    b7b8:	e3a01001 	mov	r1, #1
    b7bc:	e1a00003 	mov	r0, r3
    b7c0:	eb0019ce 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    b7c4:	e24b2030 	sub	r2, fp, #48	; 0x30
    b7c8:	e24b0020 	sub	r0, fp, #32
    b7cc:	e3a03000 	mov	r3, #0
    b7d0:	e58d3000 	str	r3, [sp]
    b7d4:	e3a03010 	mov	r3, #16
    b7d8:	e3a01001 	mov	r1, #1
    b7dc:	e3401006 	movt	r1, #6
    b7e0:	eb001a0c 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b7e4:	e1a03000 	mov	r3, r0
    b7e8:	e3530000 	cmp	r3, #0
    b7ec:	0a000003 	beq	b800 <CMachineInfo::CMachineInfo()+0x168>
    b7f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    b7f4:	e6ff2073 	uxth	r2, r3
    b7f8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b7fc:	e1c321b8 	strh	r2, [r3, #24]
    b800:	e24b2040 	sub	r2, fp, #64	; 0x40
    b804:	e24b0020 	sub	r0, fp, #32
    b808:	e3a03000 	mov	r3, #0
    b80c:	e58d3000 	str	r3, [sp]
    b810:	e3a03010 	mov	r3, #16
    b814:	e3a01002 	mov	r1, #2
    b818:	e3401001 	movt	r1, #1
    b81c:	eb0019fd 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b820:	e1a03000 	mov	r3, r0
    b824:	e2233001 	eor	r3, r3, #1
    b828:	e6ef3073 	uxtb	r3, r3
    b82c:	e3530000 	cmp	r3, #0
    b830:	0a000001 	beq	b83c <CMachineInfo::CMachineInfo()+0x1a4>
    b834:	e3a04000 	mov	r4, #0
    b838:	ea00009f 	b	babc <CMachineInfo::CMachineInfo()+0x424>
    b83c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    b840:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b844:	e5832000 	str	r2, [r3]
    b848:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b84c:	e5933000 	ldr	r3, [r3]
    b850:	e2033502 	and	r3, r3, #8388608	; 0x800000
    b854:	e3530000 	cmp	r3, #0
    b858:	0a000061 	beq	b9e4 <CMachineInfo::CMachineInfo()+0x34c>
    b85c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b860:	e5933000 	ldr	r3, [r3]
    b864:	e1a03223 	lsr	r3, r3, #4
    b868:	e6ef3073 	uxtb	r3, r3
    b86c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    b870:	e3a03000 	mov	r3, #0
    b874:	e50b3010 	str	r3, [fp, #-16]
    b878:	e51b3010 	ldr	r3, [fp, #-16]
    b87c:	e353000f 	cmp	r3, #15
    b880:	8a00000e 	bhi	b8c0 <CMachineInfo::CMachineInfo()+0x228>
    b884:	e30438dc 	movw	r3, #18652	; 0x48dc
    b888:	e3403001 	movt	r3, #1
    b88c:	e51b2010 	ldr	r2, [fp, #-16]
    b890:	e3a0100c 	mov	r1, #12
    b894:	e0020291 	mul	r2, r1, r2
    b898:	e0833002 	add	r3, r3, r2
    b89c:	e5933000 	ldr	r3, [r3]
    b8a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    b8a4:	e1520003 	cmp	r2, r3
    b8a8:	0a000003 	beq	b8bc <CMachineInfo::CMachineInfo()+0x224>
    b8ac:	e51b3010 	ldr	r3, [fp, #-16]
    b8b0:	e2833001 	add	r3, r3, #1
    b8b4:	e50b3010 	str	r3, [fp, #-16]
    b8b8:	eaffffee 	b	b878 <CMachineInfo::CMachineInfo()+0x1e0>
    b8bc:	e320f000 	nop	{0}
    b8c0:	e51b3010 	ldr	r3, [fp, #-16]
    b8c4:	e353000f 	cmp	r3, #15
    b8c8:	9a000001 	bls	b8d4 <CMachineInfo::CMachineInfo()+0x23c>
    b8cc:	e3a04000 	mov	r4, #0
    b8d0:	ea000079 	b	babc <CMachineInfo::CMachineInfo()+0x424>
    b8d4:	e30438dc 	movw	r3, #18652	; 0x48dc
    b8d8:	e3403001 	movt	r3, #1
    b8dc:	e51b2010 	ldr	r2, [fp, #-16]
    b8e0:	e3a0100c 	mov	r1, #12
    b8e4:	e0020291 	mul	r2, r1, r2
    b8e8:	e0833002 	add	r3, r3, r2
    b8ec:	e2833004 	add	r3, r3, #4
    b8f0:	e5d32000 	ldrb	r2, [r3]
    b8f4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b8f8:	e5c32004 	strb	r2, [r3, #4]
    b8fc:	e30438dc 	movw	r3, #18652	; 0x48dc
    b900:	e3403001 	movt	r3, #1
    b904:	e51b2010 	ldr	r2, [fp, #-16]
    b908:	e3a0100c 	mov	r1, #12
    b90c:	e0020291 	mul	r2, r1, r2
    b910:	e0833002 	add	r3, r3, r2
    b914:	e2833008 	add	r3, r3, #8
    b918:	e5932000 	ldr	r2, [r3]
    b91c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b920:	e5832008 	str	r2, [r3, #8]
    b924:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b928:	e5933000 	ldr	r3, [r3]
    b92c:	e203300f 	and	r3, r3, #15
    b930:	e2832001 	add	r2, r3, #1
    b934:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b938:	e583200c 	str	r2, [r3, #12]
    b93c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b940:	e5933000 	ldr	r3, [r3]
    b944:	e1a03623 	lsr	r3, r3, #12
    b948:	e6ef3073 	uxtb	r3, r3
    b94c:	e203300f 	and	r3, r3, #15
    b950:	e6ef2073 	uxtb	r2, r3
    b954:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b958:	e5c32010 	strb	r2, [r3, #16]
    b95c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b960:	e5933000 	ldr	r3, [r3]
    b964:	e1a03a23 	lsr	r3, r3, #20
    b968:	e2033007 	and	r3, r3, #7
    b96c:	e3a02c01 	mov	r2, #256	; 0x100
    b970:	e1a03312 	lsl	r3, r2, r3
    b974:	e1a02003 	mov	r2, r3
    b978:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b97c:	e5832014 	str	r2, [r3, #20]
    b980:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b984:	e5d33010 	ldrb	r3, [r3, #16]
    b988:	e3530003 	cmp	r3, #3
    b98c:	9a000002 	bls	b99c <CMachineInfo::CMachineInfo()+0x304>
    b990:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b994:	e3a02004 	mov	r2, #4
    b998:	e5c32010 	strb	r2, [r3, #16]
    b99c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b9a0:	e5d33004 	ldrb	r3, [r3, #4]
    b9a4:	e3530003 	cmp	r3, #3
    b9a8:	1a000042 	bne	bab8 <CMachineInfo::CMachineInfo()+0x420>
    b9ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b9b0:	e5933014 	ldr	r3, [r3, #20]
    b9b4:	e3530c01 	cmp	r3, #256	; 0x100
    b9b8:	1a00003e 	bne	bab8 <CMachineInfo::CMachineInfo()+0x420>
    b9bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b9c0:	e593300c 	ldr	r3, [r3, #12]
    b9c4:	e3530001 	cmp	r3, #1
    b9c8:	1a000001 	bne	b9d4 <CMachineInfo::CMachineInfo()+0x33c>
    b9cc:	e3a02001 	mov	r2, #1
    b9d0:	ea000000 	b	b9d8 <CMachineInfo::CMachineInfo()+0x340>
    b9d4:	e3a02002 	mov	r2, #2
    b9d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    b9dc:	e5c32004 	strb	r2, [r3, #4]
    b9e0:	ea000034 	b	bab8 <CMachineInfo::CMachineInfo()+0x420>
    b9e4:	e3a03000 	mov	r3, #0
    b9e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    b9ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    b9f0:	e3530010 	cmp	r3, #16
    b9f4:	8a00000c 	bhi	ba2c <CMachineInfo::CMachineInfo()+0x394>
    b9f8:	e304399c 	movw	r3, #18844	; 0x499c
    b9fc:	e3403001 	movt	r3, #1
    ba00:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    ba04:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    ba08:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ba0c:	e5933000 	ldr	r3, [r3]
    ba10:	e1520003 	cmp	r2, r3
    ba14:	0a000003 	beq	ba28 <CMachineInfo::CMachineInfo()+0x390>
    ba18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ba1c:	e2833001 	add	r3, r3, #1
    ba20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ba24:	eafffff0 	b	b9ec <CMachineInfo::CMachineInfo()+0x354>
    ba28:	e320f000 	nop	{0}
    ba2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ba30:	e3530010 	cmp	r3, #16
    ba34:	9a000001 	bls	ba40 <CMachineInfo::CMachineInfo()+0x3a8>
    ba38:	e3a04000 	mov	r4, #0
    ba3c:	ea00001e 	b	babc <CMachineInfo::CMachineInfo()+0x424>
    ba40:	e304299c 	movw	r2, #18844	; 0x499c
    ba44:	e3402001 	movt	r2, #1
    ba48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ba4c:	e1a03203 	lsl	r3, r3, #4
    ba50:	e0823003 	add	r3, r2, r3
    ba54:	e5d32004 	ldrb	r2, [r3, #4]
    ba58:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ba5c:	e5c32004 	strb	r2, [r3, #4]
    ba60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ba64:	e3a02001 	mov	r2, #1
    ba68:	e5832008 	str	r2, [r3, #8]
    ba6c:	e304299c 	movw	r2, #18844	; 0x499c
    ba70:	e3402001 	movt	r2, #1
    ba74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ba78:	e1a03203 	lsl	r3, r3, #4
    ba7c:	e0823003 	add	r3, r2, r3
    ba80:	e5932008 	ldr	r2, [r3, #8]
    ba84:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ba88:	e583200c 	str	r2, [r3, #12]
    ba8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ba90:	e3a02000 	mov	r2, #0
    ba94:	e5c32010 	strb	r2, [r3, #16]
    ba98:	e304299c 	movw	r2, #18844	; 0x499c
    ba9c:	e3402001 	movt	r2, #1
    baa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    baa4:	e1a03203 	lsl	r3, r3, #4
    baa8:	e0823003 	add	r3, r2, r3
    baac:	e593200c 	ldr	r2, [r3, #12]
    bab0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    bab4:	e5832014 	str	r2, [r3, #20]
    bab8:	e3a04001 	mov	r4, #1
    babc:	e24b3020 	sub	r3, fp, #32
    bac0:	e1a00003 	mov	r0, r3
    bac4:	eb001914 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
    bac8:	e3540001 	cmp	r4, #1
    bacc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    bad0:	e1a00003 	mov	r0, r3
    bad4:	e24bd008 	sub	sp, fp, #8
    bad8:	e8bd8810 	pop	{r4, fp, pc}

0000badc <CMachineInfo::~CMachineInfo()>:
    badc:	e3063920 	movw	r3, #26912	; 0x6920
    bae0:	e3403001 	movt	r3, #1
    bae4:	e5932000 	ldr	r2, [r3]
    bae8:	e1520000 	cmp	r2, r0
    baec:	03a02000 	moveq	r2, #0
    baf0:	05832000 	streq	r2, [r3]
    baf4:	e12fff1e 	bx	lr

0000baf8 <CMachineInfo::GetMachineModel() const>:
    baf8:	e5d00004 	ldrb	r0, [r0, #4]
    bafc:	e12fff1e 	bx	lr

0000bb00 <CMachineInfo::GetMachineName() const>:
    bb00:	e5d02004 	ldrb	r2, [r0, #4]
    bb04:	e3043aac 	movw	r3, #19116	; 0x4aac
    bb08:	e3403001 	movt	r3, #1
    bb0c:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    bb10:	e12fff1e 	bx	lr

0000bb14 <CMachineInfo::GetModelMajor() const>:
    bb14:	e5900008 	ldr	r0, [r0, #8]
    bb18:	e12fff1e 	bx	lr

0000bb1c <CMachineInfo::GetModelRevision() const>:
    bb1c:	e590000c 	ldr	r0, [r0, #12]
    bb20:	e12fff1e 	bx	lr

0000bb24 <CMachineInfo::GetSoCType() const>:
    bb24:	e5d00010 	ldrb	r0, [r0, #16]
    bb28:	e12fff1e 	bx	lr

0000bb2c <CMachineInfo::GetRAMSize() const>:
    bb2c:	e5900014 	ldr	r0, [r0, #20]
    bb30:	e12fff1e 	bx	lr

0000bb34 <CMachineInfo::GetSoCName() const>:
    bb34:	e5d02010 	ldrb	r2, [r0, #16]
    bb38:	e3043aac 	movw	r3, #19116	; 0x4aac
    bb3c:	e3403001 	movt	r3, #1
    bb40:	e0833102 	add	r3, r3, r2, lsl #2
    bb44:	e593004c 	ldr	r0, [r3, #76]	; 0x4c
    bb48:	e12fff1e 	bx	lr

0000bb4c <CMachineInfo::GetRevisionRaw() const>:
    bb4c:	e5900000 	ldr	r0, [r0]
    bb50:	e12fff1e 	bx	lr

0000bb54 <CMachineInfo::GetActLEDInfo() const>:
    bb54:	e5d02004 	ldrb	r2, [r0, #4]
    bb58:	e3043aac 	movw	r3, #19116	; 0x4aac
    bb5c:	e3403001 	movt	r3, #1
    bb60:	e0833102 	add	r3, r3, r2, lsl #2
    bb64:	e5930060 	ldr	r0, [r3, #96]	; 0x60
    bb68:	e12fff1e 	bx	lr

0000bb6c <CMachineInfo::GetClockRate(unsigned int) const>:
    bb6c:	e92d4030 	push	{r4, r5, lr}
    bb70:	e1a04001 	mov	r4, r1
    bb74:	e1a05000 	mov	r5, r0
    bb78:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    bb7c:	e3a01000 	mov	r1, #0
    bb80:	e28d000c 	add	r0, sp, #12
    bb84:	eb0018dd 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    bb88:	e3a03014 	mov	r3, #20
    bb8c:	e3a01004 	mov	r1, #4
    bb90:	e08d2003 	add	r2, sp, r3
    bb94:	e58d1000 	str	r1, [sp]
    bb98:	e28d000c 	add	r0, sp, #12
    bb9c:	e3a01002 	mov	r1, #2
    bba0:	e3401003 	movt	r1, #3
    bba4:	e58d4020 	str	r4, [sp, #32]
    bba8:	eb00191a 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bbac:	e3500000 	cmp	r0, #0
    bbb0:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    bbb4:	1a000018 	bne	bc1c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    bbb8:	e2444001 	sub	r4, r4, #1
    bbbc:	e354000d 	cmp	r4, #13
    bbc0:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    bbc4:	ea00001e 	b	bc44 <CMachineInfo::GetClockRate(unsigned int) const+0xd8>
    bbc8:	0000bc54 	.word	0x0000bc54
    bbcc:	0000bc38 	.word	0x0000bc38
    bbd0:	0000bc44 	.word	0x0000bc44
    bbd4:	0000bc00 	.word	0x0000bc00
    bbd8:	0000bc44 	.word	0x0000bc44
    bbdc:	0000bc44 	.word	0x0000bc44
    bbe0:	0000bc44 	.word	0x0000bc44
    bbe4:	0000bc44 	.word	0x0000bc44
    bbe8:	0000bc44 	.word	0x0000bc44
    bbec:	0000bc44 	.word	0x0000bc44
    bbf0:	0000bc44 	.word	0x0000bc44
    bbf4:	0000bc44 	.word	0x0000bc44
    bbf8:	0000bc44 	.word	0x0000bc44
    bbfc:	0000bc30 	.word	0x0000bc30
    bc00:	e5952008 	ldr	r2, [r5, #8]
    bc04:	e3a03ca3 	mov	r3, #41728	; 0xa300
    bc08:	e34131e1 	movt	r3, #4577	; 0x11e1
    bc0c:	e30b4280 	movw	r4, #45696	; 0xb280
    bc10:	e3404ee6 	movt	r4, #3814	; 0xee6
    bc14:	e3520002 	cmp	r2, #2
    bc18:	81a04003 	movhi	r4, r3
    bc1c:	e28d000c 	add	r0, sp, #12
    bc20:	eb0018bd 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
    bc24:	e1a00004 	mov	r0, r4
    bc28:	e28dd02c 	add	sp, sp, #44	; 0x2c
    bc2c:	e8bd8030 	pop	{r4, r5, pc}
    bc30:	e3a04000 	mov	r4, #0
    bc34:	eafffff8 	b	bc1c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    bc38:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    bc3c:	e34042dc 	movt	r4, #732	; 0x2dc
    bc40:	eafffff5 	b	bc1c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    bc44:	e59f1014 	ldr	r1, [pc, #20]	; bc60 <CMachineInfo::GetClockRate(unsigned int) const+0xf4>
    bc48:	e3002151 	movw	r2, #337	; 0x151
    bc4c:	e2810010 	add	r0, r1, #16
    bc50:	ebfff608 	bl	9478 <assertion_failed>
    bc54:	e3a04ce1 	mov	r4, #57600	; 0xe100
    bc58:	e34045f5 	movt	r4, #1525	; 0x5f5
    bc5c:	eaffffee 	b	bc1c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
    bc60:	00014b58 	.word	0x00014b58

0000bc64 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    bc64:	e3510036 	cmp	r1, #54	; 0x36
    bc68:	0a000006 	beq	bc88 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    bc6c:	e3510037 	cmp	r1, #55	; 0x37
    bc70:	1a00000e 	bne	bcb0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    bc74:	e5d03004 	ldrb	r3, [r0, #4]
    bc78:	e3530003 	cmp	r3, #3
    bc7c:	83a00028 	movhi	r0, #40	; 0x28
    bc80:	93a0002d 	movls	r0, #45	; 0x2d
    bc84:	e12fff1e 	bx	lr
    bc88:	e5d03004 	ldrb	r3, [r0, #4]
    bc8c:	e3530003 	cmp	r3, #3
    bc90:	9a000004 	bls	bca8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    bc94:	e5903008 	ldr	r3, [r0, #8]
    bc98:	e3530003 	cmp	r3, #3
    bc9c:	33a0002d 	movcc	r0, #45	; 0x2d
    bca0:	23a00029 	movcs	r0, #41	; 0x29
    bca4:	e12fff1e 	bx	lr
    bca8:	e3a00028 	mov	r0, #40	; 0x28
    bcac:	e12fff1e 	bx	lr
    bcb0:	e59f100c 	ldr	r1, [pc, #12]	; bcc4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    bcb4:	e3002192 	movw	r2, #402	; 0x192
    bcb8:	e92d4010 	push	{r4, lr}
    bcbc:	e2810010 	add	r0, r1, #16
    bcc0:	ebfff5ec 	bl	9478 <assertion_failed>
    bcc4:	00014b58 	.word	0x00014b58

0000bcc8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    bcc8:	e5903008 	ldr	r3, [r0, #8]
    bccc:	e3530003 	cmp	r3, #3
    bcd0:	8a000006 	bhi	bcf0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    bcd4:	e3510001 	cmp	r1, #1
    bcd8:	0a00000b 	beq	bd0c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    bcdc:	e3510006 	cmp	r1, #6
    bce0:	e3a00c65 	mov	r0, #25856	; 0x6500
    bce4:	e3410dcd 	movt	r0, #7629	; 0x1dcd
    bce8:	13a00000 	movne	r0, #0
    bcec:	e12fff1e 	bx	lr
    bcf0:	e3510001 	cmp	r1, #1
    bcf4:	0a000007 	beq	bd18 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    bcf8:	e3510006 	cmp	r1, #6
    bcfc:	e3a00d5e 	mov	r0, #6016	; 0x1780
    bd00:	e3420cb4 	movt	r0, #11444	; 0x2cb4
    bd04:	13a00000 	movne	r0, #0
    bd08:	e12fff1e 	bx	lr
    bd0c:	e3a00b3e 	mov	r0, #63488	; 0xf800
    bd10:	e3400124 	movt	r0, #292	; 0x124
    bd14:	e12fff1e 	bx	lr
    bd18:	e30f0980 	movw	r0, #63872	; 0xf980
    bd1c:	e3400337 	movt	r0, #823	; 0x337
    bd20:	e12fff1e 	bx	lr

0000bd24 <CMachineInfo::GetDevice(TDeviceId) const>:
    bd24:	e3510000 	cmp	r1, #0
    bd28:	1a000003 	bne	bd3c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    bd2c:	e5d00004 	ldrb	r0, [r0, #4]
    bd30:	e2500001 	subs	r0, r0, #1
    bd34:	13a00001 	movne	r0, #1
    bd38:	e12fff1e 	bx	lr
    bd3c:	e59f100c 	ldr	r1, [pc, #12]	; bd50 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    bd40:	e30021cd 	movw	r2, #461	; 0x1cd
    bd44:	e92d4010 	push	{r4, lr}
    bd48:	e2810010 	add	r0, r1, #16
    bd4c:	ebfff5c9 	bl	9478 <assertion_failed>
    bd50:	00014b58 	.word	0x00014b58

0000bd54 <CMachineInfo::ArePWMChannelsSwapped() const>:
    bd54:	e5d03004 	ldrb	r3, [r0, #4]
    bd58:	e2430006 	sub	r0, r3, #6
    bd5c:	e3500001 	cmp	r0, #1
    bd60:	83530003 	cmphi	r3, #3
    bd64:	83a00001 	movhi	r0, #1
    bd68:	93a00000 	movls	r0, #0
    bd6c:	e12fff1e 	bx	lr

0000bd70 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    bd70:	e3063920 	movw	r3, #26912	; 0x6920
    bd74:	e3403001 	movt	r3, #1
    bd78:	e1a02000 	mov	r2, r0
    bd7c:	e92d4010 	push	{r4, lr}
    bd80:	e5933000 	ldr	r3, [r3]
    bd84:	ea000002 	b	bd94 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
    bd88:	e1530002 	cmp	r3, r2
    bd8c:	0a000006 	beq	bdac <CMachineInfo::AllocateDMAChannel(unsigned int)+0x3c>
    bd90:	e1a02003 	mov	r2, r3
    bd94:	e3530000 	cmp	r3, #0
    bd98:	1afffffa 	bne	bd88 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x18>
    bd9c:	e59f108c 	ldr	r1, [pc, #140]	; be30 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    bda0:	e30021dd 	movw	r2, #477	; 0x1dd
    bda4:	e2810014 	add	r0, r1, #20
    bda8:	ebfff5b2 	bl	9478 <assertion_failed>
    bdac:	e3d1000f 	bics	r0, r1, #15
    bdb0:	1a00000a 	bne	bde0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
    bdb4:	e351000b 	cmp	r1, #11
    bdb8:	8a000018 	bhi	be20 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb0>
    bdbc:	e1d321b8 	ldrh	r2, [r3, #24]
    bdc0:	e1a00152 	asr	r0, r2, r1
    bdc4:	e3100001 	tst	r0, #1
    bdc8:	0a00000d 	beq	be04 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
    bdcc:	e3a0c001 	mov	ip, #1
    bdd0:	e1a00001 	mov	r0, r1
    bdd4:	e1c2111c 	bic	r1, r2, ip, lsl r1
    bdd8:	e1c311b8 	strh	r1, [r3, #24]
    bddc:	e8bd8010 	pop	{r4, pc}
    bde0:	e3510081 	cmp	r1, #129	; 0x81
    bde4:	e1d2c1b8 	ldrh	ip, [r2, #24]
    bde8:	03a03006 	moveq	r3, #6
    bdec:	13a0300b 	movne	r3, #11
    bdf0:	e1a0135c 	asr	r1, ip, r3
    bdf4:	e3110001 	tst	r1, #1
    bdf8:	1a000003 	bne	be0c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
    bdfc:	e2533001 	subs	r3, r3, #1
    be00:	2afffffa 	bcs	bdf0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x80>
    be04:	e3a00080 	mov	r0, #128	; 0x80
    be08:	e8bd8010 	pop	{r4, pc}
    be0c:	e3a01001 	mov	r1, #1
    be10:	e1a00003 	mov	r0, r3
    be14:	e1cc3311 	bic	r3, ip, r1, lsl r3
    be18:	e1c231b8 	strh	r3, [r2, #24]
    be1c:	e8bd8010 	pop	{r4, pc}
    be20:	e59f1008 	ldr	r1, [pc, #8]	; be30 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    be24:	e30021e6 	movw	r2, #486	; 0x1e6
    be28:	e2810024 	add	r0, r1, #36	; 0x24
    be2c:	ebfff591 	bl	9478 <assertion_failed>
    be30:	00014b58 	.word	0x00014b58

0000be34 <CMachineInfo::FreeDMAChannel(unsigned int)>:
    be34:	e3063920 	movw	r3, #26912	; 0x6920
    be38:	e3403001 	movt	r3, #1
    be3c:	e92d4010 	push	{r4, lr}
    be40:	e5933000 	ldr	r3, [r3]
    be44:	ea000002 	b	be54 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
    be48:	e1530000 	cmp	r3, r0
    be4c:	0a000006 	beq	be6c <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
    be50:	e1a00003 	mov	r0, r3
    be54:	e3530000 	cmp	r3, #0
    be58:	1afffffa 	bne	be48 <CMachineInfo::FreeDMAChannel(unsigned int)+0x14>
    be5c:	e59f1050 	ldr	r1, [pc, #80]	; beb4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    be60:	e300220a 	movw	r2, #522	; 0x20a
    be64:	e2810014 	add	r0, r1, #20
    be68:	ebfff582 	bl	9478 <assertion_failed>
    be6c:	e351000b 	cmp	r1, #11
    be70:	8a000007 	bhi	be94 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
    be74:	e1d321b8 	ldrh	r2, [r3, #24]
    be78:	e1e00152 	mvn	r0, r2, asr r1
    be7c:	e3100001 	tst	r0, #1
    be80:	0a000007 	beq	bea4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
    be84:	e3a00001 	mov	r0, #1
    be88:	e1821110 	orr	r1, r2, r0, lsl r1
    be8c:	e1c311b8 	strh	r1, [r3, #24]
    be90:	e8bd8010 	pop	{r4, pc}
    be94:	e59f1018 	ldr	r1, [pc, #24]	; beb4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    be98:	e3002212 	movw	r2, #530	; 0x212
    be9c:	e2810024 	add	r0, r1, #36	; 0x24
    bea0:	ebfff574 	bl	9478 <assertion_failed>
    bea4:	e59f1008 	ldr	r1, [pc, #8]	; beb4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    bea8:	e3002213 	movw	r2, #531	; 0x213
    beac:	e2810040 	add	r0, r1, #64	; 0x40
    beb0:	ebfff570 	bl	9478 <assertion_failed>
    beb4:	00014b58 	.word	0x00014b58

0000beb8 <CMachineInfo::Get()>:
    beb8:	e3063920 	movw	r3, #26912	; 0x6920
    bebc:	e3403001 	movt	r3, #1
    bec0:	e5930000 	ldr	r0, [r3]
    bec4:	e3500000 	cmp	r0, #0
    bec8:	112fff1e 	bxne	lr
    becc:	e59f100c 	ldr	r1, [pc, #12]	; bee0 <CMachineInfo::Get()+0x28>
    bed0:	e300225a 	movw	r2, #602	; 0x25a
    bed4:	e92d4010 	push	{r4, lr}
    bed8:	e2810014 	add	r0, r1, #20
    bedc:	ebfff565 	bl	9478 <assertion_failed>
    bee0:	00014b58 	.word	0x00014b58

0000bee4 <CScreenDevice::~CScreenDevice()>:
    bee4:	e5d03014 	ldrb	r3, [r0, #20]
    bee8:	e59f2070 	ldr	r2, [pc, #112]	; bf60 <CScreenDevice::~CScreenDevice()+0x7c>
    beec:	e92d4070 	push	{r4, r5, r6, lr}
    bef0:	e3530000 	cmp	r3, #0
    bef4:	e1a04000 	mov	r4, r0
    bef8:	e5802000 	str	r2, [r0]
    befc:	0a000003 	beq	bf10 <CScreenDevice::~CScreenDevice()+0x2c>
    bf00:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    bf04:	e3500000 	cmp	r0, #0
    bf08:	0a000000 	beq	bf10 <CScreenDevice::~CScreenDevice()+0x2c>
    bf0c:	eb001276 	bl	108ec <operator delete[](void*)>
    bf10:	e594501c 	ldr	r5, [r4, #28]
    bf14:	e3a03000 	mov	r3, #0
    bf18:	e5843024 	str	r3, [r4, #36]	; 0x24
    bf1c:	e1550003 	cmp	r5, r3
    bf20:	0a000004 	beq	bf38 <CScreenDevice::~CScreenDevice()+0x54>
    bf24:	e1a00005 	mov	r0, r5
    bf28:	eb00173f 	bl	11c2c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    bf2c:	e3a01098 	mov	r1, #152	; 0x98
    bf30:	e1a00005 	mov	r0, r5
    bf34:	eb001272 	bl	10904 <operator delete(void*, unsigned int)>
    bf38:	e3a03000 	mov	r3, #0
    bf3c:	e2840064 	add	r0, r4, #100	; 0x64
    bf40:	e584301c 	str	r3, [r4, #28]
    bf44:	eb0018e0 	bl	122cc <CDMAChannel::~CDMAChannel()>
    bf48:	e2840020 	add	r0, r4, #32
    bf4c:	eb001854 	bl	120a4 <CCharGenerator::~CCharGenerator()>
    bf50:	e1a00004 	mov	r0, r4
    bf54:	eb00187a 	bl	12144 <CDevice::~CDevice()>
    bf58:	e1a00004 	mov	r0, r4
    bf5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bf60:	00014d68 	.word	0x00014d68

0000bf64 <CScreenDevice::~CScreenDevice()>:
    bf64:	e92d4010 	push	{r4, lr}
    bf68:	e1a04000 	mov	r4, r0
    bf6c:	ebffffdc 	bl	bee4 <CScreenDevice::~CScreenDevice()>
    bf70:	e1a00004 	mov	r0, r4
    bf74:	e3a01090 	mov	r1, #144	; 0x90
    bf78:	eb001261 	bl	10904 <operator delete(void*, unsigned int)>
    bf7c:	e1a00004 	mov	r0, r4
    bf80:	e8bd8010 	pop	{r4, pc}

0000bf84 <CScreenDevice::InvertCursor() [clone .part.0]>:
    bf84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf88:	e2807020 	add	r7, r0, #32
    bf8c:	e1a05000 	mov	r5, r0
    bf90:	e1a00007 	mov	r0, r7
    bf94:	eb001847 	bl	120b8 <CCharGenerator::GetUnderline() const>
    bf98:	e1a06000 	mov	r6, r0
    bf9c:	e1a00007 	mov	r0, r7
    bfa0:	eb001842 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    bfa4:	e1500006 	cmp	r0, r6
    bfa8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bfac:	e3a04000 	mov	r4, #0
    bfb0:	ea000000 	b	bfb8 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
    bfb4:	e2844001 	add	r4, r4, #1
    bfb8:	e1a00007 	mov	r0, r7
    bfbc:	eb001839 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    bfc0:	e1500004 	cmp	r0, r4
    bfc4:	9a000013 	bls	c018 <CScreenDevice::InvertCursor() [clone .part.0]+0x94>
    bfc8:	e5953048 	ldr	r3, [r5, #72]	; 0x48
    bfcc:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    bfd0:	e5951030 	ldr	r1, [r5, #48]	; 0x30
    bfd4:	e0843003 	add	r3, r4, r3
    bfd8:	e0862002 	add	r2, r6, r2
    bfdc:	e1530001 	cmp	r3, r1
    bfe0:	2afffff3 	bcs	bfb4 <CScreenDevice::InvertCursor() [clone .part.0]+0x30>
    bfe4:	e5951034 	ldr	r1, [r5, #52]	; 0x34
    bfe8:	e1520001 	cmp	r2, r1
    bfec:	2afffff0 	bcs	bfb4 <CScreenDevice::InvertCursor() [clone .part.0]+0x30>
    bff0:	e595c02c 	ldr	ip, [r5, #44]	; 0x2c
    bff4:	e5951024 	ldr	r1, [r5, #36]	; 0x24
    bff8:	e1d505b4 	ldrh	r0, [r5, #84]	; 0x54
    bffc:	e023329c 	mla	r3, ip, r2, r3
    c000:	e1a03083 	lsl	r3, r3, #1
    c004:	e19120b3 	ldrh	r2, [r1, r3]
    c008:	e1520000 	cmp	r2, r0
    c00c:	0a000003 	beq	c020 <CScreenDevice::InvertCursor() [clone .part.0]+0x9c>
    c010:	e18100b3 	strh	r0, [r1, r3]
    c014:	eaffffe6 	b	bfb4 <CScreenDevice::InvertCursor() [clone .part.0]+0x30>
    c018:	e2866001 	add	r6, r6, #1
    c01c:	eaffffde 	b	bf9c <CScreenDevice::InvertCursor() [clone .part.0]+0x18>
    c020:	e1d525b2 	ldrh	r2, [r5, #82]	; 0x52
    c024:	e18120b3 	strh	r2, [r1, r3]
    c028:	eaffffe1 	b	bfb4 <CScreenDevice::InvertCursor() [clone .part.0]+0x30>

0000c02c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    c02c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c030:	e1a04000 	mov	r4, r0
    c034:	e1a05001 	mov	r5, r1
    c038:	e1a07002 	mov	r7, r2
    c03c:	e1a06003 	mov	r6, r3
    c040:	eb001861 	bl	121cc <CDevice::CDevice()>
    c044:	e59d3018 	ldr	r3, [sp, #24]
    c048:	e5843018 	str	r3, [r4, #24]
    c04c:	e2840020 	add	r0, r4, #32
    c050:	e59f3060 	ldr	r3, [pc, #96]	; c0b8 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x8c>
    c054:	e584500c 	str	r5, [r4, #12]
    c058:	e3a05000 	mov	r5, #0
    c05c:	e5c46014 	strb	r6, [r4, #20]
    c060:	e3a06001 	mov	r6, #1
    c064:	e5843000 	str	r3, [r4]
    c068:	e5847010 	str	r7, [r4, #16]
    c06c:	e584501c 	str	r5, [r4, #28]
    c070:	eb001808 	bl	12098 <CCharGenerator::CCharGenerator()>
    c074:	e3e03020 	mvn	r3, #32
    c078:	e1a02005 	mov	r2, r5
    c07c:	e3a01081 	mov	r1, #129	; 0x81
    c080:	e2840064 	add	r0, r4, #100	; 0x64
    c084:	e5845024 	str	r5, [r4, #36]	; 0x24
    c088:	e584503c 	str	r5, [r4, #60]	; 0x3c
    c08c:	e5845040 	str	r5, [r4, #64]	; 0x40
    c090:	e5845048 	str	r5, [r4, #72]	; 0x48
    c094:	e584504c 	str	r5, [r4, #76]	; 0x4c
    c098:	e5c46050 	strb	r6, [r4, #80]	; 0x50
    c09c:	e1c435b2 	strh	r3, [r4, #82]	; 0x52
    c0a0:	e5845054 	str	r5, [r4, #84]	; 0x54
    c0a4:	e5c45060 	strb	r5, [r4, #96]	; 0x60
    c0a8:	eb00184e 	bl	121e8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    c0ac:	e1a00004 	mov	r0, r4
    c0b0:	e584608c 	str	r6, [r4, #140]	; 0x8c
    c0b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c0b8:	00014d68 	.word	0x00014d68

0000c0bc <CScreenDevice::GetWidth() const>:
    c0bc:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    c0c0:	e12fff1e 	bx	lr

0000c0c4 <CScreenDevice::GetHeight() const>:
    c0c4:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    c0c8:	e12fff1e 	bx	lr

0000c0cc <CScreenDevice::GetColumns() const>:
    c0cc:	e1a03000 	mov	r3, r0
    c0d0:	e92d4010 	push	{r4, lr}
    c0d4:	e2800020 	add	r0, r0, #32
    c0d8:	e5934030 	ldr	r4, [r3, #48]	; 0x30
    c0dc:	eb0017f1 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c0e0:	e730f014 	udiv	r0, r4, r0
    c0e4:	e8bd8010 	pop	{r4, pc}

0000c0e8 <CScreenDevice::GetRows() const>:
    c0e8:	e1a03000 	mov	r3, r0
    c0ec:	e92d4010 	push	{r4, lr}
    c0f0:	e2800020 	add	r0, r0, #32
    c0f4:	e5934038 	ldr	r4, [r3, #56]	; 0x38
    c0f8:	eb0017ec 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c0fc:	e730f014 	udiv	r0, r4, r0
    c100:	e8bd8010 	pop	{r4, pc}

0000c104 <CScreenDevice::GetFrameBuffer()>:
    c104:	e590001c 	ldr	r0, [r0, #28]
    c108:	e12fff1e 	bx	lr

0000c10c <CScreenDevice::GetStatus()>:
    c10c:	e5912028 	ldr	r2, [r1, #40]	; 0x28
    c110:	e5802004 	str	r2, [r0, #4]
    c114:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    c118:	e591c024 	ldr	ip, [r1, #36]	; 0x24
    c11c:	e580200c 	str	r2, [r0, #12]
    c120:	e5912048 	ldr	r2, [r1, #72]	; 0x48
    c124:	e580c000 	str	ip, [r0]
    c128:	e5802014 	str	r2, [r0, #20]
    c12c:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    c130:	e5d12050 	ldrb	r2, [r1, #80]	; 0x50
    c134:	e580c008 	str	ip, [r0, #8]
    c138:	e5c0201c 	strb	r2, [r0, #28]
    c13c:	e591c044 	ldr	ip, [r1, #68]	; 0x44
    c140:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    c144:	e580c010 	str	ip, [r0, #16]
    c148:	e5802024 	str	r2, [r0, #36]	; 0x24
    c14c:	e591c04c 	ldr	ip, [r1, #76]	; 0x4c
    c150:	e591205c 	ldr	r2, [r1, #92]	; 0x5c
    c154:	e580c018 	str	ip, [r0, #24]
    c158:	e5802028 	str	r2, [r0, #40]	; 0x28
    c15c:	e1d1c5b2 	ldrh	ip, [r1, #82]	; 0x52
    c160:	e5d12060 	ldrb	r2, [r1, #96]	; 0x60
    c164:	e5911054 	ldr	r1, [r1, #84]	; 0x54
    c168:	e1c0c1be 	strh	ip, [r0, #30]
    c16c:	e5801020 	str	r1, [r0, #32]
    c170:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    c174:	e12fff1e 	bx	lr

0000c178 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    c178:	e5902028 	ldr	r2, [r0, #40]	; 0x28
    c17c:	e5913004 	ldr	r3, [r1, #4]
    c180:	e1520003 	cmp	r2, r3
    c184:	0a000001 	beq	c190 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    c188:	e3a00000 	mov	r0, #0
    c18c:	e12fff1e 	bx	lr
    c190:	e92d4070 	push	{r4, r5, r6, lr}
    c194:	e1a05001 	mov	r5, r1
    c198:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c19c:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
    c1a0:	e1a04000 	mov	r4, r0
    c1a4:	e1510003 	cmp	r1, r3
    c1a8:	1a000032 	bne	c278 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c1ac:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    c1b0:	e3500000 	cmp	r0, #0
    c1b4:	1a000023 	bne	c248 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
    c1b8:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    c1bc:	e3530000 	cmp	r3, #0
    c1c0:	1a00002c 	bne	c278 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c1c4:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    c1c8:	e3530000 	cmp	r3, #0
    c1cc:	1a000029 	bne	c278 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c1d0:	e5951000 	ldr	r1, [r5]
    c1d4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    c1d8:	eb0010a4 	bl	10470 <memcpy>
    c1dc:	e5953008 	ldr	r3, [r5, #8]
    c1e0:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
    c1e4:	e595100c 	ldr	r1, [r5, #12]
    c1e8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c1ec:	e3520000 	cmp	r2, #0
    c1f0:	e5953010 	ldr	r3, [r5, #16]
    c1f4:	e5952014 	ldr	r2, [r5, #20]
    c1f8:	e5843044 	str	r3, [r4, #68]	; 0x44
    c1fc:	e5953018 	ldr	r3, [r5, #24]
    c200:	e5841040 	str	r1, [r4, #64]	; 0x40
    c204:	e5d5101c 	ldrb	r1, [r5, #28]
    c208:	e1c424f8 	strd	r2, [r4, #72]	; 0x48
    c20c:	e1d531be 	ldrh	r3, [r5, #30]
    c210:	e1d522b0 	ldrh	r2, [r5, #32]
    c214:	e1c435b2 	strh	r3, [r4, #82]	; 0x52
    c218:	e5d53022 	ldrb	r3, [r5, #34]	; 0x22
    c21c:	e5c41050 	strb	r1, [r4, #80]	; 0x50
    c220:	e5d51023 	ldrb	r1, [r5, #35]	; 0x23
    c224:	e1c425b4 	strh	r2, [r4, #84]	; 0x54
    c228:	e5c43056 	strb	r3, [r4, #86]	; 0x56
    c22c:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
    c230:	e1c425f8 	strd	r2, [r4, #88]	; 0x58
    c234:	e5c41057 	strb	r1, [r4, #87]	; 0x57
    c238:	1a000010 	bne	c280 <CScreenDevice::SetStatus(TScreenStatus const&)+0x108>
    c23c:	f57ff05f 	dmb	sy
    c240:	e3a00001 	mov	r0, #1
    c244:	e8bd8070 	pop	{r4, r5, r6, pc}
    c248:	eb001405 	bl	11264 <EnterCritical>
    c24c:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    c250:	e3530000 	cmp	r3, #0
    c254:	1a000003 	bne	c268 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
    c258:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    c25c:	e3530000 	cmp	r3, #0
    c260:	05942028 	ldreq	r2, [r4, #40]	; 0x28
    c264:	0affffd9 	beq	c1d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    c268:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
    c26c:	e3530000 	cmp	r3, #0
    c270:	0a000000 	beq	c278 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    c274:	eb001425 	bl	11310 <LeaveCritical>
    c278:	e3a00000 	mov	r0, #0
    c27c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c280:	eb001422 	bl	11310 <LeaveCritical>
    c284:	eaffffec 	b	c23c <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>

0000c288 <CScreenDevice::CarriageReturn()>:
    c288:	e3a03000 	mov	r3, #0
    c28c:	e5803048 	str	r3, [r0, #72]	; 0x48
    c290:	e12fff1e 	bx	lr

0000c294 <CScreenDevice::CursorHome()>:
    c294:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c298:	e3a02000 	mov	r2, #0
    c29c:	e1c024f8 	strd	r2, [r0, #72]	; 0x48
    c2a0:	e12fff1e 	bx	lr

0000c2a4 <CScreenDevice::CursorLeft()>:
    c2a4:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    c2a8:	e92d4070 	push	{r4, r5, r6, lr}
    c2ac:	e1a04000 	mov	r4, r0
    c2b0:	e3530000 	cmp	r3, #0
    c2b4:	1a00000f 	bne	c2f8 <CScreenDevice::CursorLeft()+0x54>
    c2b8:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    c2bc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c2c0:	e1520003 	cmp	r2, r3
    c2c4:	98bd8070 	popls	{r4, r5, r6, pc}
    c2c8:	e5905030 	ldr	r5, [r0, #48]	; 0x30
    c2cc:	e2806020 	add	r6, r0, #32
    c2d0:	e1a00006 	mov	r0, r6
    c2d4:	eb001773 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c2d8:	e0455000 	sub	r5, r5, r0
    c2dc:	e1a00006 	mov	r0, r6
    c2e0:	e5845048 	str	r5, [r4, #72]	; 0x48
    c2e4:	eb001771 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c2e8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c2ec:	e0433000 	sub	r3, r3, r0
    c2f0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c2f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2f8:	e2800020 	add	r0, r0, #32
    c2fc:	eb001769 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c300:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c304:	e0433000 	sub	r3, r3, r0
    c308:	e5843048 	str	r3, [r4, #72]	; 0x48
    c30c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c310 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    c310:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c314:	e2807020 	add	r7, r0, #32
    c318:	e1a04002 	mov	r4, r2
    c31c:	e1a05000 	mov	r5, r0
    c320:	e1a00007 	mov	r0, r7
    c324:	e1a06001 	mov	r6, r1
    c328:	e2444001 	sub	r4, r4, #1
    c32c:	eb00175d 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c330:	e1a02000 	mov	r2, r0
    c334:	e1a00007 	mov	r0, r7
    c338:	e0040492 	mul	r4, r2, r4
    c33c:	eb00175b 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c340:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    c344:	e1530004 	cmp	r3, r4
    c348:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    c34c:	e2466001 	sub	r6, r6, #1
    c350:	e5953040 	ldr	r3, [r5, #64]	; 0x40
    c354:	e0060690 	mul	r6, r0, r6
    c358:	e1530006 	cmp	r3, r6
    c35c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    c360:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c364:	e1530006 	cmp	r3, r6
    c368:	85854048 	strhi	r4, [r5, #72]	; 0x48
    c36c:	8585604c 	strhi	r6, [r5, #76]	; 0x4c
    c370:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c374 <CScreenDevice::CursorUp()>:
    c374:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    c378:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c37c:	e1520003 	cmp	r2, r3
    c380:	912fff1e 	bxls	lr
    c384:	e92d4010 	push	{r4, lr}
    c388:	e1a04000 	mov	r4, r0
    c38c:	e2800020 	add	r0, r0, #32
    c390:	eb001746 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c394:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c398:	e0433000 	sub	r3, r3, r0
    c39c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c3a0:	e8bd8010 	pop	{r4, pc}

0000c3a4 <CScreenDevice::DeleteChars(unsigned int)>:
    c3a4:	e12fff1e 	bx	lr

0000c3a8 <CScreenDevice::DeleteLines(unsigned int)>:
    c3a8:	e12fff1e 	bx	lr

0000c3ac <CScreenDevice::GetTextBackgroundColor()>:
    c3ac:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    c3b0:	e3530000 	cmp	r3, #0
    c3b4:	11d005b2 	ldrhne	r0, [r0, #82]	; 0x52
    c3b8:	01d005b4 	ldrheq	r0, [r0, #84]	; 0x54
    c3bc:	e12fff1e 	bx	lr

0000c3c0 <CScreenDevice::GetTextColor()>:
    c3c0:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    c3c4:	e3530000 	cmp	r3, #0
    c3c8:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
    c3cc:	01d005b2 	ldrheq	r0, [r0, #82]	; 0x52
    c3d0:	e12fff1e 	bx	lr

0000c3d4 <CScreenDevice::InsertLines(unsigned int)>:
    c3d4:	e12fff1e 	bx	lr

0000c3d8 <CScreenDevice::InsertMode(bool)>:
    c3d8:	e5c01057 	strb	r1, [r0, #87]	; 0x57
    c3dc:	e12fff1e 	bx	lr

0000c3e0 <CScreenDevice::ReverseScroll()>:
    c3e0:	e12fff1e 	bx	lr

0000c3e4 <CScreenDevice::SetCursorMode(bool)>:
    c3e4:	e5c01050 	strb	r1, [r0, #80]	; 0x50
    c3e8:	e12fff1e 	bx	lr

0000c3ec <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    c3ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c3f0:	e2807020 	add	r7, r0, #32
    c3f4:	e1a05000 	mov	r5, r0
    c3f8:	e1a04001 	mov	r4, r1
    c3fc:	e1a00007 	mov	r0, r7
    c400:	e1a06002 	mov	r6, r2
    c404:	e2444001 	sub	r4, r4, #1
    c408:	eb001728 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c40c:	e1a01000 	mov	r1, r0
    c410:	e1a00007 	mov	r0, r7
    c414:	e0040491 	mul	r4, r1, r4
    c418:	eb001724 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c41c:	e5951038 	ldr	r1, [r5, #56]	; 0x38
    c420:	e0000096 	mul	r0, r6, r0
    c424:	e1510000 	cmp	r1, r0
    c428:	31a03001 	movcc	r3, r1
    c42c:	21a03000 	movcs	r3, r0
    c430:	e1540003 	cmp	r4, r3
    c434:	33a03001 	movcc	r3, #1
    c438:	23a03000 	movcs	r3, #0
    c43c:	e1510000 	cmp	r1, r0
    c440:	33a03000 	movcc	r3, #0
    c444:	e3530000 	cmp	r3, #0
    c448:	e3a03000 	mov	r3, #0
    c44c:	15854040 	strne	r4, [r5, #64]	; 0x40
    c450:	15850044 	strne	r0, [r5, #68]	; 0x44
    c454:	05954040 	ldreq	r4, [r5, #64]	; 0x40
    c458:	e585404c 	str	r4, [r5, #76]	; 0x4c
    c45c:	e5853048 	str	r3, [r5, #72]	; 0x48
    c460:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c464 <CScreenDevice::SetStandoutMode(unsigned int)>:
    c464:	e351001b 	cmp	r1, #27
    c468:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    c46c:	ea00001d 	b	c4e8 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    c470:	0000c4ec 	.word	0x0000c4ec
    c474:	0000c50c 	.word	0x0000c50c
    c478:	0000c500 	.word	0x0000c500
    c47c:	0000c4e8 	.word	0x0000c4e8
    c480:	0000c4e8 	.word	0x0000c4e8
    c484:	0000c4e8 	.word	0x0000c4e8
    c488:	0000c4e8 	.word	0x0000c4e8
    c48c:	0000c4e0 	.word	0x0000c4e0
    c490:	0000c4e8 	.word	0x0000c4e8
    c494:	0000c4e8 	.word	0x0000c4e8
    c498:	0000c4e8 	.word	0x0000c4e8
    c49c:	0000c4e8 	.word	0x0000c4e8
    c4a0:	0000c4e8 	.word	0x0000c4e8
    c4a4:	0000c4e8 	.word	0x0000c4e8
    c4a8:	0000c4e8 	.word	0x0000c4e8
    c4ac:	0000c4e8 	.word	0x0000c4e8
    c4b0:	0000c4e8 	.word	0x0000c4e8
    c4b4:	0000c4e8 	.word	0x0000c4e8
    c4b8:	0000c4e8 	.word	0x0000c4e8
    c4bc:	0000c4e8 	.word	0x0000c4e8
    c4c0:	0000c4e8 	.word	0x0000c4e8
    c4c4:	0000c4e8 	.word	0x0000c4e8
    c4c8:	0000c4e8 	.word	0x0000c4e8
    c4cc:	0000c4e8 	.word	0x0000c4e8
    c4d0:	0000c4e8 	.word	0x0000c4e8
    c4d4:	0000c4e8 	.word	0x0000c4e8
    c4d8:	0000c4e8 	.word	0x0000c4e8
    c4dc:	0000c4ec 	.word	0x0000c4ec
    c4e0:	e3a03001 	mov	r3, #1
    c4e4:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    c4e8:	e12fff1e 	bx	lr
    c4ec:	e3a02000 	mov	r2, #0
    c4f0:	e3e03020 	mvn	r3, #32
    c4f4:	e5c02056 	strb	r2, [r0, #86]	; 0x56
    c4f8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c4fc:	e12fff1e 	bx	lr
    c500:	e3a0301f 	mov	r3, #31
    c504:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c508:	e12fff1e 	bx	lr
    c50c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    c510:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    c514:	e12fff1e 	bx	lr

0000c518 <CScreenDevice::Scroll()>:
    c518:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c51c:	e1a05000 	mov	r5, r0
    c520:	e2800020 	add	r0, r0, #32
    c524:	e24dd008 	sub	sp, sp, #8
    c528:	eb0016e0 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c52c:	e595c040 	ldr	ip, [r5, #64]	; 0x40
    c530:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    c534:	e1a04000 	mov	r4, r0
    c538:	e5956044 	ldr	r6, [r5, #68]	; 0x44
    c53c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    c540:	e046600c 	sub	r6, r6, ip
    c544:	e1a02081 	lsl	r2, r1, #1
    c548:	e0466000 	sub	r6, r6, r0
    c54c:	e0070c91 	mul	r7, r1, ip
    c550:	e0060692 	mul	r6, r2, r6
    c554:	e0837087 	add	r7, r3, r7, lsl #1
    c558:	e3560000 	cmp	r6, #0
    c55c:	1a00001d 	bne	c5d8 <CScreenDevice::Scroll()+0xc0>
    c560:	e0030491 	mul	r3, r1, r4
    c564:	e1a03083 	lsl	r3, r3, #1
    c568:	e1a0c123 	lsr	ip, r3, #2
    c56c:	e24c0001 	sub	r0, ip, #1
    c570:	e35c0000 	cmp	ip, #0
    c574:	0a000015 	beq	c5d0 <CScreenDevice::Scroll()+0xb8>
    c578:	e1d5e5b4 	ldrh	lr, [r5, #84]	; 0x54
    c57c:	e3500002 	cmp	r0, #2
    c580:	9a00000c 	bls	c5b8 <CScreenDevice::Scroll()+0xa0>
    c584:	e3c3400f 	bic	r4, r3, #15
    c588:	eea0eb90 	vdup.32	q8, lr
    c58c:	e1a02223 	lsr	r2, r3, #4
    c590:	e0871004 	add	r1, r7, r4
    c594:	e1a03007 	mov	r3, r7
    c598:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
    c59c:	e1530001 	cmp	r3, r1
    c5a0:	1afffffc 	bne	c598 <CScreenDevice::Scroll()+0x80>
    c5a4:	e1a03102 	lsl	r3, r2, #2
    c5a8:	e0877004 	add	r7, r7, r4
    c5ac:	e0400003 	sub	r0, r0, r3
    c5b0:	e15c0003 	cmp	ip, r3
    c5b4:	0a000005 	beq	c5d0 <CScreenDevice::Scroll()+0xb8>
    c5b8:	e3500000 	cmp	r0, #0
    c5bc:	e587e000 	str	lr, [r7]
    c5c0:	0a000002 	beq	c5d0 <CScreenDevice::Scroll()+0xb8>
    c5c4:	e3500001 	cmp	r0, #1
    c5c8:	e587e004 	str	lr, [r7, #4]
    c5cc:	1587e008 	strne	lr, [r7, #8]
    c5d0:	e28dd008 	add	sp, sp, #8
    c5d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c5d8:	e08cc000 	add	ip, ip, r0
    c5dc:	e2858064 	add	r8, r5, #100	; 0x64
    c5e0:	e1a01007 	mov	r1, r7
    c5e4:	e3a00002 	mov	r0, #2
    c5e8:	e0223c92 	mla	r2, r2, ip, r3
    c5ec:	e1a03006 	mov	r3, r6
    c5f0:	e3a0c000 	mov	ip, #0
    c5f4:	e88d1001 	stm	sp, {r0, ip}
    c5f8:	e1a00008 	mov	r0, r8
    c5fc:	e3c66003 	bic	r6, r6, #3
    c600:	eb00176c 	bl	123b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    c604:	e1a00008 	mov	r0, r8
    c608:	eb0018f2 	bl	129d8 <CDMAChannel::Start()>
    c60c:	e1a00008 	mov	r0, r8
    c610:	eb00193a 	bl	12b00 <CDMAChannel::Wait()>
    c614:	e0877006 	add	r7, r7, r6
    c618:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    c61c:	eaffffcf 	b	c560 <CScreenDevice::Scroll()+0x48>

0000c620 <CScreenDevice::CursorDown()>:
    c620:	e92d4070 	push	{r4, r5, r6, lr}
    c624:	e1a04000 	mov	r4, r0
    c628:	e2805020 	add	r5, r0, #32
    c62c:	e1a00005 	mov	r0, r5
    c630:	eb00169e 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c634:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c638:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c63c:	e0800002 	add	r0, r0, r2
    c640:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c644:	e1500003 	cmp	r0, r3
    c648:	38bd8070 	popcc	{r4, r5, r6, pc}
    c64c:	e1a00004 	mov	r0, r4
    c650:	ebffffb0 	bl	c518 <CScreenDevice::Scroll()>
    c654:	e1a00005 	mov	r0, r5
    c658:	eb001694 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c65c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c660:	e0433000 	sub	r3, r3, r0
    c664:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c668:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c66c <CScreenDevice::NewLine()>:
    c66c:	e92d4070 	push	{r4, r5, r6, lr}
    c670:	e1a04000 	mov	r4, r0
    c674:	e2805020 	add	r5, r0, #32
    c678:	e3a03000 	mov	r3, #0
    c67c:	e1a00005 	mov	r0, r5
    c680:	e5843048 	str	r3, [r4, #72]	; 0x48
    c684:	eb001689 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c688:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c68c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c690:	e0800002 	add	r0, r0, r2
    c694:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c698:	e1500003 	cmp	r0, r3
    c69c:	38bd8070 	popcc	{r4, r5, r6, pc}
    c6a0:	e1a00004 	mov	r0, r4
    c6a4:	ebffff9b 	bl	c518 <CScreenDevice::Scroll()>
    c6a8:	e1a00005 	mov	r0, r5
    c6ac:	eb00167f 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c6b0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c6b4:	e0433000 	sub	r3, r3, r0
    c6b8:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c6bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c6c0 <CScreenDevice::CursorRight()>:
    c6c0:	e92d4070 	push	{r4, r5, r6, lr}
    c6c4:	e1a04000 	mov	r4, r0
    c6c8:	e2805020 	add	r5, r0, #32
    c6cc:	e1a00005 	mov	r0, r5
    c6d0:	eb001674 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c6d4:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c6d8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c6dc:	e0800002 	add	r0, r0, r2
    c6e0:	e5840048 	str	r0, [r4, #72]	; 0x48
    c6e4:	e1500003 	cmp	r0, r3
    c6e8:	38bd8070 	popcc	{r4, r5, r6, pc}
    c6ec:	e3a03000 	mov	r3, #0
    c6f0:	e1a00005 	mov	r0, r5
    c6f4:	e5843048 	str	r3, [r4, #72]	; 0x48
    c6f8:	eb00166c 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c6fc:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c700:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c704:	e0800002 	add	r0, r0, r2
    c708:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c70c:	e1500003 	cmp	r0, r3
    c710:	38bd8070 	popcc	{r4, r5, r6, pc}
    c714:	e1a00004 	mov	r0, r4
    c718:	ebffff7e 	bl	c518 <CScreenDevice::Scroll()>
    c71c:	e1a00005 	mov	r0, r5
    c720:	eb001662 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c724:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c728:	e0433000 	sub	r3, r3, r0
    c72c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c730:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c734 <CScreenDevice::Tabulator()>:
    c734:	e92d4070 	push	{r4, r5, r6, lr}
    c738:	e1a04000 	mov	r4, r0
    c73c:	e2805020 	add	r5, r0, #32
    c740:	e1a00005 	mov	r0, r5
    c744:	eb001657 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c748:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c74c:	e1a00180 	lsl	r0, r0, #3
    c750:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    c754:	e0803002 	add	r3, r0, r2
    c758:	e733f013 	udiv	r3, r3, r0
    c75c:	e0030390 	mul	r3, r0, r3
    c760:	e5843048 	str	r3, [r4, #72]	; 0x48
    c764:	e1530001 	cmp	r3, r1
    c768:	38bd8070 	popcc	{r4, r5, r6, pc}
    c76c:	e3a03000 	mov	r3, #0
    c770:	e1a00005 	mov	r0, r5
    c774:	e5843048 	str	r3, [r4, #72]	; 0x48
    c778:	eb00164c 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c77c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c780:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c784:	e0800002 	add	r0, r0, r2
    c788:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c78c:	e1500003 	cmp	r0, r3
    c790:	38bd8070 	popcc	{r4, r5, r6, pc}
    c794:	e1a00004 	mov	r0, r4
    c798:	ebffff5e 	bl	c518 <CScreenDevice::Scroll()>
    c79c:	e1a00005 	mov	r0, r5
    c7a0:	eb001642 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c7a4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c7a8:	e0433000 	sub	r3, r3, r0
    c7ac:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c7b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c7b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    c7b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7b8:	e2807020 	add	r7, r0, #32
    c7bc:	e1a06000 	mov	r6, r0
    c7c0:	e24dd00c 	sub	sp, sp, #12
    c7c4:	e3a08000 	mov	r8, #0
    c7c8:	e1a00007 	mov	r0, r7
    c7cc:	e1a09001 	mov	r9, r1
    c7d0:	e1a0a003 	mov	sl, r3
    c7d4:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    c7d8:	e58d2004 	str	r2, [sp, #4]
    c7dc:	eb001633 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c7e0:	e1500008 	cmp	r0, r8
    c7e4:	9a000025 	bls	c880 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
    c7e8:	e59d5004 	ldr	r5, [sp, #4]
    c7ec:	e3a04000 	mov	r4, #0
    c7f0:	ea000013 	b	c844 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
    c7f4:	eb001631 	bl	120c0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    c7f8:	e1a0200b 	mov	r2, fp
    c7fc:	e3500000 	cmp	r0, #0
    c800:	1a000003 	bne	c814 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x60>
    c804:	e5d63056 	ldrb	r3, [r6, #86]	; 0x56
    c808:	e3530000 	cmp	r3, #0
    c80c:	11d625b2 	ldrhne	r2, [r6, #82]	; 0x52
    c810:	01d625b4 	ldrheq	r2, [r6, #84]	; 0x54
    c814:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    c818:	e2844001 	add	r4, r4, #1
    c81c:	e1530005 	cmp	r3, r5
    c820:	9a000006 	bls	c840 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
    c824:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    c828:	e153000a 	cmp	r3, sl
    c82c:	8596302c 	ldrhi	r3, [r6, #44]	; 0x2c
    c830:	85961024 	ldrhi	r1, [r6, #36]	; 0x24
    c834:	80235a93 	mlahi	r3, r3, sl, r5
    c838:	81a03083 	lslhi	r3, r3, #1
    c83c:	818120b3 	strhhi	r2, [r1, r3]
    c840:	e2855001 	add	r5, r5, #1
    c844:	e1a00007 	mov	r0, r7
    c848:	eb001616 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c84c:	e1a0c000 	mov	ip, r0
    c850:	e1a02004 	mov	r2, r4
    c854:	e1a03008 	mov	r3, r8
    c858:	e1a01009 	mov	r1, r9
    c85c:	e1a00007 	mov	r0, r7
    c860:	e15c0004 	cmp	ip, r4
    c864:	8affffe2 	bhi	c7f4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
    c868:	e2888001 	add	r8, r8, #1
    c86c:	e1a00007 	mov	r0, r7
    c870:	eb00160e 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c874:	e28aa001 	add	sl, sl, #1
    c878:	e1500008 	cmp	r0, r8
    c87c:	8affffd9 	bhi	c7e8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    c880:	e28dd00c 	add	sp, sp, #12
    c884:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c888 <CScreenDevice::DisplayChar(char)>:
    c888:	e6ef3071 	uxtb	r3, r1
    c88c:	e353001f 	cmp	r3, #31
    c890:	912fff1e 	bxls	lr
    c894:	e92d4030 	push	{r4, r5, lr}
    c898:	e1a04000 	mov	r4, r0
    c89c:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    c8a0:	e24dd00c 	sub	sp, sp, #12
    c8a4:	e2845020 	add	r5, r4, #32
    c8a8:	e3500000 	cmp	r0, #0
    c8ac:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    c8b0:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    c8b4:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    c8b8:	e58d0000 	str	r0, [sp]
    c8bc:	e1a00004 	mov	r0, r4
    c8c0:	ebffffbb 	bl	c7b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c8c4:	e1a00005 	mov	r0, r5
    c8c8:	eb0015f6 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c8cc:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c8d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c8d4:	e0800002 	add	r0, r0, r2
    c8d8:	e5840048 	str	r0, [r4, #72]	; 0x48
    c8dc:	e1500003 	cmp	r0, r3
    c8e0:	2a000001 	bcs	c8ec <CScreenDevice::DisplayChar(char)+0x64>
    c8e4:	e28dd00c 	add	sp, sp, #12
    c8e8:	e8bd8030 	pop	{r4, r5, pc}
    c8ec:	e3a03000 	mov	r3, #0
    c8f0:	e1a00005 	mov	r0, r5
    c8f4:	e5843048 	str	r3, [r4, #72]	; 0x48
    c8f8:	eb0015ec 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c8fc:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c900:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c904:	e0800002 	add	r0, r0, r2
    c908:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c90c:	e1500003 	cmp	r0, r3
    c910:	3afffff3 	bcc	c8e4 <CScreenDevice::DisplayChar(char)+0x5c>
    c914:	e1a00004 	mov	r0, r4
    c918:	ebfffefe 	bl	c518 <CScreenDevice::Scroll()>
    c91c:	e1a00005 	mov	r0, r5
    c920:	eb0015e2 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c924:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c928:	e0433000 	sub	r3, r3, r0
    c92c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c930:	eaffffeb 	b	c8e4 <CScreenDevice::DisplayChar(char)+0x5c>

0000c934 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    c934:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c938:	e1a06000 	mov	r6, r0
    c93c:	e1a0a001 	mov	sl, r1
    c940:	e1a08002 	mov	r8, r2
    c944:	e2807020 	add	r7, r0, #32
    c948:	e3a09000 	mov	r9, #0
    c94c:	e1a00007 	mov	r0, r7
    c950:	eb0015d6 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    c954:	e1500009 	cmp	r0, r9
    c958:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    c95c:	e1a0400a 	mov	r4, sl
    c960:	e3a05000 	mov	r5, #0
    c964:	ea00000d 	b	c9a0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x6c>
    c968:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    c96c:	e2855001 	add	r5, r5, #1
    c970:	e1530004 	cmp	r3, r4
    c974:	9a000008 	bls	c99c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    c978:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    c97c:	e1530008 	cmp	r3, r8
    c980:	9a000005 	bls	c99c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    c984:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
    c988:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    c98c:	e1d615b4 	ldrh	r1, [r6, #84]	; 0x54
    c990:	e0234893 	mla	r3, r3, r8, r4
    c994:	e1a03083 	lsl	r3, r3, #1
    c998:	e18210b3 	strh	r1, [r2, r3]
    c99c:	e2844001 	add	r4, r4, #1
    c9a0:	e1a00007 	mov	r0, r7
    c9a4:	eb0015bf 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c9a8:	e1500005 	cmp	r0, r5
    c9ac:	8affffed 	bhi	c968 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    c9b0:	e2899001 	add	r9, r9, #1
    c9b4:	e2888001 	add	r8, r8, #1
    c9b8:	eaffffe3 	b	c94c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000c9bc <CScreenDevice::ClearLineEnd()>:
    c9bc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c9c0:	e92d4070 	push	{r4, r5, r6, lr}
    c9c4:	e5904048 	ldr	r4, [r0, #72]	; 0x48
    c9c8:	e1540003 	cmp	r4, r3
    c9cc:	28bd8070 	popcs	{r4, r5, r6, pc}
    c9d0:	e1a05000 	mov	r5, r0
    c9d4:	e2806020 	add	r6, r0, #32
    c9d8:	e1a01004 	mov	r1, r4
    c9dc:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    c9e0:	e1a00005 	mov	r0, r5
    c9e4:	ebffffd2 	bl	c934 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c9e8:	e1a00006 	mov	r0, r6
    c9ec:	eb0015ad 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    c9f0:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    c9f4:	e0844000 	add	r4, r4, r0
    c9f8:	e1530004 	cmp	r3, r4
    c9fc:	8afffff5 	bhi	c9d8 <CScreenDevice::ClearLineEnd()+0x1c>
    ca00:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ca04 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
    ca04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ca08:	e1a05000 	mov	r5, r0
    ca0c:	e1a04001 	mov	r4, r1
    ca10:	e2807020 	add	r7, r0, #32
    ca14:	e5956048 	ldr	r6, [r5, #72]	; 0x48
    ca18:	e1a00007 	mov	r0, r7
    ca1c:	eb0015a1 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    ca20:	e0266094 	mla	r6, r4, r0, r6
    ca24:	e5950030 	ldr	r0, [r5, #48]	; 0x30
    ca28:	e5954048 	ldr	r4, [r5, #72]	; 0x48
    ca2c:	e1560000 	cmp	r6, r0
    ca30:	21a06000 	movcs	r6, r0
    ca34:	e1560004 	cmp	r6, r4
    ca38:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    ca3c:	e1a01004 	mov	r1, r4
    ca40:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    ca44:	e1a00005 	mov	r0, r5
    ca48:	ebffffb9 	bl	c934 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    ca4c:	e1a00007 	mov	r0, r7
    ca50:	eb001594 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    ca54:	e0844000 	add	r4, r4, r0
    ca58:	e1560004 	cmp	r6, r4
    ca5c:	8afffff6 	bhi	ca3c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
    ca60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ca64 <CScreenDevice::EraseChars(unsigned int)>:
    ca64:	e3510000 	cmp	r1, #0
    ca68:	012fff1e 	bxeq	lr
    ca6c:	eaffffe4 	b	ca04 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

0000ca70 <CScreenDevice::ClearDisplayEnd()>:
    ca70:	e92d4070 	push	{r4, r5, r6, lr}
    ca74:	e1a04000 	mov	r4, r0
    ca78:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    ca7c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    ca80:	e2806020 	add	r6, r0, #32
    ca84:	e1550003 	cmp	r5, r3
    ca88:	2a000009 	bcs	cab4 <CScreenDevice::ClearDisplayEnd()+0x44>
    ca8c:	e1a01005 	mov	r1, r5
    ca90:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    ca94:	e1a00004 	mov	r0, r4
    ca98:	ebffffa5 	bl	c934 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    ca9c:	e1a00006 	mov	r0, r6
    caa0:	eb001580 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    caa4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    caa8:	e0855000 	add	r5, r5, r0
    caac:	e1530005 	cmp	r3, r5
    cab0:	8afffff5 	bhi	ca8c <CScreenDevice::ClearDisplayEnd()+0x1c>
    cab4:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
    cab8:	e1a00006 	mov	r0, r6
    cabc:	eb00157b 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    cac0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    cac4:	e0852000 	add	r2, r5, r0
    cac8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    cacc:	e0020293 	mul	r2, r3, r2
    cad0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    cad4:	e1a030a3 	lsr	r3, r3, #1
    cad8:	e080c082 	add	ip, r0, r2, lsl #1
    cadc:	e0432002 	sub	r2, r3, r2
    cae0:	e3520000 	cmp	r2, #0
    cae4:	e2421001 	sub	r1, r2, #1
    cae8:	08bd8070 	popeq	{r4, r5, r6, pc}
    caec:	e0800083 	add	r0, r0, r3, lsl #1
    caf0:	e284e056 	add	lr, r4, #86	; 0x56
    caf4:	e2843054 	add	r3, r4, #84	; 0x54
    caf8:	e15c000e 	cmp	ip, lr
    cafc:	31530000 	cmpcc	r3, r0
    cb00:	23a03001 	movcs	r3, #1
    cb04:	33a03000 	movcc	r3, #0
    cb08:	e3510008 	cmp	r1, #8
    cb0c:	93a03000 	movls	r3, #0
    cb10:	82033001 	andhi	r3, r3, #1
    cb14:	e3530000 	cmp	r3, #0
    cb18:	0a000025 	beq	cbb4 <CScreenDevice::ClearDisplayEnd()+0x144>
    cb1c:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    cb20:	e1a0e1a2 	lsr	lr, r2, #3
    cb24:	e1a0000c 	mov	r0, ip
    cb28:	eea03bb0 	vdup.16	q8, r3
    cb2c:	e3a03000 	mov	r3, #0
    cb30:	e2833001 	add	r3, r3, #1
    cb34:	f4400a4d 	vst1.16	{d16-d17}, [r0]!
    cb38:	e15e0003 	cmp	lr, r3
    cb3c:	1afffffb 	bne	cb30 <CScreenDevice::ClearDisplayEnd()+0xc0>
    cb40:	e3c23007 	bic	r3, r2, #7
    cb44:	e1520003 	cmp	r2, r3
    cb48:	e0411003 	sub	r1, r1, r3
    cb4c:	e1a03083 	lsl	r3, r3, #1
    cb50:	e08c2003 	add	r2, ip, r3
    cb54:	08bd8070 	popeq	{r4, r5, r6, pc}
    cb58:	e3510000 	cmp	r1, #0
    cb5c:	e1d405b4 	ldrh	r0, [r4, #84]	; 0x54
    cb60:	e18c00b3 	strh	r0, [ip, r3]
    cb64:	08bd8070 	popeq	{r4, r5, r6, pc}
    cb68:	e3510001 	cmp	r1, #1
    cb6c:	e1c200b2 	strh	r0, [r2, #2]
    cb70:	08bd8070 	popeq	{r4, r5, r6, pc}
    cb74:	e3510002 	cmp	r1, #2
    cb78:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    cb7c:	e1c230b4 	strh	r3, [r2, #4]
    cb80:	08bd8070 	popeq	{r4, r5, r6, pc}
    cb84:	e3510003 	cmp	r1, #3
    cb88:	e1c230b6 	strh	r3, [r2, #6]
    cb8c:	08bd8070 	popeq	{r4, r5, r6, pc}
    cb90:	e3510004 	cmp	r1, #4
    cb94:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    cb98:	e1c230b8 	strh	r3, [r2, #8]
    cb9c:	08bd8070 	popeq	{r4, r5, r6, pc}
    cba0:	e3510005 	cmp	r1, #5
    cba4:	e1c230ba 	strh	r3, [r2, #10]
    cba8:	11d435b4 	ldrhne	r3, [r4, #84]	; 0x54
    cbac:	11c230bc 	strhne	r3, [r2, #12]
    cbb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbb4:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    cbb8:	e2411001 	sub	r1, r1, #1
    cbbc:	e3710001 	cmn	r1, #1
    cbc0:	e0cc30b2 	strh	r3, [ip], #2
    cbc4:	1afffffa 	bne	cbb4 <CScreenDevice::ClearDisplayEnd()+0x144>
    cbc8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cbcc <CScreenDevice::Initialize()>:
    cbcc:	e92d4070 	push	{r4, r5, r6, lr}
    cbd0:	e1a04000 	mov	r4, r0
    cbd4:	e5d06014 	ldrb	r6, [r0, #20]
    cbd8:	e24dd010 	sub	sp, sp, #16
    cbdc:	e3560000 	cmp	r6, #0
    cbe0:	0a00002f 	beq	cca4 <CScreenDevice::Initialize()+0xd8>
    cbe4:	e590000c 	ldr	r0, [r0, #12]
    cbe8:	e5943010 	ldr	r3, [r4, #16]
    cbec:	e5840030 	str	r0, [r4, #48]	; 0x30
    cbf0:	e584002c 	str	r0, [r4, #44]	; 0x2c
    cbf4:	e5843034 	str	r3, [r4, #52]	; 0x34
    cbf8:	e0000093 	mul	r0, r3, r0
    cbfc:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
    cc00:	e1a00080 	lsl	r0, r0, #1
    cc04:	e5840028 	str	r0, [r4, #40]	; 0x28
    cc08:	23e00000 	mvncs	r0, #0
    cc0c:	eb000f2a 	bl	108bc <operator new[](unsigned int)>
    cc10:	e5945034 	ldr	r5, [r4, #52]	; 0x34
    cc14:	e5840024 	str	r0, [r4, #36]	; 0x24
    cc18:	e2846020 	add	r6, r4, #32
    cc1c:	e1a00006 	mov	r0, r6
    cc20:	eb001522 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    cc24:	e1a03000 	mov	r3, r0
    cc28:	e1a00006 	mov	r0, r6
    cc2c:	e735f315 	udiv	r5, r5, r3
    cc30:	eb00151e 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    cc34:	e1a03000 	mov	r3, r0
    cc38:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    cc3c:	e3a01000 	mov	r1, #0
    cc40:	e1a00004 	mov	r0, r4
    cc44:	e5841048 	str	r1, [r4, #72]	; 0x48
    cc48:	e0030593 	mul	r3, r3, r5
    cc4c:	e584204c 	str	r2, [r4, #76]	; 0x4c
    cc50:	e5843038 	str	r3, [r4, #56]	; 0x38
    cc54:	e5843044 	str	r3, [r4, #68]	; 0x44
    cc58:	ebffff84 	bl	ca70 <CScreenDevice::ClearDisplayEnd()>
    cc5c:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
    cc60:	e3530000 	cmp	r3, #0
    cc64:	1a00000b 	bne	cc98 <CScreenDevice::Initialize()+0xcc>
    cc68:	ebfff35d 	bl	99e4 <CDeviceNameService::Get()>
    cc6c:	e5942018 	ldr	r2, [r4, #24]
    cc70:	e3a06001 	mov	r6, #1
    cc74:	e3a03000 	mov	r3, #0
    cc78:	e59f10e0 	ldr	r1, [pc, #224]	; cd60 <CScreenDevice::Initialize()+0x194>
    cc7c:	e0822006 	add	r2, r2, r6
    cc80:	e58d3000 	str	r3, [sp]
    cc84:	e1a03004 	mov	r3, r4
    cc88:	ebfff360 	bl	9a10 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    cc8c:	e1a00006 	mov	r0, r6
    cc90:	e28dd010 	add	sp, sp, #16
    cc94:	e8bd8070 	pop	{r4, r5, r6, pc}
    cc98:	e1a00004 	mov	r0, r4
    cc9c:	ebfffcb8 	bl	bf84 <CScreenDevice::InvertCursor() [clone .part.0]>
    cca0:	eafffff0 	b	cc68 <CScreenDevice::Initialize()+0x9c>
    cca4:	e3a00098 	mov	r0, #152	; 0x98
    cca8:	eb000efd 	bl	108a4 <operator new(unsigned int)>
    ccac:	e5943018 	ldr	r3, [r4, #24]
    ccb0:	e58d3008 	str	r3, [sp, #8]
    ccb4:	e1a05000 	mov	r5, r0
    ccb8:	e58d600c 	str	r6, [sp, #12]
    ccbc:	e3a03010 	mov	r3, #16
    ccc0:	e58d6004 	str	r6, [sp, #4]
    ccc4:	e58d6000 	str	r6, [sp]
    ccc8:	e5942010 	ldr	r2, [r4, #16]
    cccc:	e594100c 	ldr	r1, [r4, #12]
    ccd0:	eb00137f 	bl	11ad4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    ccd4:	e1a00005 	mov	r0, r5
    ccd8:	e584501c 	str	r5, [r4, #28]
    ccdc:	eb0013f0 	bl	11ca4 <CBcmFrameBuffer::Initialize()>
    cce0:	e3500000 	cmp	r0, #0
    cce4:	0affffe8 	beq	cc8c <CScreenDevice::Initialize()+0xc0>
    cce8:	e594001c 	ldr	r0, [r4, #28]
    ccec:	eb00142d 	bl	11da8 <CBcmFrameBuffer::GetDepth() const>
    ccf0:	e3500010 	cmp	r0, #16
    ccf4:	1affffe4 	bne	cc8c <CScreenDevice::Initialize()+0xc0>
    ccf8:	e594001c 	ldr	r0, [r4, #28]
    ccfc:	eb00142b 	bl	11db0 <CBcmFrameBuffer::GetBuffer() const>
    cd00:	e1a03000 	mov	r3, r0
    cd04:	e594001c 	ldr	r0, [r4, #28]
    cd08:	e5843024 	str	r3, [r4, #36]	; 0x24
    cd0c:	eb001429 	bl	11db8 <CBcmFrameBuffer::GetSize() const>
    cd10:	e1a03000 	mov	r3, r0
    cd14:	e594001c 	ldr	r0, [r4, #28]
    cd18:	e5843028 	str	r3, [r4, #40]	; 0x28
    cd1c:	eb00141f 	bl	11da0 <CBcmFrameBuffer::GetPitch() const>
    cd20:	e1a03000 	mov	r3, r0
    cd24:	e594001c 	ldr	r0, [r4, #28]
    cd28:	e584302c 	str	r3, [r4, #44]	; 0x2c
    cd2c:	eb001413 	bl	11d80 <CBcmFrameBuffer::GetWidth() const>
    cd30:	e1a03000 	mov	r3, r0
    cd34:	e594001c 	ldr	r0, [r4, #28]
    cd38:	e5843030 	str	r3, [r4, #48]	; 0x30
    cd3c:	eb001411 	bl	11d88 <CBcmFrameBuffer::GetHeight() const>
    cd40:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    cd44:	e1a05000 	mov	r5, r0
    cd48:	e5840034 	str	r0, [r4, #52]	; 0x34
    cd4c:	e3130003 	tst	r3, #3
    cd50:	1affffcd 	bne	cc8c <CScreenDevice::Initialize()+0xc0>
    cd54:	e1a030a3 	lsr	r3, r3, #1
    cd58:	e584302c 	str	r3, [r4, #44]	; 0x2c
    cd5c:	eaffffad 	b	cc18 <CScreenDevice::Initialize()+0x4c>
    cd60:	00014d80 	.word	0x00014d80

0000cd64 <CScreenDevice::Write(char)>:
    cd64:	e92d4070 	push	{r4, r5, r6, lr}
    cd68:	e1a04000 	mov	r4, r0
    cd6c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    cd70:	e24dd008 	sub	sp, sp, #8
    cd74:	e3530007 	cmp	r3, #7
    cd78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cd7c:	ea000009 	b	cda8 <CScreenDevice::Write(char)+0x44>
    cd80:	0000cdf0 	.word	0x0000cdf0
    cd84:	0000cda0 	.word	0x0000cda0
    cd88:	0000ce50 	.word	0x0000ce50
    cd8c:	0000cea8 	.word	0x0000cea8
    cd90:	0000cf84 	.word	0x0000cf84
    cd94:	0000cfa8 	.word	0x0000cfa8
    cd98:	0000cfcc 	.word	0x0000cfcc
    cd9c:	0000cdb8 	.word	0x0000cdb8
    cda0:	e351005b 	cmp	r1, #91	; 0x5b
    cda4:	0a0000c4 	beq	d0bc <CScreenDevice::Write(char)+0x358>
    cda8:	e3a03000 	mov	r3, #0
    cdac:	e584303c 	str	r3, [r4, #60]	; 0x3c
    cdb0:	e28dd008 	add	sp, sp, #8
    cdb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    cdb8:	e3c13004 	bic	r3, r1, #4
    cdbc:	e3530068 	cmp	r3, #104	; 0x68
    cdc0:	0a000090 	beq	d008 <CScreenDevice::Write(char)+0x2a4>
    cdc4:	e2411030 	sub	r1, r1, #48	; 0x30
    cdc8:	e6ef3071 	uxtb	r3, r1
    cdcc:	e3530009 	cmp	r3, #9
    cdd0:	8afffff4 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    cdd4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    cdd8:	e3a0200a 	mov	r2, #10
    cddc:	e0211392 	mla	r1, r2, r3, r1
    cde0:	e5841058 	str	r1, [r4, #88]	; 0x58
    cde4:	e3510063 	cmp	r1, #99	; 0x63
    cde8:	8affffee 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    cdec:	eaffffef 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    cdf0:	e2413008 	sub	r3, r1, #8
    cdf4:	e3530013 	cmp	r3, #19
    cdf8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    cdfc:	ea000088 	b	d024 <CScreenDevice::Write(char)+0x2c0>
    ce00:	0000d140 	.word	0x0000d140
    ce04:	0000d134 	.word	0x0000d134
    ce08:	0000d104 	.word	0x0000d104
    ce0c:	0000d024 	.word	0x0000d024
    ce10:	0000d024 	.word	0x0000d024
    ce14:	0000d0f8 	.word	0x0000d0f8
    ce18:	0000d024 	.word	0x0000d024
    ce1c:	0000d024 	.word	0x0000d024
    ce20:	0000d024 	.word	0x0000d024
    ce24:	0000d024 	.word	0x0000d024
    ce28:	0000d024 	.word	0x0000d024
    ce2c:	0000d024 	.word	0x0000d024
    ce30:	0000d024 	.word	0x0000d024
    ce34:	0000d024 	.word	0x0000d024
    ce38:	0000d024 	.word	0x0000d024
    ce3c:	0000d024 	.word	0x0000d024
    ce40:	0000d024 	.word	0x0000d024
    ce44:	0000d024 	.word	0x0000d024
    ce48:	0000d024 	.word	0x0000d024
    ce4c:	0000d0ec 	.word	0x0000d0ec
    ce50:	e241303f 	sub	r3, r1, #63	; 0x3f
    ce54:	e3530011 	cmp	r3, #17
    ce58:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ce5c:	ea000099 	b	d0c8 <CScreenDevice::Write(char)+0x364>
    ce60:	0000d14c 	.word	0x0000d14c
    ce64:	0000d0c8 	.word	0x0000d0c8
    ce68:	0000d224 	.word	0x0000d224
    ce6c:	0000d1e0 	.word	0x0000d1e0
    ce70:	0000d1d0 	.word	0x0000d1d0
    ce74:	0000d1c0 	.word	0x0000d1c0
    ce78:	0000d0c8 	.word	0x0000d0c8
    ce7c:	0000d0c8 	.word	0x0000d0c8
    ce80:	0000d0c8 	.word	0x0000d0c8
    ce84:	0000d1a8 	.word	0x0000d1a8
    ce88:	0000d0c8 	.word	0x0000d0c8
    ce8c:	0000d198 	.word	0x0000d198
    ce90:	0000d158 	.word	0x0000d158
    ce94:	0000cda8 	.word	0x0000cda8
    ce98:	0000cda8 	.word	0x0000cda8
    ce9c:	0000d0c8 	.word	0x0000d0c8
    cea0:	0000d0c8 	.word	0x0000d0c8
    cea4:	0000cda8 	.word	0x0000cda8
    cea8:	e241303b 	sub	r3, r1, #59	; 0x3b
    ceac:	e3530032 	cmp	r3, #50	; 0x32
    ceb0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ceb4:	eaffffc2 	b	cdc4 <CScreenDevice::Write(char)+0x60>
    ceb8:	0000d27c 	.word	0x0000d27c
    cebc:	0000cdc4 	.word	0x0000cdc4
    cec0:	0000cdc4 	.word	0x0000cdc4
    cec4:	0000cdc4 	.word	0x0000cdc4
    cec8:	0000cdc4 	.word	0x0000cdc4
    cecc:	0000cdc4 	.word	0x0000cdc4
    ced0:	0000cdc4 	.word	0x0000cdc4
    ced4:	0000cdc4 	.word	0x0000cdc4
    ced8:	0000cdc4 	.word	0x0000cdc4
    cedc:	0000cdc4 	.word	0x0000cdc4
    cee0:	0000cdc4 	.word	0x0000cdc4
    cee4:	0000cdc4 	.word	0x0000cdc4
    cee8:	0000cdc4 	.word	0x0000cdc4
    ceec:	0000cdc4 	.word	0x0000cdc4
    cef0:	0000cdc4 	.word	0x0000cdc4
    cef4:	0000cdc4 	.word	0x0000cdc4
    cef8:	0000cdc4 	.word	0x0000cdc4
    cefc:	0000cda8 	.word	0x0000cda8
    cf00:	0000cda8 	.word	0x0000cda8
    cf04:	0000cdc4 	.word	0x0000cdc4
    cf08:	0000cdc4 	.word	0x0000cdc4
    cf0c:	0000cda8 	.word	0x0000cda8
    cf10:	0000cdc4 	.word	0x0000cdc4
    cf14:	0000cdc4 	.word	0x0000cdc4
    cf18:	0000cdc4 	.word	0x0000cdc4
    cf1c:	0000cdc4 	.word	0x0000cdc4
    cf20:	0000cdc4 	.word	0x0000cdc4
    cf24:	0000cdc4 	.word	0x0000cdc4
    cf28:	0000cdc4 	.word	0x0000cdc4
    cf2c:	0000d268 	.word	0x0000d268
    cf30:	0000cdc4 	.word	0x0000cdc4
    cf34:	0000cdc4 	.word	0x0000cdc4
    cf38:	0000cdc4 	.word	0x0000cdc4
    cf3c:	0000cdc4 	.word	0x0000cdc4
    cf40:	0000cdc4 	.word	0x0000cdc4
    cf44:	0000cdc4 	.word	0x0000cdc4
    cf48:	0000cdc4 	.word	0x0000cdc4
    cf4c:	0000cdc4 	.word	0x0000cdc4
    cf50:	0000cdc4 	.word	0x0000cdc4
    cf54:	0000cdc4 	.word	0x0000cdc4
    cf58:	0000cdc4 	.word	0x0000cdc4
    cf5c:	0000cdc4 	.word	0x0000cdc4
    cf60:	0000cdc4 	.word	0x0000cdc4
    cf64:	0000cdc4 	.word	0x0000cdc4
    cf68:	0000cdc4 	.word	0x0000cdc4
    cf6c:	0000d24c 	.word	0x0000d24c
    cf70:	0000cdc4 	.word	0x0000cdc4
    cf74:	0000cdc4 	.word	0x0000cdc4
    cf78:	0000cdc4 	.word	0x0000cdc4
    cf7c:	0000d24c 	.word	0x0000d24c
    cf80:	0000d288 	.word	0x0000d288
    cf84:	e2411030 	sub	r1, r1, #48	; 0x30
    cf88:	e6ef3071 	uxtb	r3, r1
    cf8c:	e3530009 	cmp	r3, #9
    cf90:	8affff84 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    cf94:	e6af1071 	sxtb	r1, r1
    cf98:	e3a03007 	mov	r3, #7
    cf9c:	e5801058 	str	r1, [r0, #88]	; 0x58
    cfa0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cfa4:	eaffff81 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    cfa8:	e2411030 	sub	r1, r1, #48	; 0x30
    cfac:	e6ef3071 	uxtb	r3, r1
    cfb0:	e3530009 	cmp	r3, #9
    cfb4:	8affff7b 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    cfb8:	e6af1071 	sxtb	r1, r1
    cfbc:	e3a03006 	mov	r3, #6
    cfc0:	e580105c 	str	r1, [r0, #92]	; 0x5c
    cfc4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    cfc8:	eaffff78 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    cfcc:	e3510048 	cmp	r1, #72	; 0x48
    cfd0:	0a0000de 	beq	d350 <CScreenDevice::Write(char)+0x5ec>
    cfd4:	e3510072 	cmp	r1, #114	; 0x72
    cfd8:	0a0000d8 	beq	d340 <CScreenDevice::Write(char)+0x5dc>
    cfdc:	e2411030 	sub	r1, r1, #48	; 0x30
    cfe0:	e6ef3071 	uxtb	r3, r1
    cfe4:	e3530009 	cmp	r3, #9
    cfe8:	8affff6e 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    cfec:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    cff0:	e3a0200a 	mov	r2, #10
    cff4:	e0211392 	mla	r1, r2, r3, r1
    cff8:	e580105c 	str	r1, [r0, #92]	; 0x5c
    cffc:	e35100c7 	cmp	r1, #199	; 0xc7
    d000:	8affff68 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    d004:	eaffff69 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d008:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    d00c:	e3530019 	cmp	r3, #25
    d010:	02411068 	subeq	r1, r1, #104	; 0x68
    d014:	016f1f11 	clzeq	r1, r1
    d018:	01a012a1 	lsreq	r1, r1, #5
    d01c:	05c01050 	strbeq	r1, [r0, #80]	; 0x50
    d020:	eaffff60 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d024:	e6ef3071 	uxtb	r3, r1
    d028:	e353001f 	cmp	r3, #31
    d02c:	9affff5f 	bls	cdb0 <CScreenDevice::Write(char)+0x4c>
    d030:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    d034:	e2845020 	add	r5, r4, #32
    d038:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    d03c:	e3500000 	cmp	r0, #0
    d040:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    d044:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    d048:	e58d0000 	str	r0, [sp]
    d04c:	e1a00004 	mov	r0, r4
    d050:	ebfffdd7 	bl	c7b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d054:	e1a00005 	mov	r0, r5
    d058:	eb001412 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    d05c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d060:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    d064:	e0803003 	add	r3, r0, r3
    d068:	e5843048 	str	r3, [r4, #72]	; 0x48
    d06c:	e1530002 	cmp	r3, r2
    d070:	3affff4e 	bcc	cdb0 <CScreenDevice::Write(char)+0x4c>
    d074:	e3a03000 	mov	r3, #0
    d078:	e1a00005 	mov	r0, r5
    d07c:	e5843048 	str	r3, [r4, #72]	; 0x48
    d080:	eb00140a 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    d084:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d088:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    d08c:	e0803003 	add	r3, r0, r3
    d090:	e584304c 	str	r3, [r4, #76]	; 0x4c
    d094:	e1530002 	cmp	r3, r2
    d098:	3affff44 	bcc	cdb0 <CScreenDevice::Write(char)+0x4c>
    d09c:	e1a00004 	mov	r0, r4
    d0a0:	ebfffd1c 	bl	c518 <CScreenDevice::Scroll()>
    d0a4:	e1a00005 	mov	r0, r5
    d0a8:	eb001400 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    d0ac:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d0b0:	e0433000 	sub	r3, r3, r0
    d0b4:	e584304c 	str	r3, [r4, #76]	; 0x4c
    d0b8:	eaffff3c 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d0bc:	e3a03002 	mov	r3, #2
    d0c0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d0c4:	eaffff39 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d0c8:	e2411030 	sub	r1, r1, #48	; 0x30
    d0cc:	e6ef3071 	uxtb	r3, r1
    d0d0:	e3530009 	cmp	r3, #9
    d0d4:	8affff33 	bhi	cda8 <CScreenDevice::Write(char)+0x44>
    d0d8:	e6af1071 	sxtb	r1, r1
    d0dc:	e3a03003 	mov	r3, #3
    d0e0:	e5801058 	str	r1, [r0, #88]	; 0x58
    d0e4:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d0e8:	eaffff30 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d0ec:	e3a03001 	mov	r3, #1
    d0f0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d0f4:	eaffff2d 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d0f8:	e3a03000 	mov	r3, #0
    d0fc:	e5803048 	str	r3, [r0, #72]	; 0x48
    d100:	eaffff2a 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d104:	e2805020 	add	r5, r0, #32
    d108:	e3a03000 	mov	r3, #0
    d10c:	e1a00005 	mov	r0, r5
    d110:	e5843048 	str	r3, [r4, #72]	; 0x48
    d114:	eb0013e5 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    d118:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    d11c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    d120:	e0800002 	add	r0, r0, r2
    d124:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d128:	e1500003 	cmp	r0, r3
    d12c:	3affff1f 	bcc	cdb0 <CScreenDevice::Write(char)+0x4c>
    d130:	eaffffd9 	b	d09c <CScreenDevice::Write(char)+0x338>
    d134:	e28dd008 	add	sp, sp, #8
    d138:	e8bd4070 	pop	{r4, r5, r6, lr}
    d13c:	eafffd7c 	b	c734 <CScreenDevice::Tabulator()>
    d140:	e28dd008 	add	sp, sp, #8
    d144:	e8bd4070 	pop	{r4, r5, r6, lr}
    d148:	eafffc55 	b	c2a4 <CScreenDevice::CursorLeft()>
    d14c:	e3a03004 	mov	r3, #4
    d150:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d154:	eaffff15 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d158:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    d15c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    d160:	e1530005 	cmp	r3, r5
    d164:	9affff0f 	bls	cda8 <CScreenDevice::Write(char)+0x44>
    d168:	e2806020 	add	r6, r0, #32
    d16c:	e1a01005 	mov	r1, r5
    d170:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    d174:	e1a00004 	mov	r0, r4
    d178:	ebfffded 	bl	c934 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    d17c:	e1a00006 	mov	r0, r6
    d180:	eb0013c8 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    d184:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    d188:	e0855000 	add	r5, r5, r0
    d18c:	e1530005 	cmp	r3, r5
    d190:	8afffff5 	bhi	d16c <CScreenDevice::Write(char)+0x408>
    d194:	eaffff03 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d198:	ebfffe34 	bl	ca70 <CScreenDevice::ClearDisplayEnd()>
    d19c:	e3a03000 	mov	r3, #0
    d1a0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    d1a4:	eaffff01 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d1a8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    d1ac:	e3a03000 	mov	r3, #0
    d1b0:	e580204c 	str	r2, [r0, #76]	; 0x4c
    d1b4:	e5803048 	str	r3, [r0, #72]	; 0x48
    d1b8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d1bc:	eafffefb 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d1c0:	ebfffc37 	bl	c2a4 <CScreenDevice::CursorLeft()>
    d1c4:	e3a03000 	mov	r3, #0
    d1c8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    d1cc:	eafffef7 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d1d0:	ebfffd3a 	bl	c6c0 <CScreenDevice::CursorRight()>
    d1d4:	e3a03000 	mov	r3, #0
    d1d8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    d1dc:	eafffef3 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d1e0:	e2805020 	add	r5, r0, #32
    d1e4:	e1a00005 	mov	r0, r5
    d1e8:	eb0013b0 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    d1ec:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d1f0:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    d1f4:	e0803003 	add	r3, r0, r3
    d1f8:	e584304c 	str	r3, [r4, #76]	; 0x4c
    d1fc:	e1530002 	cmp	r3, r2
    d200:	3afffee8 	bcc	cda8 <CScreenDevice::Write(char)+0x44>
    d204:	e1a00004 	mov	r0, r4
    d208:	ebfffcc2 	bl	c518 <CScreenDevice::Scroll()>
    d20c:	e1a00005 	mov	r0, r5
    d210:	eb0013a6 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    d214:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d218:	e0433000 	sub	r3, r3, r0
    d21c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    d220:	eafffee0 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d224:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    d228:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    d22c:	e1520003 	cmp	r2, r3
    d230:	9afffedc 	bls	cda8 <CScreenDevice::Write(char)+0x44>
    d234:	e2800020 	add	r0, r0, #32
    d238:	eb00139c 	bl	120b0 <CCharGenerator::GetCharHeight() const>
    d23c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    d240:	e0433000 	sub	r3, r3, r0
    d244:	e584304c 	str	r3, [r4, #76]	; 0x4c
    d248:	eafffed6 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d24c:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    d250:	e3530004 	cmp	r3, #4
    d254:	02411068 	subeq	r1, r1, #104	; 0x68
    d258:	016f1f11 	clzeq	r1, r1
    d25c:	01a012a1 	lsreq	r1, r1, #5
    d260:	05c01057 	strbeq	r1, [r0, #87]	; 0x57
    d264:	eafffecf 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d268:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    d26c:	e3510000 	cmp	r1, #0
    d270:	0afffecc 	beq	cda8 <CScreenDevice::Write(char)+0x44>
    d274:	ebfffde2 	bl	ca04 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
    d278:	eafffeca 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d27c:	e3a03005 	mov	r3, #5
    d280:	e580303c 	str	r3, [r0, #60]	; 0x3c
    d284:	eafffec9 	b	cdb0 <CScreenDevice::Write(char)+0x4c>
    d288:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    d28c:	e353001b 	cmp	r3, #27
    d290:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d294:	eafffec3 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d298:	0000d308 	.word	0x0000d308
    d29c:	0000d334 	.word	0x0000d334
    d2a0:	0000d328 	.word	0x0000d328
    d2a4:	0000cda8 	.word	0x0000cda8
    d2a8:	0000cda8 	.word	0x0000cda8
    d2ac:	0000cda8 	.word	0x0000cda8
    d2b0:	0000cda8 	.word	0x0000cda8
    d2b4:	0000d31c 	.word	0x0000d31c
    d2b8:	0000cda8 	.word	0x0000cda8
    d2bc:	0000cda8 	.word	0x0000cda8
    d2c0:	0000cda8 	.word	0x0000cda8
    d2c4:	0000cda8 	.word	0x0000cda8
    d2c8:	0000cda8 	.word	0x0000cda8
    d2cc:	0000cda8 	.word	0x0000cda8
    d2d0:	0000cda8 	.word	0x0000cda8
    d2d4:	0000cda8 	.word	0x0000cda8
    d2d8:	0000cda8 	.word	0x0000cda8
    d2dc:	0000cda8 	.word	0x0000cda8
    d2e0:	0000cda8 	.word	0x0000cda8
    d2e4:	0000cda8 	.word	0x0000cda8
    d2e8:	0000cda8 	.word	0x0000cda8
    d2ec:	0000cda8 	.word	0x0000cda8
    d2f0:	0000cda8 	.word	0x0000cda8
    d2f4:	0000cda8 	.word	0x0000cda8
    d2f8:	0000cda8 	.word	0x0000cda8
    d2fc:	0000cda8 	.word	0x0000cda8
    d300:	0000cda8 	.word	0x0000cda8
    d304:	0000d308 	.word	0x0000d308
    d308:	e3a02000 	mov	r2, #0
    d30c:	e3e03020 	mvn	r3, #32
    d310:	e5c02056 	strb	r2, [r0, #86]	; 0x56
    d314:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    d318:	eafffea2 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d31c:	e3a03001 	mov	r3, #1
    d320:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    d324:	eafffe9f 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d328:	e3a0301f 	mov	r3, #31
    d32c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    d330:	eafffe9c 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d334:	e3a03b3e 	mov	r3, #63488	; 0xf800
    d338:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    d33c:	eafffe99 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d340:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    d344:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    d348:	ebfffc27 	bl	c3ec <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    d34c:	eafffe95 	b	cda8 <CScreenDevice::Write(char)+0x44>
    d350:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    d354:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    d358:	ebfffbec 	bl	c310 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    d35c:	e3a03000 	mov	r3, #0
    d360:	e584303c 	str	r3, [r4, #60]	; 0x3c
    d364:	eafffe91 	b	cdb0 <CScreenDevice::Write(char)+0x4c>

0000d368 <CScreenDevice::Write(void const*, unsigned int)>:
    d368:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d36c:	e1a05000 	mov	r5, r0
    d370:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    d374:	e1a06001 	mov	r6, r1
    d378:	e1a04002 	mov	r4, r2
    d37c:	e3500000 	cmp	r0, #0
    d380:	1a000025 	bne	d41c <CScreenDevice::Write(void const*, unsigned int)+0xb4>
    d384:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    d388:	e3a02001 	mov	r2, #1
    d38c:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    d390:	e3530000 	cmp	r3, #0
    d394:	1a000019 	bne	d400 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    d398:	e3540000 	cmp	r4, #0
    d39c:	e2447001 	sub	r7, r4, #1
    d3a0:	01a07004 	moveq	r7, r4
    d3a4:	0a00000d 	beq	d3e0 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    d3a8:	e1a04006 	mov	r4, r6
    d3ac:	e0d410d1 	ldrsb	r1, [r4], #1
    d3b0:	e1a00005 	mov	r0, r5
    d3b4:	ebfffe6a 	bl	cd64 <CScreenDevice::Write(char)>
    d3b8:	e2643001 	rsb	r3, r4, #1
    d3bc:	e0863003 	add	r3, r6, r3
    d3c0:	e1730007 	cmn	r3, r7
    d3c4:	1afffff8 	bne	d3ac <CScreenDevice::Write(void const*, unsigned int)+0x44>
    d3c8:	e2877001 	add	r7, r7, #1
    d3cc:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    d3d0:	e3530000 	cmp	r3, #0
    d3d4:	0a000001 	beq	d3e0 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    d3d8:	e1a00005 	mov	r0, r5
    d3dc:	ebfffae8 	bl	bf84 <CScreenDevice::InvertCursor() [clone .part.0]>
    d3e0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
    d3e4:	e3a02000 	mov	r2, #0
    d3e8:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    d3ec:	e1530002 	cmp	r3, r2
    d3f0:	1a00000b 	bne	d424 <CScreenDevice::Write(void const*, unsigned int)+0xbc>
    d3f4:	f57ff05f 	dmb	sy
    d3f8:	e1a00007 	mov	r0, r7
    d3fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d400:	e1a00005 	mov	r0, r5
    d404:	e2447001 	sub	r7, r4, #1
    d408:	ebfffadd 	bl	bf84 <CScreenDevice::InvertCursor() [clone .part.0]>
    d40c:	e3540000 	cmp	r4, #0
    d410:	1affffe4 	bne	d3a8 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    d414:	e1a07004 	mov	r7, r4
    d418:	eaffffeb 	b	d3cc <CScreenDevice::Write(void const*, unsigned int)+0x64>
    d41c:	eb000f90 	bl	11264 <EnterCritical>
    d420:	eaffffd7 	b	d384 <CScreenDevice::Write(void const*, unsigned int)+0x1c>
    d424:	eb000fb9 	bl	11310 <LeaveCritical>
    d428:	eafffff1 	b	d3f4 <CScreenDevice::Write(void const*, unsigned int)+0x8c>

0000d42c <CScreenDevice::InvertCursor()>:
    d42c:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
    d430:	e3530000 	cmp	r3, #0
    d434:	012fff1e 	bxeq	lr
    d438:	eafffad1 	b	bf84 <CScreenDevice::InvertCursor() [clone .part.0]>

0000d43c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    d43c:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    d440:	e15c0001 	cmp	ip, r1
    d444:	912fff1e 	bxls	lr
    d448:	e590c034 	ldr	ip, [r0, #52]	; 0x34
    d44c:	e15c0002 	cmp	ip, r2
    d450:	8590c02c 	ldrhi	ip, [r0, #44]	; 0x2c
    d454:	85900024 	ldrhi	r0, [r0, #36]	; 0x24
    d458:	8021129c 	mlahi	r1, ip, r2, r1
    d45c:	81a01081 	lslhi	r1, r1, #1
    d460:	818030b1 	strhhi	r3, [r0, r1]
    d464:	e12fff1e 	bx	lr

0000d468 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    d468:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    d46c:	e1530001 	cmp	r3, r1
    d470:	9a000002 	bls	d480 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    d474:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    d478:	e1530002 	cmp	r3, r2
    d47c:	8a000001 	bhi	d488 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    d480:	e1d005b4 	ldrh	r0, [r0, #84]	; 0x54
    d484:	e12fff1e 	bx	lr
    d488:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    d48c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    d490:	e021129c 	mla	r1, ip, r2, r1
    d494:	e1a01081 	lsl	r1, r1, #1
    d498:	e19300b1 	ldrh	r0, [r3, r1]
    d49c:	e12fff1e 	bx	lr

0000d4a0 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    d4a0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d4a4:	e1a06000 	mov	r6, r0
    d4a8:	e1a05001 	mov	r5, r1
    d4ac:	e24dd00c 	sub	sp, sp, #12
    d4b0:	e2800020 	add	r0, r0, #32
    d4b4:	e1a04002 	mov	r4, r2
    d4b8:	e5967030 	ldr	r7, [r6, #48]	; 0x30
    d4bc:	e2055003 	and	r5, r5, #3
    d4c0:	eb0012f8 	bl	120a8 <CCharGenerator::GetCharWidth() const>
    d4c4:	e1a03000 	mov	r3, r0
    d4c8:	e2041003 	and	r1, r4, #3
    d4cc:	e1a00006 	mov	r0, r6
    d4d0:	e0253395 	mla	r5, r5, r3, r3
    d4d4:	e3043d60 	movw	r3, #19808	; 0x4d60
    d4d8:	e3403001 	movt	r3, #1
    d4dc:	e0831001 	add	r1, r3, r1
    d4e0:	e0472005 	sub	r2, r7, r5
    d4e4:	e3a03b3e 	mov	r3, #63488	; 0xf800
    d4e8:	e58d3000 	str	r3, [sp]
    d4ec:	e3a03000 	mov	r3, #0
    d4f0:	e1d112d4 	ldrsb	r1, [r1, #36]	; 0x24
    d4f4:	ebfffcae 	bl	c7b4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    d4f8:	e28dd00c 	add	sp, sp, #12
    d4fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000d500 <CString::~CString()>:
    d500:	e92d4010 	push	{r4, lr}
    d504:	e1a04000 	mov	r4, r0
    d508:	e5900004 	ldr	r0, [r0, #4]
    d50c:	e59f3014 	ldr	r3, [pc, #20]	; d528 <CString::~CString()+0x28>
    d510:	e3500000 	cmp	r0, #0
    d514:	e5843000 	str	r3, [r4]
    d518:	0a000000 	beq	d520 <CString::~CString()+0x20>
    d51c:	eb000cf2 	bl	108ec <operator delete[](void*)>
    d520:	e1a00004 	mov	r0, r4
    d524:	e8bd8010 	pop	{r4, pc}
    d528:	00014d94 	.word	0x00014d94

0000d52c <CString::~CString()>:
    d52c:	e92d4010 	push	{r4, lr}
    d530:	e1a04000 	mov	r4, r0
    d534:	e5900004 	ldr	r0, [r0, #4]
    d538:	e59f3020 	ldr	r3, [pc, #32]	; d560 <CString::~CString()+0x34>
    d53c:	e3500000 	cmp	r0, #0
    d540:	e5843000 	str	r3, [r4]
    d544:	0a000000 	beq	d54c <CString::~CString()+0x20>
    d548:	eb000ce7 	bl	108ec <operator delete[](void*)>
    d54c:	e1a00004 	mov	r0, r4
    d550:	e3a01010 	mov	r1, #16
    d554:	eb000cea 	bl	10904 <operator delete(void*, unsigned int)>
    d558:	e1a00004 	mov	r0, r4
    d55c:	e8bd8010 	pop	{r4, pc}
    d560:	00014d94 	.word	0x00014d94

0000d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d564:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d568:	e990004c 	ldmib	r0, {r2, r3, r6}
    d56c:	e0466002 	sub	r6, r6, r2
    d570:	e0861001 	add	r1, r6, r1
    d574:	e2812001 	add	r2, r1, #1
    d578:	e1520003 	cmp	r2, r3
    d57c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d580:	e1a04000 	mov	r4, r0
    d584:	e2815041 	add	r5, r1, #65	; 0x41
    d588:	e1a00005 	mov	r0, r5
    d58c:	eb000cca 	bl	108bc <operator new[](unsigned int)>
    d590:	e3a02000 	mov	r2, #0
    d594:	e594300c 	ldr	r3, [r4, #12]
    d598:	e1a07000 	mov	r7, r0
    d59c:	e5c32000 	strb	r2, [r3]
    d5a0:	e5941004 	ldr	r1, [r4, #4]
    d5a4:	eb000a61 	bl	ff30 <strcpy>
    d5a8:	e5940004 	ldr	r0, [r4, #4]
    d5ac:	e3500000 	cmp	r0, #0
    d5b0:	0a000000 	beq	d5b8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d5b4:	eb000ccc 	bl	108ec <operator delete[](void*)>
    d5b8:	e0876006 	add	r6, r7, r6
    d5bc:	e5847004 	str	r7, [r4, #4]
    d5c0:	e5845008 	str	r5, [r4, #8]
    d5c4:	e584600c 	str	r6, [r4, #12]
    d5c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d5cc <CString::CString()>:
    d5cc:	e59f100c 	ldr	r1, [pc, #12]	; d5e0 <CString::CString()+0x14>
    d5d0:	e3a02000 	mov	r2, #0
    d5d4:	e8800006 	stm	r0, {r1, r2}
    d5d8:	e5802008 	str	r2, [r0, #8]
    d5dc:	e12fff1e 	bx	lr
    d5e0:	00014d94 	.word	0x00014d94

0000d5e4 <CString::CString(char const*)>:
    d5e4:	e92d4070 	push	{r4, r5, r6, lr}
    d5e8:	e1a04000 	mov	r4, r0
    d5ec:	e59f302c 	ldr	r3, [pc, #44]	; d620 <CString::CString(char const*)+0x3c>
    d5f0:	e1a00001 	mov	r0, r1
    d5f4:	e1a05001 	mov	r5, r1
    d5f8:	e5843000 	str	r3, [r4]
    d5fc:	eb0009aa 	bl	fcac <strlen>
    d600:	e2800001 	add	r0, r0, #1
    d604:	e5840008 	str	r0, [r4, #8]
    d608:	eb000cab 	bl	108bc <operator new[](unsigned int)>
    d60c:	e1a01005 	mov	r1, r5
    d610:	e5840004 	str	r0, [r4, #4]
    d614:	eb000a45 	bl	ff30 <strcpy>
    d618:	e1a00004 	mov	r0, r4
    d61c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d620:	00014d94 	.word	0x00014d94

0000d624 <CString::CString(CString const&)>:
    d624:	e92d4070 	push	{r4, r5, r6, lr}
    d628:	e1a04000 	mov	r4, r0
    d62c:	e5910004 	ldr	r0, [r1, #4]
    d630:	e1a05001 	mov	r5, r1
    d634:	e3043d8c 	movw	r3, #19852	; 0x4d8c
    d638:	e3403001 	movt	r3, #1
    d63c:	e3500000 	cmp	r0, #0
    d640:	e2832008 	add	r2, r3, #8
    d644:	02830010 	addeq	r0, r3, #16
    d648:	e5842000 	str	r2, [r4]
    d64c:	e2836010 	add	r6, r3, #16
    d650:	eb000995 	bl	fcac <strlen>
    d654:	e2800001 	add	r0, r0, #1
    d658:	e5840008 	str	r0, [r4, #8]
    d65c:	eb000c96 	bl	108bc <operator new[](unsigned int)>
    d660:	e5951004 	ldr	r1, [r5, #4]
    d664:	e5840004 	str	r0, [r4, #4]
    d668:	e3510000 	cmp	r1, #0
    d66c:	01a01006 	moveq	r1, r6
    d670:	eb000a2e 	bl	ff30 <strcpy>
    d674:	e1a00004 	mov	r0, r4
    d678:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d67c <CString::CString(CString&&)>:
    d67c:	e59fc024 	ldr	ip, [pc, #36]	; d6a8 <CString::CString(CString&&)+0x2c>
    d680:	e3a02000 	mov	r2, #0
    d684:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d688:	e591e008 	ldr	lr, [r1, #8]
    d68c:	e580c000 	str	ip, [r0]
    d690:	e591c004 	ldr	ip, [r1, #4]
    d694:	e580e008 	str	lr, [r0, #8]
    d698:	e5812008 	str	r2, [r1, #8]
    d69c:	e580c004 	str	ip, [r0, #4]
    d6a0:	e5812004 	str	r2, [r1, #4]
    d6a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    d6a8:	00014d94 	.word	0x00014d94

0000d6ac <CString::operator char const*() const>:
    d6ac:	e5900004 	ldr	r0, [r0, #4]
    d6b0:	e59f3008 	ldr	r3, [pc, #8]	; d6c0 <CString::operator char const*() const+0x14>
    d6b4:	e3500000 	cmp	r0, #0
    d6b8:	01a00003 	moveq	r0, r3
    d6bc:	e12fff1e 	bx	lr
    d6c0:	00014d9c 	.word	0x00014d9c

0000d6c4 <CString::operator=(char const*)>:
    d6c4:	e92d4070 	push	{r4, r5, r6, lr}
    d6c8:	e1a04000 	mov	r4, r0
    d6cc:	e5900004 	ldr	r0, [r0, #4]
    d6d0:	e1a05001 	mov	r5, r1
    d6d4:	e3500000 	cmp	r0, #0
    d6d8:	0a000000 	beq	d6e0 <CString::operator=(char const*)+0x1c>
    d6dc:	eb000c82 	bl	108ec <operator delete[](void*)>
    d6e0:	e1a00005 	mov	r0, r5
    d6e4:	eb000970 	bl	fcac <strlen>
    d6e8:	e2800001 	add	r0, r0, #1
    d6ec:	e5840008 	str	r0, [r4, #8]
    d6f0:	eb000c71 	bl	108bc <operator new[](unsigned int)>
    d6f4:	e1a01005 	mov	r1, r5
    d6f8:	e5840004 	str	r0, [r4, #4]
    d6fc:	eb000a0b 	bl	ff30 <strcpy>
    d700:	e5940004 	ldr	r0, [r4, #4]
    d704:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d708 <CString::operator=(CString const&)>:
    d708:	e92d4070 	push	{r4, r5, r6, lr}
    d70c:	e1a04000 	mov	r4, r0
    d710:	e5900004 	ldr	r0, [r0, #4]
    d714:	e1a05001 	mov	r5, r1
    d718:	e3500000 	cmp	r0, #0
    d71c:	0a000000 	beq	d724 <CString::operator=(CString const&)+0x1c>
    d720:	eb000c71 	bl	108ec <operator delete[](void*)>
    d724:	e5950004 	ldr	r0, [r5, #4]
    d728:	e59f6030 	ldr	r6, [pc, #48]	; d760 <CString::operator=(CString const&)+0x58>
    d72c:	e3500000 	cmp	r0, #0
    d730:	01a00006 	moveq	r0, r6
    d734:	eb00095c 	bl	fcac <strlen>
    d738:	e2800001 	add	r0, r0, #1
    d73c:	e5840008 	str	r0, [r4, #8]
    d740:	eb000c5d 	bl	108bc <operator new[](unsigned int)>
    d744:	e5840004 	str	r0, [r4, #4]
    d748:	e5951004 	ldr	r1, [r5, #4]
    d74c:	e3510000 	cmp	r1, #0
    d750:	01a01006 	moveq	r1, r6
    d754:	eb0009f5 	bl	ff30 <strcpy>
    d758:	e1a00004 	mov	r0, r4
    d75c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d760:	00014d9c 	.word	0x00014d9c

0000d764 <CString::operator=(CString&&)>:
    d764:	e92d4070 	push	{r4, r5, r6, lr}
    d768:	e1a05000 	mov	r5, r0
    d76c:	e5900004 	ldr	r0, [r0, #4]
    d770:	e1a04001 	mov	r4, r1
    d774:	e3500000 	cmp	r0, #0
    d778:	0a000000 	beq	d780 <CString::operator=(CString&&)+0x1c>
    d77c:	eb000c5a 	bl	108ec <operator delete[](void*)>
    d780:	e5941008 	ldr	r1, [r4, #8]
    d784:	e3a03000 	mov	r3, #0
    d788:	e5942004 	ldr	r2, [r4, #4]
    d78c:	e1a00005 	mov	r0, r5
    d790:	e5851008 	str	r1, [r5, #8]
    d794:	e5852004 	str	r2, [r5, #4]
    d798:	e5843008 	str	r3, [r4, #8]
    d79c:	e5843004 	str	r3, [r4, #4]
    d7a0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d7a4 <CString::GetLength() const>:
    d7a4:	e5900004 	ldr	r0, [r0, #4]
    d7a8:	e3500000 	cmp	r0, #0
    d7ac:	012fff1e 	bxeq	lr
    d7b0:	ea00093d 	b	fcac <strlen>

0000d7b4 <CString::Append(char const*)>:
    d7b4:	e92d4070 	push	{r4, r5, r6, lr}
    d7b8:	e1a04000 	mov	r4, r0
    d7bc:	e5900004 	ldr	r0, [r0, #4]
    d7c0:	e3a03001 	mov	r3, #1
    d7c4:	e1a06001 	mov	r6, r1
    d7c8:	e3500000 	cmp	r0, #0
    d7cc:	e5843008 	str	r3, [r4, #8]
    d7d0:	0a000003 	beq	d7e4 <CString::Append(char const*)+0x30>
    d7d4:	eb000934 	bl	fcac <strlen>
    d7d8:	e5943008 	ldr	r3, [r4, #8]
    d7dc:	e0833000 	add	r3, r3, r0
    d7e0:	e5843008 	str	r3, [r4, #8]
    d7e4:	e1a00006 	mov	r0, r6
    d7e8:	eb00092f 	bl	fcac <strlen>
    d7ec:	e5943008 	ldr	r3, [r4, #8]
    d7f0:	e0800003 	add	r0, r0, r3
    d7f4:	e5840008 	str	r0, [r4, #8]
    d7f8:	eb000c2f 	bl	108bc <operator new[](unsigned int)>
    d7fc:	e5941004 	ldr	r1, [r4, #4]
    d800:	e1a05000 	mov	r5, r0
    d804:	e3510000 	cmp	r1, #0
    d808:	05c01000 	strbeq	r1, [r0]
    d80c:	0a000004 	beq	d824 <CString::Append(char const*)+0x70>
    d810:	eb0009c6 	bl	ff30 <strcpy>
    d814:	e5940004 	ldr	r0, [r4, #4]
    d818:	e3500000 	cmp	r0, #0
    d81c:	0a000000 	beq	d824 <CString::Append(char const*)+0x70>
    d820:	eb000c31 	bl	108ec <operator delete[](void*)>
    d824:	e1a01006 	mov	r1, r6
    d828:	e1a00005 	mov	r0, r5
    d82c:	eb0009d8 	bl	ff94 <strcat>
    d830:	e5845004 	str	r5, [r4, #4]
    d834:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d838 <CString::Compare(char const*) const>:
    d838:	e5900004 	ldr	r0, [r0, #4]
    d83c:	ea000924 	b	fcd4 <strcmp>

0000d840 <CString::Find(char) const>:
    d840:	e5902004 	ldr	r2, [r0, #4]
    d844:	e1d230d0 	ldrsb	r3, [r2]
    d848:	e3530000 	cmp	r3, #0
    d84c:	0a000006 	beq	d86c <CString::Find(char) const+0x2c>
    d850:	e3a00000 	mov	r0, #0
    d854:	e1510003 	cmp	r1, r3
    d858:	012fff1e 	bxeq	lr
    d85c:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d860:	e2800001 	add	r0, r0, #1
    d864:	e3530000 	cmp	r3, #0
    d868:	1afffff9 	bne	d854 <CString::Find(char) const+0x14>
    d86c:	e3e00000 	mvn	r0, #0
    d870:	e12fff1e 	bx	lr

0000d874 <CString::Replace(char const*, char const*)>:
    d874:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d878:	e1d170d0 	ldrsb	r7, [r1]
    d87c:	e3570000 	cmp	r7, #0
    d880:	1a000001 	bne	d88c <CString::Replace(char const*, char const*)+0x18>
    d884:	e1a00007 	mov	r0, r7
    d888:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d88c:	e5904004 	ldr	r4, [r0, #4]
    d890:	e1a05000 	mov	r5, r0
    d894:	e1a06001 	mov	r6, r1
    d898:	e1a08002 	mov	r8, r2
    d89c:	e1a00004 	mov	r0, r4
    d8a0:	eb000901 	bl	fcac <strlen>
    d8a4:	e2800001 	add	r0, r0, #1
    d8a8:	eb000c03 	bl	108bc <operator new[](unsigned int)>
    d8ac:	e1a01004 	mov	r1, r4
    d8b0:	e1a09000 	mov	r9, r0
    d8b4:	eb00099d 	bl	ff30 <strcpy>
    d8b8:	e5950004 	ldr	r0, [r5, #4]
    d8bc:	e3500000 	cmp	r0, #0
    d8c0:	0a000000 	beq	d8c8 <CString::Replace(char const*, char const*)+0x54>
    d8c4:	eb000c08 	bl	108ec <operator delete[](void*)>
    d8c8:	e3a00040 	mov	r0, #64	; 0x40
    d8cc:	e1a04009 	mov	r4, r9
    d8d0:	e5850008 	str	r0, [r5, #8]
    d8d4:	e3a07000 	mov	r7, #0
    d8d8:	eb000bf7 	bl	108bc <operator new[](unsigned int)>
    d8dc:	e5850004 	str	r0, [r5, #4]
    d8e0:	e585000c 	str	r0, [r5, #12]
    d8e4:	e1d610d0 	ldrsb	r1, [r6]
    d8e8:	e1a00004 	mov	r0, r4
    d8ec:	eb0009b9 	bl	ffd8 <strchr>
    d8f0:	e250a000 	subs	sl, r0, #0
    d8f4:	0a000033 	beq	d9c8 <CString::Replace(char const*, char const*)+0x154>
    d8f8:	e154000a 	cmp	r4, sl
    d8fc:	2a000044 	bcs	da14 <CString::Replace(char const*, char const*)+0x1a0>
    d900:	e3a01001 	mov	r1, #1
    d904:	e1a00005 	mov	r0, r5
    d908:	e0d4b0d1 	ldrsb	fp, [r4], #1
    d90c:	ebffff14 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d910:	e595300c 	ldr	r3, [r5, #12]
    d914:	e15a0004 	cmp	sl, r4
    d918:	e2832001 	add	r2, r3, #1
    d91c:	e585200c 	str	r2, [r5, #12]
    d920:	e5c3b000 	strb	fp, [r3]
    d924:	1afffff5 	bne	d900 <CString::Replace(char const*, char const*)+0x8c>
    d928:	e1a0c00a 	mov	ip, sl
    d92c:	e1d630d1 	ldrsb	r3, [r6, #1]
    d930:	e2861001 	add	r1, r6, #1
    d934:	e28a4001 	add	r4, sl, #1
    d938:	e3530000 	cmp	r3, #0
    d93c:	0a000012 	beq	d98c <CString::Replace(char const*, char const*)+0x118>
    d940:	e1a00004 	mov	r0, r4
    d944:	ea000003 	b	d958 <CString::Replace(char const*, char const*)+0xe4>
    d948:	e1f130d1 	ldrsb	r3, [r1, #1]!
    d94c:	e1a04000 	mov	r4, r0
    d950:	e3530000 	cmp	r3, #0
    d954:	0a00000c 	beq	d98c <CString::Replace(char const*, char const*)+0x118>
    d958:	e0d020d1 	ldrsb	r2, [r0], #1
    d95c:	e1520003 	cmp	r2, r3
    d960:	0afffff8 	beq	d948 <CString::Replace(char const*, char const*)+0xd4>
    d964:	e1a0400c 	mov	r4, ip
    d968:	e3a01001 	mov	r1, #1
    d96c:	e1a00005 	mov	r0, r5
    d970:	e0d4a0d1 	ldrsb	sl, [r4], #1
    d974:	ebfffefa 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d978:	e595300c 	ldr	r3, [r5, #12]
    d97c:	e2832001 	add	r2, r3, #1
    d980:	e585200c 	str	r2, [r5, #12]
    d984:	e5c3a000 	strb	sl, [r3]
    d988:	eaffffd5 	b	d8e4 <CString::Replace(char const*, char const*)+0x70>
    d98c:	e1a00008 	mov	r0, r8
    d990:	eb0008c5 	bl	fcac <strlen>
    d994:	e250a000 	subs	sl, r0, #0
    d998:	0a000002 	beq	d9a8 <CString::Replace(char const*, char const*)+0x134>
    d99c:	e1a0100a 	mov	r1, sl
    d9a0:	e1a00005 	mov	r0, r5
    d9a4:	ebfffeee 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d9a8:	e595000c 	ldr	r0, [r5, #12]
    d9ac:	e1a01008 	mov	r1, r8
    d9b0:	eb00095e 	bl	ff30 <strcpy>
    d9b4:	e595000c 	ldr	r0, [r5, #12]
    d9b8:	e2877001 	add	r7, r7, #1
    d9bc:	e080000a 	add	r0, r0, sl
    d9c0:	e585000c 	str	r0, [r5, #12]
    d9c4:	eaffffc6 	b	d8e4 <CString::Replace(char const*, char const*)+0x70>
    d9c8:	e1a00004 	mov	r0, r4
    d9cc:	eb0008b6 	bl	fcac <strlen>
    d9d0:	e2506000 	subs	r6, r0, #0
    d9d4:	0a000002 	beq	d9e4 <CString::Replace(char const*, char const*)+0x170>
    d9d8:	e1a01006 	mov	r1, r6
    d9dc:	e1a00005 	mov	r0, r5
    d9e0:	ebfffedf 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d9e4:	e1a01004 	mov	r1, r4
    d9e8:	e595000c 	ldr	r0, [r5, #12]
    d9ec:	eb00094f 	bl	ff30 <strcpy>
    d9f0:	e595300c 	ldr	r3, [r5, #12]
    d9f4:	e1a00009 	mov	r0, r9
    d9f8:	e3a02000 	mov	r2, #0
    d9fc:	e0831006 	add	r1, r3, r6
    da00:	e585100c 	str	r1, [r5, #12]
    da04:	e7c32006 	strb	r2, [r3, r6]
    da08:	eb000bb7 	bl	108ec <operator delete[](void*)>
    da0c:	e1a00007 	mov	r0, r7
    da10:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da14:	e1a0c004 	mov	ip, r4
    da18:	eaffffc3 	b	d92c <CString::Replace(char const*, char const*)+0xb8>

0000da1c <CString::PutChar(char, unsigned int)>:
    da1c:	e92d4070 	push	{r4, r5, r6, lr}
    da20:	e2524000 	subs	r4, r2, #0
    da24:	08bd8070 	popeq	{r4, r5, r6, pc}
    da28:	e1a06001 	mov	r6, r1
    da2c:	e1a01004 	mov	r1, r4
    da30:	e1a05000 	mov	r5, r0
    da34:	ebfffeca 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da38:	e2442001 	sub	r2, r4, #1
    da3c:	e595300c 	ldr	r3, [r5, #12]
    da40:	e2422001 	sub	r2, r2, #1
    da44:	e3720001 	cmn	r2, #1
    da48:	e2830001 	add	r0, r3, #1
    da4c:	e585000c 	str	r0, [r5, #12]
    da50:	e5c36000 	strb	r6, [r3]
    da54:	1afffff8 	bne	da3c <CString::PutChar(char, unsigned int)+0x20>
    da58:	e8bd8070 	pop	{r4, r5, r6, pc}

0000da5c <CString::PutString(char const*)>:
    da5c:	e92d4070 	push	{r4, r5, r6, lr}
    da60:	e1a04000 	mov	r4, r0
    da64:	e1a00001 	mov	r0, r1
    da68:	e1a06001 	mov	r6, r1
    da6c:	eb00088e 	bl	fcac <strlen>
    da70:	e2505000 	subs	r5, r0, #0
    da74:	0a000002 	beq	da84 <CString::PutString(char const*)+0x28>
    da78:	e1a01005 	mov	r1, r5
    da7c:	e1a00004 	mov	r0, r4
    da80:	ebfffeb7 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da84:	e594000c 	ldr	r0, [r4, #12]
    da88:	e1a01006 	mov	r1, r6
    da8c:	eb000927 	bl	ff30 <strcpy>
    da90:	e594000c 	ldr	r0, [r4, #12]
    da94:	e0800005 	add	r0, r0, r5
    da98:	e584000c 	str	r0, [r4, #12]
    da9c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000daa0 <CString::ReserveSpace(unsigned int)>:
    daa0:	e3510000 	cmp	r1, #0
    daa4:	012fff1e 	bxeq	lr
    daa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    daac:	e1a05000 	mov	r5, r0
    dab0:	e990004c 	ldmib	r0, {r2, r3, r6}
    dab4:	e0466002 	sub	r6, r6, r2
    dab8:	e0811006 	add	r1, r1, r6
    dabc:	e2812001 	add	r2, r1, #1
    dac0:	e1520003 	cmp	r2, r3
    dac4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    dac8:	e2814041 	add	r4, r1, #65	; 0x41
    dacc:	e1a00004 	mov	r0, r4
    dad0:	eb000b79 	bl	108bc <operator new[](unsigned int)>
    dad4:	e595300c 	ldr	r3, [r5, #12]
    dad8:	e3a02000 	mov	r2, #0
    dadc:	e1a07000 	mov	r7, r0
    dae0:	e5c32000 	strb	r2, [r3]
    dae4:	e5951004 	ldr	r1, [r5, #4]
    dae8:	eb000910 	bl	ff30 <strcpy>
    daec:	e5950004 	ldr	r0, [r5, #4]
    daf0:	e3500000 	cmp	r0, #0
    daf4:	0a000000 	beq	dafc <CString::ReserveSpace(unsigned int)+0x5c>
    daf8:	eb000b7b 	bl	108ec <operator delete[](void*)>
    dafc:	e0876006 	add	r6, r7, r6
    db00:	e5857004 	str	r7, [r5, #4]
    db04:	e5854008 	str	r4, [r5, #8]
    db08:	e585600c 	str	r6, [r5, #12]
    db0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000db10 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    db10:	e1510002 	cmp	r1, r2
    db14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    db18:	23a0c001 	movcs	ip, #1
    db1c:	3a00001a 	bcc	db8c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x7c>
    db20:	e00c0c92 	mul	ip, r2, ip
    db24:	e734fc11 	udiv	r4, r1, ip
    db28:	e1a0e004 	mov	lr, r4
    db2c:	e1540002 	cmp	r4, r2
    db30:	2afffffa 	bcs	db20 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
    db34:	e3530000 	cmp	r3, #0
    db38:	e1a05000 	mov	r5, r0
    db3c:	03a07020 	moveq	r7, #32
    db40:	13a07000 	movne	r7, #0
    db44:	e2877037 	add	r7, r7, #55	; 0x37
    db48:	ea000002 	b	db58 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
    db4c:	e73ef411 	udiv	lr, r1, r4
    db50:	e1a0c004 	mov	ip, r4
    db54:	e1a0400e 	mov	r4, lr
    db58:	e087300e 	add	r3, r7, lr
    db5c:	e28e6030 	add	r6, lr, #48	; 0x30
    db60:	e35e0009 	cmp	lr, #9
    db64:	e061149c 	mls	r1, ip, r4, r1
    db68:	e734f21c 	udiv	r4, ip, r2
    db6c:	e6af3073 	sxtb	r3, r3
    db70:	96af3076 	sxtbls	r3, r6
    db74:	e15c0002 	cmp	ip, r2
    db78:	e4c53001 	strb	r3, [r5], #1
    db7c:	2afffff2 	bcs	db4c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
    db80:	e3a03000 	mov	r3, #0
    db84:	e5c53000 	strb	r3, [r5]
    db88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    db8c:	e1a0e001 	mov	lr, r1
    db90:	e3a0c001 	mov	ip, #1
    db94:	e1a04001 	mov	r4, r1
    db98:	eaffffe5 	b	db34 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0000db9c <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    db9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dba0:	e1a06003 	mov	r6, r3
    dba4:	e1a0b002 	mov	fp, r2
    dba8:	e24dd014 	sub	sp, sp, #20
    dbac:	e3a07000 	mov	r7, #0
    dbb0:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
    dbb4:	e5dd903c 	ldrb	r9, [sp, #60]	; 0x3c
    dbb8:	e1520008 	cmp	r2, r8
    dbbc:	e58d000c 	str	r0, [sp, #12]
    dbc0:	e2d63000 	sbcs	r3, r6, #0
    dbc4:	23a05001 	movcs	r5, #1
    dbc8:	3a000040 	bcc	dcd0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x134>
    dbcc:	e0030798 	mul	r3, r8, r7
    dbd0:	e1a0000b 	mov	r0, fp
    dbd4:	e0875895 	umull	r5, r7, r5, r8
    dbd8:	e1a01006 	mov	r1, r6
    dbdc:	e0837007 	add	r7, r3, r7
    dbe0:	e1a02005 	mov	r2, r5
    dbe4:	e1a03007 	mov	r3, r7
    dbe8:	fa001847 	blx	13d0c <__aeabi_uldivmod>
    dbec:	e1500008 	cmp	r0, r8
    dbf0:	e2d13000 	sbcs	r3, r1, #0
    dbf4:	2afffff4 	bcs	dbcc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x30>
    dbf8:	e1a04000 	mov	r4, r0
    dbfc:	e58d1004 	str	r1, [sp, #4]
    dc00:	e59d300c 	ldr	r3, [sp, #12]
    dc04:	e3590000 	cmp	r9, #0
    dc08:	e58d3000 	str	r3, [sp]
    dc0c:	03a03020 	moveq	r3, #32
    dc10:	13a03000 	movne	r3, #0
    dc14:	e2833037 	add	r3, r3, #55	; 0x37
    dc18:	e58d3008 	str	r3, [sp, #8]
    dc1c:	ea000003 	b	dc30 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x94>
    dc20:	fa001839 	blx	13d0c <__aeabi_uldivmod>
    dc24:	e1a07009 	mov	r7, r9
    dc28:	e1a04000 	mov	r4, r0
    dc2c:	e58d1004 	str	r1, [sp, #4]
    dc30:	e1a02005 	mov	r2, r5
    dc34:	e1a0000b 	mov	r0, fp
    dc38:	e1a01006 	mov	r1, r6
    dc3c:	e1a03007 	mov	r3, r7
    dc40:	fa001831 	blx	13d0c <__aeabi_uldivmod>
    dc44:	e59d1008 	ldr	r1, [sp, #8]
    dc48:	e1a09003 	mov	r9, r3
    dc4c:	e59d3004 	ldr	r3, [sp, #4]
    dc50:	e2840030 	add	r0, r4, #48	; 0x30
    dc54:	e0811004 	add	r1, r1, r4
    dc58:	e354000a 	cmp	r4, #10
    dc5c:	e1a0a002 	mov	sl, r2
    dc60:	e2d33000 	sbcs	r3, r3, #0
    dc64:	e6af1071 	sxtb	r1, r1
    dc68:	36af1070 	sxtbcc	r1, r0
    dc6c:	e59d0000 	ldr	r0, [sp]
    dc70:	e3a03000 	mov	r3, #0
    dc74:	e1a0b002 	mov	fp, r2
    dc78:	e1a02008 	mov	r2, r8
    dc7c:	e1a06009 	mov	r6, r9
    dc80:	e4c01001 	strb	r1, [r0], #1
    dc84:	e1a01007 	mov	r1, r7
    dc88:	e58d0000 	str	r0, [sp]
    dc8c:	e1a00005 	mov	r0, r5
    dc90:	fa00181d 	blx	13d0c <__aeabi_uldivmod>
    dc94:	e1550008 	cmp	r5, r8
    dc98:	e1a02000 	mov	r2, r0
    dc9c:	e1a03001 	mov	r3, r1
    dca0:	e1a0000a 	mov	r0, sl
    dca4:	e1a01009 	mov	r1, r9
    dca8:	e1a05002 	mov	r5, r2
    dcac:	e1a09003 	mov	r9, r3
    dcb0:	e2d7c000 	sbcs	ip, r7, #0
    dcb4:	2affffd9 	bcs	dc20 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x84>
    dcb8:	e59d2000 	ldr	r2, [sp]
    dcbc:	e3a03000 	mov	r3, #0
    dcc0:	e59d000c 	ldr	r0, [sp, #12]
    dcc4:	e5c23000 	strb	r3, [r2]
    dcc8:	e28dd014 	add	sp, sp, #20
    dccc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcd0:	e1a04002 	mov	r4, r2
    dcd4:	e3a05001 	mov	r5, #1
    dcd8:	e58d6004 	str	r6, [sp, #4]
    dcdc:	eaffffc7 	b	dc00 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x64>

0000dce0 <CString::ftoa(char*, double, unsigned int)>:
    dce0:	eeb50bc0 	vcmpe.f64	d0, #0.0
    dce4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    dce8:	eddf0b8a 	vldr	d16, [pc, #552]	; df18 <CString::ftoa(char*, double, unsigned int)+0x238>
    dcec:	ed2d8b02 	vpush	{d8}
    dcf0:	eeb08b40 	vmov.f64	d8, d0
    dcf4:	e1a06000 	mov	r6, r0
    dcf8:	e24dd014 	sub	sp, sp, #20
    dcfc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    dd00:	e1a04000 	mov	r4, r0
    dd04:	e1a07001 	mov	r7, r1
    dd08:	4eb18b40 	vnegmi.f64	d8, d0
    dd0c:	43a0302d 	movmi	r3, #45	; 0x2d
    dd10:	44c63001 	strbmi	r3, [r6], #1
    dd14:	eeb48be0 	vcmpe.f64	d8, d16
    dd18:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    dd1c:	ca00006b 	bgt	ded0 <CString::ftoa(char*, double, unsigned int)+0x1f0>
    dd20:	eefc7bc8 	vcvt.u32.f64	s15, d8
    dd24:	ee175a90 	vmov	r5, s15
    dd28:	e3550009 	cmp	r5, #9
    dd2c:	83a02001 	movhi	r2, #1
    dd30:	83a0100a 	movhi	r1, #10
    dd34:	9a00006c 	bls	deec <CString::ftoa(char*, double, unsigned int)+0x20c>
    dd38:	e0020291 	mul	r2, r1, r2
    dd3c:	e733f215 	udiv	r3, r5, r2
    dd40:	e3530009 	cmp	r3, #9
    dd44:	8afffffb 	bhi	dd38 <CString::ftoa(char*, double, unsigned int)+0x58>
    dd48:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    dd4c:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    dd50:	e1a01006 	mov	r1, r6
    dd54:	e1a00005 	mov	r0, r5
    dd58:	ea000001 	b	dd64 <CString::ftoa(char*, double, unsigned int)+0x84>
    dd5c:	e1a02003 	mov	r2, r3
    dd60:	e733f310 	udiv	r3, r0, r3
    dd64:	e3530009 	cmp	r3, #9
    dd68:	e283c057 	add	ip, r3, #87	; 0x57
    dd6c:	e73ef210 	udiv	lr, r0, r2
    dd70:	e2839030 	add	r9, r3, #48	; 0x30
    dd74:	e6afc07c 	sxtb	ip, ip
    dd78:	96afc079 	sxtbls	ip, r9
    dd7c:	e3520009 	cmp	r2, #9
    dd80:	e4c1c001 	strb	ip, [r1], #1
    dd84:	e0600e92 	mls	r0, r2, lr, r0
    dd88:	e083e298 	umull	lr, r3, r8, r2
    dd8c:	e1a031a3 	lsr	r3, r3, #3
    dd90:	8afffff1 	bhi	dd5c <CString::ftoa(char*, double, unsigned int)+0x7c>
    dd94:	e3a03000 	mov	r3, #0
    dd98:	e3570000 	cmp	r7, #0
    dd9c:	e5c13000 	strb	r3, [r1]
    dda0:	1a000003 	bne	ddb4 <CString::ftoa(char*, double, unsigned int)+0xd4>
    dda4:	e1a00004 	mov	r0, r4
    dda8:	e28dd014 	add	sp, sp, #20
    ddac:	ecbd8b02 	vpop	{d8}
    ddb0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ddb4:	e1a00006 	mov	r0, r6
    ddb8:	eb0007bb 	bl	fcac <strlen>
    ddbc:	e3570009 	cmp	r7, #9
    ddc0:	e0868000 	add	r8, r6, r0
    ddc4:	e3a0302e 	mov	r3, #46	; 0x2e
    ddc8:	e7c63000 	strb	r3, [r6, r0]
    ddcc:	31a06007 	movcc	r6, r7
    ddd0:	23a06009 	movcs	r6, #9
    ddd4:	e3570001 	cmp	r7, #1
    ddd8:	e2887001 	add	r7, r8, #1
    dddc:	0a000047 	beq	df00 <CString::ftoa(char*, double, unsigned int)+0x220>
    dde0:	e3a0200a 	mov	r2, #10
    dde4:	e3a03002 	mov	r3, #2
    dde8:	e1a01002 	mov	r1, r2
    ddec:	e2833001 	add	r3, r3, #1
    ddf0:	e0020291 	mul	r2, r1, r2
    ddf4:	e1530006 	cmp	r3, r6
    ddf8:	9afffffb 	bls	ddec <CString::ftoa(char*, double, unsigned int)+0x10c>
    ddfc:	ee072a90 	vmov	s15, r2
    de00:	eef81b67 	vcvt.f64.u32	d17, s15
    de04:	ee075a90 	vmov	s15, r5
    de08:	eef80b67 	vcvt.f64.u32	d16, s15
    de0c:	ee388b60 	vsub.f64	d8, d8, d16
    de10:	ee288b21 	vmul.f64	d8, d8, d17
    de14:	eefc7bc8 	vcvt.u32.f64	s15, d8
    de18:	ee17ca90 	vmov	ip, s15
    de1c:	e35c0009 	cmp	ip, #9
    de20:	83a02001 	movhi	r2, #1
    de24:	83a0000a 	movhi	r0, #10
    de28:	9a000036 	bls	df08 <CString::ftoa(char*, double, unsigned int)+0x228>
    de2c:	e0020290 	mul	r2, r0, r2
    de30:	e731f21c 	udiv	r1, ip, r2
    de34:	e1a03001 	mov	r3, r1
    de38:	e3510009 	cmp	r1, #9
    de3c:	8afffffa 	bhi	de2c <CString::ftoa(char*, double, unsigned int)+0x14c>
    de40:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    de44:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    de48:	e28de004 	add	lr, sp, #4
    de4c:	ea000002 	b	de5c <CString::ftoa(char*, double, unsigned int)+0x17c>
    de50:	e1a02003 	mov	r2, r3
    de54:	e733f31c 	udiv	r3, ip, r3
    de58:	e1a01003 	mov	r1, r3
    de5c:	e2830057 	add	r0, r3, #87	; 0x57
    de60:	e3530009 	cmp	r3, #9
    de64:	e2839030 	add	r9, r3, #48	; 0x30
    de68:	e06cc192 	mls	ip, r2, r1, ip
    de6c:	e6af1070 	sxtb	r1, r0
    de70:	e0830295 	umull	r0, r3, r5, r2
    de74:	96af1079 	sxtbls	r1, r9
    de78:	e3520009 	cmp	r2, #9
    de7c:	e4ce1001 	strb	r1, [lr], #1
    de80:	e1a031a3 	lsr	r3, r3, #3
    de84:	8afffff1 	bhi	de50 <CString::ftoa(char*, double, unsigned int)+0x170>
    de88:	e3a03000 	mov	r3, #0
    de8c:	e28d0004 	add	r0, sp, #4
    de90:	e5ce3000 	strb	r3, [lr]
    de94:	eb000784 	bl	fcac <strlen>
    de98:	e0566000 	subs	r6, r6, r0
    de9c:	0a000015 	beq	def8 <CString::ftoa(char*, double, unsigned int)+0x218>
    dea0:	e2866001 	add	r6, r6, #1
    dea4:	e3a03030 	mov	r3, #48	; 0x30
    dea8:	e0880006 	add	r0, r8, r6
    deac:	e4c73001 	strb	r3, [r7], #1
    deb0:	e1570000 	cmp	r7, r0
    deb4:	1afffffc 	bne	deac <CString::ftoa(char*, double, unsigned int)+0x1cc>
    deb8:	e28d1004 	add	r1, sp, #4
    debc:	eb00081b 	bl	ff30 <strcpy>
    dec0:	e1a00004 	mov	r0, r4
    dec4:	e28dd014 	add	sp, sp, #20
    dec8:	ecbd8b02 	vpop	{d8}
    decc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ded0:	e59f1048 	ldr	r1, [pc, #72]	; df20 <CString::ftoa(char*, double, unsigned int)+0x240>
    ded4:	e1a00006 	mov	r0, r6
    ded8:	eb000814 	bl	ff30 <strcpy>
    dedc:	e1a00004 	mov	r0, r4
    dee0:	e28dd014 	add	sp, sp, #20
    dee4:	ecbd8b02 	vpop	{d8}
    dee8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    deec:	ee173a90 	vmov	r3, s15
    def0:	e3a02001 	mov	r2, #1
    def4:	eaffff93 	b	dd48 <CString::ftoa(char*, double, unsigned int)+0x68>
    def8:	e1a00007 	mov	r0, r7
    defc:	eaffffed 	b	deb8 <CString::ftoa(char*, double, unsigned int)+0x1d8>
    df00:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    df04:	eaffffbe 	b	de04 <CString::ftoa(char*, double, unsigned int)+0x124>
    df08:	ee173a90 	vmov	r3, s15
    df0c:	ee171a90 	vmov	r1, s15
    df10:	e3a02001 	mov	r2, #1
    df14:	eaffffc9 	b	de40 <CString::ftoa(char*, double, unsigned int)+0x160>
    df18:	ffe00000 	.word	0xffe00000
    df1c:	41efffff 	.word	0x41efffff
    df20:	00014da0 	.word	0x00014da0

0000df24 <CString::FormatV(char const*, std::__va_list)>:
    df24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df28:	e1a0a000 	mov	sl, r0
    df2c:	e5900004 	ldr	r0, [r0, #4]
    df30:	e24dd064 	sub	sp, sp, #100	; 0x64
    df34:	e1a0b001 	mov	fp, r1
    df38:	e3500000 	cmp	r0, #0
    df3c:	e58d2010 	str	r2, [sp, #16]
    df40:	0a000000 	beq	df48 <CString::FormatV(char const*, std::__va_list)+0x24>
    df44:	eb000a68 	bl	108ec <operator delete[](void*)>
    df48:	e3a00040 	mov	r0, #64	; 0x40
    df4c:	e58a0008 	str	r0, [sl, #8]
    df50:	eb000a59 	bl	108bc <operator new[](unsigned int)>
    df54:	e58a0004 	str	r0, [sl, #4]
    df58:	e58a000c 	str	r0, [sl, #12]
    df5c:	e1db40d0 	ldrsb	r4, [fp]
    df60:	e3540000 	cmp	r4, #0
    df64:	0a000074 	beq	e13c <CString::FormatV(char const*, std::__va_list)+0x218>
    df68:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    df6c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    df70:	e58d3034 	str	r3, [sp, #52]	; 0x34
    df74:	e3540025 	cmp	r4, #37	; 0x25
    df78:	1a000063 	bne	e10c <CString::FormatV(char const*, std::__va_list)+0x1e8>
    df7c:	e1db30d1 	ldrsb	r3, [fp, #1]
    df80:	e3530025 	cmp	r3, #37	; 0x25
    df84:	0a000070 	beq	e14c <CString::FormatV(char const*, std::__va_list)+0x228>
    df88:	e3530023 	cmp	r3, #35	; 0x23
    df8c:	e3a06000 	mov	r6, #0
    df90:	128bb001 	addne	fp, fp, #1
    df94:	13a0c000 	movne	ip, #0
    df98:	03a0c001 	moveq	ip, #1
    df9c:	01db30d2 	ldrsbeq	r3, [fp, #2]
    dfa0:	028bb002 	addeq	fp, fp, #2
    dfa4:	e353002d 	cmp	r3, #45	; 0x2d
    dfa8:	03a02001 	moveq	r2, #1
    dfac:	13a02000 	movne	r2, #0
    dfb0:	e58d2018 	str	r2, [sp, #24]
    dfb4:	01db30d1 	ldrsbeq	r3, [fp, #1]
    dfb8:	028bb001 	addeq	fp, fp, #1
    dfbc:	e3530030 	cmp	r3, #48	; 0x30
    dfc0:	03a02001 	moveq	r2, #1
    dfc4:	13a02000 	movne	r2, #0
    dfc8:	e58d201c 	str	r2, [sp, #28]
    dfcc:	01db30d1 	ldrsbeq	r3, [fp, #1]
    dfd0:	028bb001 	addeq	fp, fp, #1
    dfd4:	e2432030 	sub	r2, r3, #48	; 0x30
    dfd8:	e6ef2072 	uxtb	r2, r2
    dfdc:	e3520009 	cmp	r2, #9
    dfe0:	8a000007 	bhi	e004 <CString::FormatV(char const*, std::__va_list)+0xe0>
    dfe4:	e3a0000a 	mov	r0, #10
    dfe8:	e0263690 	mla	r6, r0, r6, r3
    dfec:	e1fb30d1 	ldrsb	r3, [fp, #1]!
    dff0:	e2432030 	sub	r2, r3, #48	; 0x30
    dff4:	e2466030 	sub	r6, r6, #48	; 0x30
    dff8:	e6ef2072 	uxtb	r2, r2
    dffc:	e3520009 	cmp	r2, #9
    e000:	9afffff8 	bls	dfe8 <CString::FormatV(char const*, std::__va_list)+0xc4>
    e004:	e353002e 	cmp	r3, #46	; 0x2e
    e008:	13a01006 	movne	r1, #6
    e00c:	11db90d0 	ldrsbne	r9, [fp]
    e010:	0a0001a6 	beq	e6b0 <CString::FormatV(char const*, std::__va_list)+0x78c>
    e014:	e359006c 	cmp	r9, #108	; 0x6c
    e018:	13a03000 	movne	r3, #0
    e01c:	158d3004 	strne	r3, [sp, #4]
    e020:	11a05003 	movne	r5, r3
    e024:	1a00000a 	bne	e054 <CString::FormatV(char const*, std::__va_list)+0x130>
    e028:	e1db90d1 	ldrsb	r9, [fp, #1]
    e02c:	e359006c 	cmp	r9, #108	; 0x6c
    e030:	03a05000 	moveq	r5, #0
    e034:	13a05001 	movne	r5, #1
    e038:	03a03001 	moveq	r3, #1
    e03c:	13a03000 	movne	r3, #0
    e040:	01db90d2 	ldrsbeq	r9, [fp, #2]
    e044:	028bb001 	addeq	fp, fp, #1
    e048:	e28bb001 	add	fp, fp, #1
    e04c:	058d3004 	streq	r3, [sp, #4]
    e050:	158d3004 	strne	r3, [sp, #4]
    e054:	e2493058 	sub	r3, r9, #88	; 0x58
    e058:	e3530020 	cmp	r3, #32
    e05c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e060:	ea000042 	b	e170 <CString::FormatV(char const*, std::__va_list)+0x24c>
    e064:	0000e1a0 	.word	0x0000e1a0
    e068:	0000e170 	.word	0x0000e170
    e06c:	0000e170 	.word	0x0000e170
    e070:	0000e170 	.word	0x0000e170
    e074:	0000e170 	.word	0x0000e170
    e078:	0000e170 	.word	0x0000e170
    e07c:	0000e170 	.word	0x0000e170
    e080:	0000e170 	.word	0x0000e170
    e084:	0000e170 	.word	0x0000e170
    e088:	0000e170 	.word	0x0000e170
    e08c:	0000e170 	.word	0x0000e170
    e090:	0000e0e8 	.word	0x0000e0e8
    e094:	0000e3b0 	.word	0x0000e3b0
    e098:	0000e170 	.word	0x0000e170
    e09c:	0000e518 	.word	0x0000e518
    e0a0:	0000e170 	.word	0x0000e170
    e0a4:	0000e170 	.word	0x0000e170
    e0a8:	0000e3b0 	.word	0x0000e3b0
    e0ac:	0000e170 	.word	0x0000e170
    e0b0:	0000e170 	.word	0x0000e170
    e0b4:	0000e170 	.word	0x0000e170
    e0b8:	0000e170 	.word	0x0000e170
    e0bc:	0000e170 	.word	0x0000e170
    e0c0:	0000e5e8 	.word	0x0000e5e8
    e0c4:	0000e1a0 	.word	0x0000e1a0
    e0c8:	0000e170 	.word	0x0000e170
    e0cc:	0000e170 	.word	0x0000e170
    e0d0:	0000e598 	.word	0x0000e598
    e0d4:	0000e170 	.word	0x0000e170
    e0d8:	0000e8e4 	.word	0x0000e8e4
    e0dc:	0000e170 	.word	0x0000e170
    e0e0:	0000e170 	.word	0x0000e170
    e0e4:	0000e1a0 	.word	0x0000e1a0
    e0e8:	e59d5010 	ldr	r5, [sp, #16]
    e0ec:	e59d3018 	ldr	r3, [sp, #24]
    e0f0:	e4954004 	ldr	r4, [r5], #4
    e0f4:	e3530000 	cmp	r3, #0
    e0f8:	e6af4074 	sxtb	r4, r4
    e0fc:	1a000263 	bne	ea90 <CString::FormatV(char const*, std::__va_list)+0xb6c>
    e100:	e3560001 	cmp	r6, #1
    e104:	8a0001f8 	bhi	e8ec <CString::FormatV(char const*, std::__va_list)+0x9c8>
    e108:	e58d5010 	str	r5, [sp, #16]
    e10c:	e3a01001 	mov	r1, #1
    e110:	e1a0000a 	mov	r0, sl
    e114:	ebfffd12 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e118:	e59a300c 	ldr	r3, [sl, #12]
    e11c:	e2832001 	add	r2, r3, #1
    e120:	e58a200c 	str	r2, [sl, #12]
    e124:	e5c34000 	strb	r4, [r3]
    e128:	e28bb001 	add	fp, fp, #1
    e12c:	e1db40d0 	ldrsb	r4, [fp]
    e130:	e3540000 	cmp	r4, #0
    e134:	1affff8e 	bne	df74 <CString::FormatV(char const*, std::__va_list)+0x50>
    e138:	e59a000c 	ldr	r0, [sl, #12]
    e13c:	e3a03000 	mov	r3, #0
    e140:	e5c03000 	strb	r3, [r0]
    e144:	e28dd064 	add	sp, sp, #100	; 0x64
    e148:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e14c:	e3a01001 	mov	r1, #1
    e150:	e1a0000a 	mov	r0, sl
    e154:	ebfffd02 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e158:	e59a300c 	ldr	r3, [sl, #12]
    e15c:	e28bb002 	add	fp, fp, #2
    e160:	e2832001 	add	r2, r3, #1
    e164:	e58a200c 	str	r2, [sl, #12]
    e168:	e5c34000 	strb	r4, [r3]
    e16c:	eaffffee 	b	e12c <CString::FormatV(char const*, std::__va_list)+0x208>
    e170:	e3a01001 	mov	r1, #1
    e174:	e1a0000a 	mov	r0, sl
    e178:	ebfffcf9 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e17c:	e59a300c 	ldr	r3, [sl, #12]
    e180:	e3a01001 	mov	r1, #1
    e184:	e3a02025 	mov	r2, #37	; 0x25
    e188:	e0830001 	add	r0, r3, r1
    e18c:	e58a000c 	str	r0, [sl, #12]
    e190:	e5c32000 	strb	r2, [r3]
    e194:	e1a0000a 	mov	r0, sl
    e198:	e1db40d0 	ldrsb	r4, [fp]
    e19c:	eaffffdc 	b	e114 <CString::FormatV(char const*, std::__va_list)+0x1f0>
    e1a0:	e35c0000 	cmp	ip, #0
    e1a4:	03a07010 	moveq	r7, #16
    e1a8:	1a0001b9 	bne	e894 <CString::FormatV(char const*, std::__va_list)+0x970>
    e1ac:	e59d3004 	ldr	r3, [sp, #4]
    e1b0:	e3530000 	cmp	r3, #0
    e1b4:	e59d3010 	ldr	r3, [sp, #16]
    e1b8:	0a00011b 	beq	e62c <CString::FormatV(char const*, std::__va_list)+0x708>
    e1bc:	e2833007 	add	r3, r3, #7
    e1c0:	e3a08000 	mov	r8, #0
    e1c4:	e3c33007 	bic	r3, r3, #7
    e1c8:	e5932004 	ldr	r2, [r3, #4]
    e1cc:	e4934008 	ldr	r4, [r3], #8
    e1d0:	e58d3010 	str	r3, [sp, #16]
    e1d4:	e1a03002 	mov	r3, r2
    e1d8:	e1540007 	cmp	r4, r7
    e1dc:	e58d2024 	str	r2, [sp, #36]	; 0x24
    e1e0:	e58d4020 	str	r4, [sp, #32]
    e1e4:	e2d32000 	sbcs	r2, r3, #0
    e1e8:	3a000242 	bcc	eaf8 <CString::FormatV(char const*, std::__va_list)+0xbd4>
    e1ec:	e3a05001 	mov	r5, #1
    e1f0:	e58d6004 	str	r6, [sp, #4]
    e1f4:	e1a06005 	mov	r6, r5
    e1f8:	e1a05003 	mov	r5, r3
    e1fc:	e0030897 	mul	r3, r7, r8
    e200:	e1a00004 	mov	r0, r4
    e204:	e0886796 	umull	r6, r8, r6, r7
    e208:	e1a01005 	mov	r1, r5
    e20c:	e0838008 	add	r8, r3, r8
    e210:	e1a02006 	mov	r2, r6
    e214:	e1a03008 	mov	r3, r8
    e218:	fa0016bb 	blx	13d0c <__aeabi_uldivmod>
    e21c:	e1500007 	cmp	r0, r7
    e220:	e2d13000 	sbcs	r3, r1, #0
    e224:	2afffff4 	bcs	e1fc <CString::FormatV(char const*, std::__va_list)+0x2d8>
    e228:	e1a05006 	mov	r5, r6
    e22c:	e59d6004 	ldr	r6, [sp, #4]
    e230:	e1a04000 	mov	r4, r0
    e234:	e58d1008 	str	r1, [sp, #8]
    e238:	e3590058 	cmp	r9, #88	; 0x58
    e23c:	e28d203c 	add	r2, sp, #60	; 0x3c
    e240:	13a03020 	movne	r3, #32
    e244:	03a03000 	moveq	r3, #0
    e248:	e2833037 	add	r3, r3, #55	; 0x37
    e24c:	e58d6028 	str	r6, [sp, #40]	; 0x28
    e250:	e1cda2fc 	strd	sl, [sp, #44]	; 0x2c
    e254:	e1a06007 	mov	r6, r7
    e258:	e1cda2d0 	ldrd	sl, [sp, #32]
    e25c:	e58d200c 	str	r2, [sp, #12]
    e260:	e58d3014 	str	r3, [sp, #20]
    e264:	e58d2004 	str	r2, [sp, #4]
    e268:	ea000003 	b	e27c <CString::FormatV(char const*, std::__va_list)+0x358>
    e26c:	fa0016a6 	blx	13d0c <__aeabi_uldivmod>
    e270:	e1a08007 	mov	r8, r7
    e274:	e1a04000 	mov	r4, r0
    e278:	e58d1008 	str	r1, [sp, #8]
    e27c:	e1a02005 	mov	r2, r5
    e280:	e1a0000a 	mov	r0, sl
    e284:	e1a0100b 	mov	r1, fp
    e288:	e1a03008 	mov	r3, r8
    e28c:	fa00169e 	blx	13d0c <__aeabi_uldivmod>
    e290:	e1a07003 	mov	r7, r3
    e294:	e59d3008 	ldr	r3, [sp, #8]
    e298:	e354000a 	cmp	r4, #10
    e29c:	e59d1014 	ldr	r1, [sp, #20]
    e2a0:	e2840030 	add	r0, r4, #48	; 0x30
    e2a4:	e2d33000 	sbcs	r3, r3, #0
    e2a8:	e59d3004 	ldr	r3, [sp, #4]
    e2ac:	e0811004 	add	r1, r1, r4
    e2b0:	e1a09002 	mov	r9, r2
    e2b4:	e1a0a002 	mov	sl, r2
    e2b8:	e1a02006 	mov	r2, r6
    e2bc:	e6af1071 	sxtb	r1, r1
    e2c0:	36af1070 	sxtbcc	r1, r0
    e2c4:	e4c31001 	strb	r1, [r3], #1
    e2c8:	e1a00005 	mov	r0, r5
    e2cc:	e1a01008 	mov	r1, r8
    e2d0:	e1a0b007 	mov	fp, r7
    e2d4:	e58d3004 	str	r3, [sp, #4]
    e2d8:	e3a03000 	mov	r3, #0
    e2dc:	fa00168a 	blx	13d0c <__aeabi_uldivmod>
    e2e0:	e1550006 	cmp	r5, r6
    e2e4:	e1a02000 	mov	r2, r0
    e2e8:	e1a03001 	mov	r3, r1
    e2ec:	e1a00009 	mov	r0, r9
    e2f0:	e1a01007 	mov	r1, r7
    e2f4:	e1a05002 	mov	r5, r2
    e2f8:	e1a07003 	mov	r7, r3
    e2fc:	e2d8c000 	sbcs	ip, r8, #0
    e300:	2affffd9 	bcs	e26c <CString::FormatV(char const*, std::__va_list)+0x348>
    e304:	e28d6028 	add	r6, sp, #40	; 0x28
    e308:	e59d2004 	ldr	r2, [sp, #4]
    e30c:	e3a03000 	mov	r3, #0
    e310:	e8960c40 	ldm	r6, {r6, sl, fp}
    e314:	e5c23000 	strb	r3, [r2]
    e318:	e59d000c 	ldr	r0, [sp, #12]
    e31c:	eb000662 	bl	fcac <strlen>
    e320:	e59d3018 	ldr	r3, [sp, #24]
    e324:	e1a04000 	mov	r4, r0
    e328:	e3530000 	cmp	r3, #0
    e32c:	1a0000ef 	bne	e6f0 <CString::FormatV(char const*, std::__va_list)+0x7cc>
    e330:	e1500006 	cmp	r0, r6
    e334:	2a00000f 	bcs	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    e338:	e59d301c 	ldr	r3, [sp, #28]
    e33c:	e0464000 	sub	r4, r6, r0
    e340:	e1a01004 	mov	r1, r4
    e344:	e1a0000a 	mov	r0, sl
    e348:	e3530000 	cmp	r3, #0
    e34c:	13a05030 	movne	r5, #48	; 0x30
    e350:	03a05020 	moveq	r5, #32
    e354:	ebfffc82 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e358:	e2443001 	sub	r3, r4, #1
    e35c:	e59a200c 	ldr	r2, [sl, #12]
    e360:	e2433001 	sub	r3, r3, #1
    e364:	e3730001 	cmn	r3, #1
    e368:	e2821001 	add	r1, r2, #1
    e36c:	e58a100c 	str	r1, [sl, #12]
    e370:	e5c25000 	strb	r5, [r2]
    e374:	1afffff8 	bne	e35c <CString::FormatV(char const*, std::__va_list)+0x438>
    e378:	e59d000c 	ldr	r0, [sp, #12]
    e37c:	eb00064a 	bl	fcac <strlen>
    e380:	e2504000 	subs	r4, r0, #0
    e384:	0a000002 	beq	e394 <CString::FormatV(char const*, std::__va_list)+0x470>
    e388:	e1a01004 	mov	r1, r4
    e38c:	e1a0000a 	mov	r0, sl
    e390:	ebfffc73 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e394:	e59d100c 	ldr	r1, [sp, #12]
    e398:	e59a000c 	ldr	r0, [sl, #12]
    e39c:	eb0006e3 	bl	ff30 <strcpy>
    e3a0:	e59a000c 	ldr	r0, [sl, #12]
    e3a4:	e0800004 	add	r0, r0, r4
    e3a8:	e58a000c 	str	r0, [sl, #12]
    e3ac:	eaffff5d 	b	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    e3b0:	e59d3004 	ldr	r3, [sp, #4]
    e3b4:	e3530000 	cmp	r3, #0
    e3b8:	e59d3010 	ldr	r3, [sp, #16]
    e3bc:	0a0000e8 	beq	e764 <CString::FormatV(char const*, std::__va_list)+0x840>
    e3c0:	e2833007 	add	r3, r3, #7
    e3c4:	e3c33007 	bic	r3, r3, #7
    e3c8:	e5938004 	ldr	r8, [r3, #4]
    e3cc:	e4932008 	ldr	r2, [r3], #8
    e3d0:	e3580000 	cmp	r8, #0
    e3d4:	e58d3010 	str	r3, [sp, #16]
    e3d8:	a3a03000 	movge	r3, #0
    e3dc:	a58d3004 	strge	r3, [sp, #4]
    e3e0:	aa000002 	bge	e3f0 <CString::FormatV(char const*, std::__va_list)+0x4cc>
    e3e4:	e2729000 	rsbs	r9, r2, #0
    e3e8:	e1a02009 	mov	r2, r9
    e3ec:	e2e88000 	rsc	r8, r8, #0
    e3f0:	e352000a 	cmp	r2, #10
    e3f4:	e1a03002 	mov	r3, r2
    e3f8:	e58d8014 	str	r8, [sp, #20]
    e3fc:	e2d82000 	sbcs	r2, r8, #0
    e400:	e58d3008 	str	r3, [sp, #8]
    e404:	ba0001f3 	blt	ebd8 <CString::FormatV(char const*, std::__va_list)+0xcb4>
    e408:	e1a07008 	mov	r7, r8
    e40c:	e3a04001 	mov	r4, #1
    e410:	e3a05000 	mov	r5, #0
    e414:	e1a08003 	mov	r8, r3
    e418:	e0941004 	adds	r1, r4, r4
    e41c:	e1a00008 	mov	r0, r8
    e420:	e0a53005 	adc	r3, r5, r5
    e424:	e0911001 	adds	r1, r1, r1
    e428:	e0a33003 	adc	r3, r3, r3
    e42c:	e0912004 	adds	r2, r1, r4
    e430:	e0a55003 	adc	r5, r5, r3
    e434:	e0922002 	adds	r2, r2, r2
    e438:	e0a55005 	adc	r5, r5, r5
    e43c:	e1a01007 	mov	r1, r7
    e440:	e1a03005 	mov	r3, r5
    e444:	e1a04002 	mov	r4, r2
    e448:	fa00162f 	blx	13d0c <__aeabi_uldivmod>
    e44c:	e350000a 	cmp	r0, #10
    e450:	e2d13000 	sbcs	r3, r1, #0
    e454:	2affffef 	bcs	e418 <CString::FormatV(char const*, std::__va_list)+0x4f4>
    e458:	e1a09000 	mov	r9, r0
    e45c:	e1a07001 	mov	r7, r1
    e460:	e1cda2f4 	strd	sl, [sp, #36]	; 0x24
    e464:	e28d803c 	add	r8, sp, #60	; 0x3c
    e468:	e59da008 	ldr	sl, [sp, #8]
    e46c:	e59db014 	ldr	fp, [sp, #20]
    e470:	e58d800c 	str	r8, [sp, #12]
    e474:	e58d6020 	str	r6, [sp, #32]
    e478:	ea000003 	b	e48c <CString::FormatV(char const*, std::__va_list)+0x568>
    e47c:	fa001622 	blx	13d0c <__aeabi_uldivmod>
    e480:	e1a05006 	mov	r5, r6
    e484:	e1a09000 	mov	r9, r0
    e488:	e1a07001 	mov	r7, r1
    e48c:	e1a02004 	mov	r2, r4
    e490:	e1a0000a 	mov	r0, sl
    e494:	e1a0100b 	mov	r1, fp
    e498:	e1a03005 	mov	r3, r5
    e49c:	fa00161a 	blx	13d0c <__aeabi_uldivmod>
    e4a0:	e2890030 	add	r0, r9, #48	; 0x30
    e4a4:	e2891057 	add	r1, r9, #87	; 0x57
    e4a8:	e359000a 	cmp	r9, #10
    e4ac:	e1a06002 	mov	r6, r2
    e4b0:	e2d72000 	sbcs	r2, r7, #0
    e4b4:	e6af1071 	sxtb	r1, r1
    e4b8:	e1a07003 	mov	r7, r3
    e4bc:	36af1070 	sxtbcc	r1, r0
    e4c0:	e3a0200a 	mov	r2, #10
    e4c4:	e1a00004 	mov	r0, r4
    e4c8:	e4c81001 	strb	r1, [r8], #1
    e4cc:	e1a0b003 	mov	fp, r3
    e4d0:	e1a01005 	mov	r1, r5
    e4d4:	e3a03000 	mov	r3, #0
    e4d8:	e1a0a006 	mov	sl, r6
    e4dc:	fa00160a 	blx	13d0c <__aeabi_uldivmod>
    e4e0:	e354000a 	cmp	r4, #10
    e4e4:	e1a02000 	mov	r2, r0
    e4e8:	e1a03001 	mov	r3, r1
    e4ec:	e1a00006 	mov	r0, r6
    e4f0:	e1a01007 	mov	r1, r7
    e4f4:	e1a04002 	mov	r4, r2
    e4f8:	e1a06003 	mov	r6, r3
    e4fc:	e2d5c000 	sbcs	ip, r5, #0
    e500:	2affffdd 	bcs	e47c <CString::FormatV(char const*, std::__va_list)+0x558>
    e504:	e28d6020 	add	r6, sp, #32
    e508:	e3a03000 	mov	r3, #0
    e50c:	e5c83000 	strb	r3, [r8]
    e510:	e8960c40 	ldm	r6, {r6, sl, fp}
    e514:	ea0000b6 	b	e7f4 <CString::FormatV(char const*, std::__va_list)+0x8d0>
    e518:	e59d3010 	ldr	r3, [sp, #16]
    e51c:	e2833007 	add	r3, r3, #7
    e520:	e3c33007 	bic	r3, r3, #7
    e524:	ecb30b02 	vldmia	r3!, {d0}
    e528:	e58d3010 	str	r3, [sp, #16]
    e52c:	e28d303c 	add	r3, sp, #60	; 0x3c
    e530:	e1a04003 	mov	r4, r3
    e534:	e1a00003 	mov	r0, r3
    e538:	e58d300c 	str	r3, [sp, #12]
    e53c:	ebfffde7 	bl	dce0 <CString::ftoa(char*, double, unsigned int)>
    e540:	e1a00004 	mov	r0, r4
    e544:	eb0005d8 	bl	fcac <strlen>
    e548:	e59d3018 	ldr	r3, [sp, #24]
    e54c:	e1a04000 	mov	r4, r0
    e550:	e3530000 	cmp	r3, #0
    e554:	1a000130 	bne	ea1c <CString::FormatV(char const*, std::__va_list)+0xaf8>
    e558:	e1500006 	cmp	r0, r6
    e55c:	2affff85 	bcs	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    e560:	e0464000 	sub	r4, r6, r0
    e564:	e1a0000a 	mov	r0, sl
    e568:	e1a01004 	mov	r1, r4
    e56c:	ebfffbfc 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e570:	e2443001 	sub	r3, r4, #1
    e574:	e3a00020 	mov	r0, #32
    e578:	e59a200c 	ldr	r2, [sl, #12]
    e57c:	e2433001 	sub	r3, r3, #1
    e580:	e3730001 	cmn	r3, #1
    e584:	e2821001 	add	r1, r2, #1
    e588:	e58a100c 	str	r1, [sl, #12]
    e58c:	e5c20000 	strb	r0, [r2]
    e590:	1afffff8 	bne	e578 <CString::FormatV(char const*, std::__va_list)+0x654>
    e594:	eaffff77 	b	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    e598:	e59d5010 	ldr	r5, [sp, #16]
    e59c:	e4958004 	ldr	r8, [r5], #4
    e5a0:	e1a00008 	mov	r0, r8
    e5a4:	eb0005c0 	bl	fcac <strlen>
    e5a8:	e59d3018 	ldr	r3, [sp, #24]
    e5ac:	e1a04000 	mov	r4, r0
    e5b0:	e3530000 	cmp	r3, #0
    e5b4:	1a000107 	bne	e9d8 <CString::FormatV(char const*, std::__va_list)+0xab4>
    e5b8:	e1500006 	cmp	r0, r6
    e5bc:	3a0000d7 	bcc	e920 <CString::FormatV(char const*, std::__va_list)+0x9fc>
    e5c0:	e1a00008 	mov	r0, r8
    e5c4:	eb0005b8 	bl	fcac <strlen>
    e5c8:	e2504000 	subs	r4, r0, #0
    e5cc:	0a000002 	beq	e5dc <CString::FormatV(char const*, std::__va_list)+0x6b8>
    e5d0:	e1a01004 	mov	r1, r4
    e5d4:	e1a0000a 	mov	r0, sl
    e5d8:	ebfffbe1 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e5dc:	e1a01008 	mov	r1, r8
    e5e0:	e58d5010 	str	r5, [sp, #16]
    e5e4:	eaffff6b 	b	e398 <CString::FormatV(char const*, std::__va_list)+0x474>
    e5e8:	e35c0000 	cmp	ip, #0
    e5ec:	03a07008 	moveq	r7, #8
    e5f0:	0afffeed 	beq	e1ac <CString::FormatV(char const*, std::__va_list)+0x288>
    e5f4:	e3a01001 	mov	r1, #1
    e5f8:	e1a0000a 	mov	r0, sl
    e5fc:	ebfffbd8 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e600:	e59a300c 	ldr	r3, [sl, #12]
    e604:	e3a02030 	mov	r2, #48	; 0x30
    e608:	e3a07008 	mov	r7, #8
    e60c:	e2831001 	add	r1, r3, #1
    e610:	e58a100c 	str	r1, [sl, #12]
    e614:	e5c32000 	strb	r2, [r3]
    e618:	e59d3004 	ldr	r3, [sp, #4]
    e61c:	e1db90d0 	ldrsb	r9, [fp]
    e620:	e3530000 	cmp	r3, #0
    e624:	e59d3010 	ldr	r3, [sp, #16]
    e628:	1afffee3 	bne	e1bc <CString::FormatV(char const*, std::__va_list)+0x298>
    e62c:	e493c004 	ldr	ip, [r3], #4
    e630:	e58d3010 	str	r3, [sp, #16]
    e634:	e157000c 	cmp	r7, ip
    e638:	8a00012a 	bhi	eae8 <CString::FormatV(char const*, std::__va_list)+0xbc4>
    e63c:	e3a03001 	mov	r3, #1
    e640:	e0030397 	mul	r3, r7, r3
    e644:	e731f31c 	udiv	r1, ip, r3
    e648:	e1570001 	cmp	r7, r1
    e64c:	e1a02001 	mov	r2, r1
    e650:	9afffffa 	bls	e640 <CString::FormatV(char const*, std::__va_list)+0x71c>
    e654:	e3590058 	cmp	r9, #88	; 0x58
    e658:	e28de03c 	add	lr, sp, #60	; 0x3c
    e65c:	13a05020 	movne	r5, #32
    e660:	03a05000 	moveq	r5, #0
    e664:	e2855037 	add	r5, r5, #55	; 0x37
    e668:	e58de00c 	str	lr, [sp, #12]
    e66c:	ea000002 	b	e67c <CString::FormatV(char const*, std::__va_list)+0x758>
    e670:	e732f11c 	udiv	r2, ip, r1
    e674:	e1a03001 	mov	r3, r1
    e678:	e1a01002 	mov	r1, r2
    e67c:	e2824030 	add	r4, r2, #48	; 0x30
    e680:	e0850002 	add	r0, r5, r2
    e684:	e3520009 	cmp	r2, #9
    e688:	e06cc193 	mls	ip, r3, r1, ip
    e68c:	e731f713 	udiv	r1, r3, r7
    e690:	e6af2070 	sxtb	r2, r0
    e694:	96af2074 	sxtbls	r2, r4
    e698:	e1570003 	cmp	r7, r3
    e69c:	e4ce2001 	strb	r2, [lr], #1
    e6a0:	9afffff2 	bls	e670 <CString::FormatV(char const*, std::__va_list)+0x74c>
    e6a4:	e3a03000 	mov	r3, #0
    e6a8:	e5ce3000 	strb	r3, [lr]
    e6ac:	eaffff19 	b	e318 <CString::FormatV(char const*, std::__va_list)+0x3f4>
    e6b0:	e1db90d1 	ldrsb	r9, [fp, #1]
    e6b4:	e3a01000 	mov	r1, #0
    e6b8:	e28bb001 	add	fp, fp, #1
    e6bc:	e2493030 	sub	r3, r9, #48	; 0x30
    e6c0:	e6ef3073 	uxtb	r3, r3
    e6c4:	e3530009 	cmp	r3, #9
    e6c8:	8afffe51 	bhi	e014 <CString::FormatV(char const*, std::__va_list)+0xf0>
    e6cc:	e3a0200a 	mov	r2, #10
    e6d0:	e0219192 	mla	r1, r2, r1, r9
    e6d4:	e1fb90d1 	ldrsb	r9, [fp, #1]!
    e6d8:	e2493030 	sub	r3, r9, #48	; 0x30
    e6dc:	e2411030 	sub	r1, r1, #48	; 0x30
    e6e0:	e6ef3073 	uxtb	r3, r3
    e6e4:	e3530009 	cmp	r3, #9
    e6e8:	9afffff8 	bls	e6d0 <CString::FormatV(char const*, std::__va_list)+0x7ac>
    e6ec:	eafffe48 	b	e014 <CString::FormatV(char const*, std::__va_list)+0xf0>
    e6f0:	e59d000c 	ldr	r0, [sp, #12]
    e6f4:	eb00056c 	bl	fcac <strlen>
    e6f8:	e2505000 	subs	r5, r0, #0
    e6fc:	0a000002 	beq	e70c <CString::FormatV(char const*, std::__va_list)+0x7e8>
    e700:	e1a01005 	mov	r1, r5
    e704:	e1a0000a 	mov	r0, sl
    e708:	ebfffb95 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e70c:	e59d100c 	ldr	r1, [sp, #12]
    e710:	e59a000c 	ldr	r0, [sl, #12]
    e714:	eb000605 	bl	ff30 <strcpy>
    e718:	e59a300c 	ldr	r3, [sl, #12]
    e71c:	e1540006 	cmp	r4, r6
    e720:	e0835005 	add	r5, r3, r5
    e724:	e58a500c 	str	r5, [sl, #12]
    e728:	2afffe7e 	bcs	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    e72c:	e0464004 	sub	r4, r6, r4
    e730:	e1a0000a 	mov	r0, sl
    e734:	e1a01004 	mov	r1, r4
    e738:	ebfffb89 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e73c:	e2443001 	sub	r3, r4, #1
    e740:	e3a00020 	mov	r0, #32
    e744:	e59a200c 	ldr	r2, [sl, #12]
    e748:	e2433001 	sub	r3, r3, #1
    e74c:	e3730001 	cmn	r3, #1
    e750:	e2821001 	add	r1, r2, #1
    e754:	e58a100c 	str	r1, [sl, #12]
    e758:	e5c20000 	strb	r0, [r2]
    e75c:	1afffff8 	bne	e744 <CString::FormatV(char const*, std::__va_list)+0x820>
    e760:	eafffe70 	b	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    e764:	e4931004 	ldr	r1, [r3], #4
    e768:	e58d3010 	str	r3, [sp, #16]
    e76c:	e3510000 	cmp	r1, #0
    e770:	b2611000 	rsblt	r1, r1, #0
    e774:	b3a03001 	movlt	r3, #1
    e778:	b58d3004 	strlt	r3, [sp, #4]
    e77c:	e3510009 	cmp	r1, #9
    e780:	e1a00001 	mov	r0, r1
    e784:	da000118 	ble	ebec <CString::FormatV(char const*, std::__va_list)+0xcc8>
    e788:	e3a02001 	mov	r2, #1
    e78c:	e3a0c00a 	mov	ip, #10
    e790:	e002029c 	mul	r2, ip, r2
    e794:	e733f211 	udiv	r3, r1, r2
    e798:	e3530009 	cmp	r3, #9
    e79c:	8afffffb 	bhi	e790 <CString::FormatV(char const*, std::__va_list)+0x86c>
    e7a0:	e28d103c 	add	r1, sp, #60	; 0x3c
    e7a4:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
    e7a8:	e1a0c001 	mov	ip, r1
    e7ac:	e58d100c 	str	r1, [sp, #12]
    e7b0:	ea000001 	b	e7bc <CString::FormatV(char const*, std::__va_list)+0x898>
    e7b4:	e1a02003 	mov	r2, r3
    e7b8:	e733f310 	udiv	r3, r0, r3
    e7bc:	e3530009 	cmp	r3, #9
    e7c0:	e2831057 	add	r1, r3, #87	; 0x57
    e7c4:	e73ef210 	udiv	lr, r0, r2
    e7c8:	e2834030 	add	r4, r3, #48	; 0x30
    e7cc:	e6af1071 	sxtb	r1, r1
    e7d0:	96af1074 	sxtbls	r1, r4
    e7d4:	e3520009 	cmp	r2, #9
    e7d8:	e4cc1001 	strb	r1, [ip], #1
    e7dc:	e0600e92 	mls	r0, r2, lr, r0
    e7e0:	e083e295 	umull	lr, r3, r5, r2
    e7e4:	e1a031a3 	lsr	r3, r3, #3
    e7e8:	8afffff1 	bhi	e7b4 <CString::FormatV(char const*, std::__va_list)+0x890>
    e7ec:	e3a03000 	mov	r3, #0
    e7f0:	e5cc3000 	strb	r3, [ip]
    e7f4:	e59d000c 	ldr	r0, [sp, #12]
    e7f8:	eb00052b 	bl	fcac <strlen>
    e7fc:	e59d3004 	ldr	r3, [sp, #4]
    e800:	e1a04000 	mov	r4, r0
    e804:	e3530000 	cmp	r3, #0
    e808:	0a000052 	beq	e958 <CString::FormatV(char const*, std::__va_list)+0xa34>
    e80c:	e59d3018 	ldr	r3, [sp, #24]
    e810:	e2804001 	add	r4, r0, #1
    e814:	e3530000 	cmp	r3, #0
    e818:	1a0000ce 	bne	eb58 <CString::FormatV(char const*, std::__va_list)+0xc34>
    e81c:	e59d301c 	ldr	r3, [sp, #28]
    e820:	e3530000 	cmp	r3, #0
    e824:	1a0000e2 	bne	ebb4 <CString::FormatV(char const*, std::__va_list)+0xc90>
    e828:	e1560004 	cmp	r6, r4
    e82c:	9a00000f 	bls	e870 <CString::FormatV(char const*, std::__va_list)+0x94c>
    e830:	e0464004 	sub	r4, r6, r4
    e834:	e1a0000a 	mov	r0, sl
    e838:	e1a01004 	mov	r1, r4
    e83c:	ebfffb48 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e840:	e2443001 	sub	r3, r4, #1
    e844:	e3a00020 	mov	r0, #32
    e848:	e59a200c 	ldr	r2, [sl, #12]
    e84c:	e2433001 	sub	r3, r3, #1
    e850:	e3730001 	cmn	r3, #1
    e854:	e2821001 	add	r1, r2, #1
    e858:	e58a100c 	str	r1, [sl, #12]
    e85c:	e5c20000 	strb	r0, [r2]
    e860:	1afffff8 	bne	e848 <CString::FormatV(char const*, std::__va_list)+0x924>
    e864:	e59d3004 	ldr	r3, [sp, #4]
    e868:	e3530000 	cmp	r3, #0
    e86c:	0afffec1 	beq	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    e870:	e3a01001 	mov	r1, #1
    e874:	e1a0000a 	mov	r0, sl
    e878:	ebfffb39 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e87c:	e59a300c 	ldr	r3, [sl, #12]
    e880:	e3a0202d 	mov	r2, #45	; 0x2d
    e884:	e2831001 	add	r1, r3, #1
    e888:	e58a100c 	str	r1, [sl, #12]
    e88c:	e5c32000 	strb	r2, [r3]
    e890:	eafffeb8 	b	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    e894:	e59f7368 	ldr	r7, [pc, #872]	; ec04 <CString::FormatV(char const*, std::__va_list)+0xce0>
    e898:	e3590058 	cmp	r9, #88	; 0x58
    e89c:	e2873004 	add	r3, r7, #4
    e8a0:	01a07003 	moveq	r7, r3
    e8a4:	e1a00007 	mov	r0, r7
    e8a8:	eb0004ff 	bl	fcac <strlen>
    e8ac:	e2504000 	subs	r4, r0, #0
    e8b0:	0a000002 	beq	e8c0 <CString::FormatV(char const*, std::__va_list)+0x99c>
    e8b4:	e1a01004 	mov	r1, r4
    e8b8:	e1a0000a 	mov	r0, sl
    e8bc:	ebfffb28 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e8c0:	e1a01007 	mov	r1, r7
    e8c4:	e59a000c 	ldr	r0, [sl, #12]
    e8c8:	eb000598 	bl	ff30 <strcpy>
    e8cc:	e59a300c 	ldr	r3, [sl, #12]
    e8d0:	e3a07010 	mov	r7, #16
    e8d4:	e0834004 	add	r4, r3, r4
    e8d8:	e58a400c 	str	r4, [sl, #12]
    e8dc:	e1db90d0 	ldrsb	r9, [fp]
    e8e0:	eafffe31 	b	e1ac <CString::FormatV(char const*, std::__va_list)+0x288>
    e8e4:	e3a0700a 	mov	r7, #10
    e8e8:	eafffe2f 	b	e1ac <CString::FormatV(char const*, std::__va_list)+0x288>
    e8ec:	e1a0000a 	mov	r0, sl
    e8f0:	e2461001 	sub	r1, r6, #1
    e8f4:	ebfffb1a 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e8f8:	e2463002 	sub	r3, r6, #2
    e8fc:	e3a00020 	mov	r0, #32
    e900:	e59a200c 	ldr	r2, [sl, #12]
    e904:	e2433001 	sub	r3, r3, #1
    e908:	e3730001 	cmn	r3, #1
    e90c:	e2821001 	add	r1, r2, #1
    e910:	e58a100c 	str	r1, [sl, #12]
    e914:	e5c20000 	strb	r0, [r2]
    e918:	1afffff8 	bne	e900 <CString::FormatV(char const*, std::__va_list)+0x9dc>
    e91c:	eafffdf9 	b	e108 <CString::FormatV(char const*, std::__va_list)+0x1e4>
    e920:	e0464000 	sub	r4, r6, r0
    e924:	e1a0000a 	mov	r0, sl
    e928:	e1a01004 	mov	r1, r4
    e92c:	ebfffb0c 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e930:	e2443001 	sub	r3, r4, #1
    e934:	e3a00020 	mov	r0, #32
    e938:	e59a200c 	ldr	r2, [sl, #12]
    e93c:	e2433001 	sub	r3, r3, #1
    e940:	e3730001 	cmn	r3, #1
    e944:	e2821001 	add	r1, r2, #1
    e948:	e58a100c 	str	r1, [sl, #12]
    e94c:	e5c20000 	strb	r0, [r2]
    e950:	1afffff8 	bne	e938 <CString::FormatV(char const*, std::__va_list)+0xa14>
    e954:	eaffff19 	b	e5c0 <CString::FormatV(char const*, std::__va_list)+0x69c>
    e958:	e59d3018 	ldr	r3, [sp, #24]
    e95c:	e3530000 	cmp	r3, #0
    e960:	0a000069 	beq	eb0c <CString::FormatV(char const*, std::__va_list)+0xbe8>
    e964:	e59d000c 	ldr	r0, [sp, #12]
    e968:	eb0004cf 	bl	fcac <strlen>
    e96c:	e2505000 	subs	r5, r0, #0
    e970:	0a000002 	beq	e980 <CString::FormatV(char const*, std::__va_list)+0xa5c>
    e974:	e1a01005 	mov	r1, r5
    e978:	e1a0000a 	mov	r0, sl
    e97c:	ebfffaf8 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e980:	e59d100c 	ldr	r1, [sp, #12]
    e984:	e59a000c 	ldr	r0, [sl, #12]
    e988:	eb000568 	bl	ff30 <strcpy>
    e98c:	e59a300c 	ldr	r3, [sl, #12]
    e990:	e1560004 	cmp	r6, r4
    e994:	e0835005 	add	r5, r3, r5
    e998:	e58a500c 	str	r5, [sl, #12]
    e99c:	9afffde1 	bls	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    e9a0:	e0464004 	sub	r4, r6, r4
    e9a4:	e1a0000a 	mov	r0, sl
    e9a8:	e1a01004 	mov	r1, r4
    e9ac:	ebfffaec 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e9b0:	e2443001 	sub	r3, r4, #1
    e9b4:	e3a00020 	mov	r0, #32
    e9b8:	e59a200c 	ldr	r2, [sl, #12]
    e9bc:	e2433001 	sub	r3, r3, #1
    e9c0:	e3730001 	cmn	r3, #1
    e9c4:	e2821001 	add	r1, r2, #1
    e9c8:	e58a100c 	str	r1, [sl, #12]
    e9cc:	e5c20000 	strb	r0, [r2]
    e9d0:	1afffff8 	bne	e9b8 <CString::FormatV(char const*, std::__va_list)+0xa94>
    e9d4:	eafffdd3 	b	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    e9d8:	e1a00008 	mov	r0, r8
    e9dc:	eb0004b2 	bl	fcac <strlen>
    e9e0:	e2507000 	subs	r7, r0, #0
    e9e4:	0a000002 	beq	e9f4 <CString::FormatV(char const*, std::__va_list)+0xad0>
    e9e8:	e1a01007 	mov	r1, r7
    e9ec:	e1a0000a 	mov	r0, sl
    e9f0:	ebfffadb 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e9f4:	e59a000c 	ldr	r0, [sl, #12]
    e9f8:	e1a01008 	mov	r1, r8
    e9fc:	eb00054b 	bl	ff30 <strcpy>
    ea00:	e59a300c 	ldr	r3, [sl, #12]
    ea04:	e1540006 	cmp	r4, r6
    ea08:	e0837007 	add	r7, r3, r7
    ea0c:	e58a700c 	str	r7, [sl, #12]
    ea10:	3a000059 	bcc	eb7c <CString::FormatV(char const*, std::__va_list)+0xc58>
    ea14:	e58d5010 	str	r5, [sp, #16]
    ea18:	eafffdc2 	b	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    ea1c:	e59d000c 	ldr	r0, [sp, #12]
    ea20:	eb0004a1 	bl	fcac <strlen>
    ea24:	e2505000 	subs	r5, r0, #0
    ea28:	0a000002 	beq	ea38 <CString::FormatV(char const*, std::__va_list)+0xb14>
    ea2c:	e1a01005 	mov	r1, r5
    ea30:	e1a0000a 	mov	r0, sl
    ea34:	ebfffaca 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea38:	e59d100c 	ldr	r1, [sp, #12]
    ea3c:	e59a000c 	ldr	r0, [sl, #12]
    ea40:	eb00053a 	bl	ff30 <strcpy>
    ea44:	e59a300c 	ldr	r3, [sl, #12]
    ea48:	e1540006 	cmp	r4, r6
    ea4c:	e0835005 	add	r5, r3, r5
    ea50:	e58a500c 	str	r5, [sl, #12]
    ea54:	2afffdb3 	bcs	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    ea58:	e0464004 	sub	r4, r6, r4
    ea5c:	e1a0000a 	mov	r0, sl
    ea60:	e1a01004 	mov	r1, r4
    ea64:	ebfffabe 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea68:	e2443001 	sub	r3, r4, #1
    ea6c:	e3a00020 	mov	r0, #32
    ea70:	e59a200c 	ldr	r2, [sl, #12]
    ea74:	e2433001 	sub	r3, r3, #1
    ea78:	e3730001 	cmn	r3, #1
    ea7c:	e2821001 	add	r1, r2, #1
    ea80:	e58a100c 	str	r1, [sl, #12]
    ea84:	e5c20000 	strb	r0, [r2]
    ea88:	1afffff8 	bne	ea70 <CString::FormatV(char const*, std::__va_list)+0xb4c>
    ea8c:	eafffda5 	b	e128 <CString::FormatV(char const*, std::__va_list)+0x204>
    ea90:	e3a01001 	mov	r1, #1
    ea94:	e1a0000a 	mov	r0, sl
    ea98:	ebfffab1 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ea9c:	e59a300c 	ldr	r3, [sl, #12]
    eaa0:	e3560001 	cmp	r6, #1
    eaa4:	e2832001 	add	r2, r3, #1
    eaa8:	e58a200c 	str	r2, [sl, #12]
    eaac:	e5c34000 	strb	r4, [r3]
    eab0:	9affffd7 	bls	ea14 <CString::FormatV(char const*, std::__va_list)+0xaf0>
    eab4:	e1a0000a 	mov	r0, sl
    eab8:	e2461001 	sub	r1, r6, #1
    eabc:	ebfffaa8 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eac0:	e2463002 	sub	r3, r6, #2
    eac4:	e3a00020 	mov	r0, #32
    eac8:	e59a200c 	ldr	r2, [sl, #12]
    eacc:	e2433001 	sub	r3, r3, #1
    ead0:	e3730001 	cmn	r3, #1
    ead4:	e2821001 	add	r1, r2, #1
    ead8:	e58a100c 	str	r1, [sl, #12]
    eadc:	e5c20000 	strb	r0, [r2]
    eae0:	1afffff8 	bne	eac8 <CString::FormatV(char const*, std::__va_list)+0xba4>
    eae4:	eaffffca 	b	ea14 <CString::FormatV(char const*, std::__va_list)+0xaf0>
    eae8:	e1a0200c 	mov	r2, ip
    eaec:	e3a03001 	mov	r3, #1
    eaf0:	e1a0100c 	mov	r1, ip
    eaf4:	eafffed6 	b	e654 <CString::FormatV(char const*, std::__va_list)+0x730>
    eaf8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    eafc:	e3a05001 	mov	r5, #1
    eb00:	e59d4020 	ldr	r4, [sp, #32]
    eb04:	e58d3008 	str	r3, [sp, #8]
    eb08:	eafffdca 	b	e238 <CString::FormatV(char const*, std::__va_list)+0x314>
    eb0c:	e59d301c 	ldr	r3, [sp, #28]
    eb10:	e3530000 	cmp	r3, #0
    eb14:	0a000037 	beq	ebf8 <CString::FormatV(char const*, std::__va_list)+0xcd4>
    eb18:	e1540006 	cmp	r4, r6
    eb1c:	2afffe15 	bcs	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    eb20:	e0464004 	sub	r4, r6, r4
    eb24:	e1a0000a 	mov	r0, sl
    eb28:	e1a01004 	mov	r1, r4
    eb2c:	ebfffa8c 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb30:	e2443001 	sub	r3, r4, #1
    eb34:	e3a00030 	mov	r0, #48	; 0x30
    eb38:	e59a200c 	ldr	r2, [sl, #12]
    eb3c:	e2433001 	sub	r3, r3, #1
    eb40:	e3730001 	cmn	r3, #1
    eb44:	e2821001 	add	r1, r2, #1
    eb48:	e58a100c 	str	r1, [sl, #12]
    eb4c:	e5c20000 	strb	r0, [r2]
    eb50:	1afffff8 	bne	eb38 <CString::FormatV(char const*, std::__va_list)+0xc14>
    eb54:	eafffe07 	b	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    eb58:	e3a01001 	mov	r1, #1
    eb5c:	e1a0000a 	mov	r0, sl
    eb60:	ebfffa7f 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb64:	e59a300c 	ldr	r3, [sl, #12]
    eb68:	e3a0202d 	mov	r2, #45	; 0x2d
    eb6c:	e2831001 	add	r1, r3, #1
    eb70:	e58a100c 	str	r1, [sl, #12]
    eb74:	e5c32000 	strb	r2, [r3]
    eb78:	eaffff79 	b	e964 <CString::FormatV(char const*, std::__va_list)+0xa40>
    eb7c:	e0464004 	sub	r4, r6, r4
    eb80:	e1a0000a 	mov	r0, sl
    eb84:	e1a01004 	mov	r1, r4
    eb88:	ebfffa75 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb8c:	e2443001 	sub	r3, r4, #1
    eb90:	e3a00020 	mov	r0, #32
    eb94:	e59a200c 	ldr	r2, [sl, #12]
    eb98:	e2433001 	sub	r3, r3, #1
    eb9c:	e3730001 	cmn	r3, #1
    eba0:	e2821001 	add	r1, r2, #1
    eba4:	e58a100c 	str	r1, [sl, #12]
    eba8:	e5c20000 	strb	r0, [r2]
    ebac:	1afffff8 	bne	eb94 <CString::FormatV(char const*, std::__va_list)+0xc70>
    ebb0:	eaffff97 	b	ea14 <CString::FormatV(char const*, std::__va_list)+0xaf0>
    ebb4:	e3a01001 	mov	r1, #1
    ebb8:	e1a0000a 	mov	r0, sl
    ebbc:	ebfffa68 	bl	d564 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebc0:	e59a300c 	ldr	r3, [sl, #12]
    ebc4:	e3a0202d 	mov	r2, #45	; 0x2d
    ebc8:	e2831001 	add	r1, r3, #1
    ebcc:	e58a100c 	str	r1, [sl, #12]
    ebd0:	e5c32000 	strb	r2, [r3]
    ebd4:	eaffffcf 	b	eb18 <CString::FormatV(char const*, std::__va_list)+0xbf4>
    ebd8:	e59d9008 	ldr	r9, [sp, #8]
    ebdc:	e3a04001 	mov	r4, #1
    ebe0:	e59d7014 	ldr	r7, [sp, #20]
    ebe4:	e3a05000 	mov	r5, #0
    ebe8:	eafffe1c 	b	e460 <CString::FormatV(char const*, std::__va_list)+0x53c>
    ebec:	e1a03000 	mov	r3, r0
    ebf0:	e3a02001 	mov	r2, #1
    ebf4:	eafffee9 	b	e7a0 <CString::FormatV(char const*, std::__va_list)+0x87c>
    ebf8:	e1500006 	cmp	r0, r6
    ebfc:	2afffddd 	bcs	e378 <CString::FormatV(char const*, std::__va_list)+0x454>
    ec00:	eaffff0a 	b	e830 <CString::FormatV(char const*, std::__va_list)+0x90c>
    ec04:	00014dac 	.word	0x00014dac

0000ec08 <CString::Format(char const*, ...)>:
    ec08:	e92d000e 	push	{r1, r2, r3}
    ec0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ec10:	e24dd008 	sub	sp, sp, #8
    ec14:	e28d2010 	add	r2, sp, #16
    ec18:	e59d100c 	ldr	r1, [sp, #12]
    ec1c:	e58d2004 	str	r2, [sp, #4]
    ec20:	ebfffcbf 	bl	df24 <CString::FormatV(char const*, std::__va_list)>
    ec24:	e28dd008 	add	sp, sp, #8
    ec28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    ec2c:	e28dd00c 	add	sp, sp, #12
    ec30:	e12fff1e 	bx	lr

0000ec34 <__aeabi_atexit>:
    ec34:	e12fff1e 	bx	lr

0000ec38 <__errno>:
    ec38:	e3060924 	movw	r0, #26916	; 0x6924
    ec3c:	e3400001 	movt	r0, #1
    ec40:	e12fff1e 	bx	lr

0000ec44 <set_qemu_exit_status>:
    ec44:	e12fff1e 	bx	lr

0000ec48 <halt>:
    ec48:	f10c0080 	cpsid	i
    ec4c:	f10c0040 	cpsid	f
    ec50:	f57ff04f 	dsb	sy
    ec54:	e320f003 	wfi
    ec58:	eafffffc 	b	ec50 <halt+0x8>

0000ec5c <reboot>:
    ec5c:	e3a03000 	mov	r3, #0
    ec60:	e3433f10 	movt	r3, #16144	; 0x3f10
    ec64:	e3a01001 	mov	r1, #1
    ec68:	e3451a00 	movt	r1, #23040	; 0x5a00
    ec6c:	e3a02020 	mov	r2, #32
    ec70:	e3452a00 	movt	r2, #23040	; 0x5a00
    ec74:	e5831024 	str	r1, [r3, #36]	; 0x24
    ec78:	e583201c 	str	r2, [r3, #28]
    ec7c:	eafffffe 	b	ec7c <reboot+0x20>

0000ec80 <sysinit>:
    ec80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ec84:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
    ec88:	f1080040 	cpsie	f
    ec8c:	f1080080 	cpsie	i
    ec90:	eb000801 	bl	10c9c <InvalidateDataCacheL1Only>
    ec94:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    ec98:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    ec9c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    eca0:	f57ff06f 	isb	sy
    eca4:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    eca8:	eee83a10 	vmsr	fpexc, r3
    ecac:	e3a03403 	mov	r3, #50331648	; 0x3000000
    ecb0:	eee13a10 	vmsr	fpscr, r3
    ecb4:	e30629a4 	movw	r2, #27044	; 0x69a4
    ecb8:	e3402001 	movt	r2, #1
    ecbc:	e3060908 	movw	r0, #26888	; 0x6908
    ecc0:	e3400001 	movt	r0, #1
    ecc4:	e0422000 	sub	r2, r2, r0
    ecc8:	e3a01000 	mov	r1, #0
    eccc:	eb000388 	bl	faf4 <memset>
    ecd0:	e1a0000d 	mov	r0, sp
    ecd4:	ebfff26f 	bl	b698 <CMachineInfo::CMachineInfo()>
    ecd8:	e3065890 	movw	r5, #26768	; 0x6890
    ecdc:	e3405001 	movt	r5, #1
    ece0:	e3a01001 	mov	r1, #1
    ece4:	e28d001c 	add	r0, sp, #28
    ece8:	e3064884 	movw	r4, #26756	; 0x6884
    ecec:	e3404001 	movt	r4, #1
    ecf0:	eb0008d9 	bl	1105c <CMemorySystem::CMemorySystem(bool)>
    ecf4:	e1540005 	cmp	r4, r5
    ecf8:	2a000003 	bcs	ed0c <sysinit+0x8c>
    ecfc:	e4943004 	ldr	r3, [r4], #4
    ed00:	e12fff33 	blx	r3
    ed04:	e1540005 	cmp	r4, r5
    ed08:	3afffffb 	bcc	ecfc <sysinit+0x7c>
    ed0c:	ebffe4d7 	bl	8070 <main>
    ed10:	e3500001 	cmp	r0, #1
    ed14:	0a000000 	beq	ed1c <sysinit+0x9c>
    ed18:	ebffffca 	bl	ec48 <halt>
    ed1c:	eb0006bd 	bl	10818 <IsChainBootEnabled>
    ed20:	e3500000 	cmp	r0, #0
    ed24:	1a000000 	bne	ed2c <sysinit+0xac>
    ed28:	ebffffcb 	bl	ec5c <reboot>
    ed2c:	e28d001c 	add	r0, sp, #28
    ed30:	eb000870 	bl	10ef8 <CMemorySystem::Destructor()>
    ed34:	f10c0040 	cpsid	f
    ed38:	eb0006bc 	bl	10830 <DoChainBoot>
    ed3c:	eafffff9 	b	ed28 <sysinit+0xa8>

0000ed40 <CTimer::CTimer(CInterruptSystem*)>:
    ed40:	e92d4070 	push	{r4, r5, r6, lr}
    ed44:	e1a04000 	mov	r4, r0
    ed48:	e3a05000 	mov	r5, #0
    ed4c:	e3a06001 	mov	r6, #1
    ed50:	e2800018 	add	r0, r0, #24
    ed54:	e5845004 	str	r5, [r4, #4]
    ed58:	e5841000 	str	r1, [r4]
    ed5c:	e5845008 	str	r5, [r4, #8]
    ed60:	e5846010 	str	r6, [r4, #16]
    ed64:	e584500c 	str	r5, [r4, #12]
    ed68:	e5845014 	str	r5, [r4, #20]
    ed6c:	eb0010b7 	bl	13050 <CPtrList::CPtrList()>
    ed70:	e306392c 	movw	r3, #26924	; 0x692c
    ed74:	e3403001 	movt	r3, #1
    ed78:	e3a02d35 	mov	r2, #3392	; 0xd40
    ed7c:	e3402003 	movt	r2, #3
    ed80:	e5842020 	str	r2, [r4, #32]
    ed84:	e3a010c8 	mov	r1, #200	; 0xc8
    ed88:	e584601c 	str	r6, [r4, #28]
    ed8c:	e5932000 	ldr	r2, [r3]
    ed90:	e5841024 	str	r1, [r4, #36]	; 0x24
    ed94:	e1520005 	cmp	r2, r5
    ed98:	e5845028 	str	r5, [r4, #40]	; 0x28
    ed9c:	e584503c 	str	r5, [r4, #60]	; 0x3c
    eda0:	1a000002 	bne	edb0 <CTimer::CTimer(CInterruptSystem*)+0x70>
    eda4:	e1a00004 	mov	r0, r4
    eda8:	e5834000 	str	r4, [r3]
    edac:	e8bd8070 	pop	{r4, r5, r6, pc}
    edb0:	e3041db4 	movw	r1, #19892	; 0x4db4
    edb4:	e3401001 	movt	r1, #1
    edb8:	e30401b4 	movw	r0, #16820	; 0x41b4
    edbc:	e3400001 	movt	r0, #1
    edc0:	e3a02042 	mov	r2, #66	; 0x42
    edc4:	ebffe9ab 	bl	9478 <assertion_failed>

0000edc8 <CTimer::~CTimer()>:
    edc8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    edcc:	e1a08000 	mov	r8, r0
    edd0:	e5900000 	ldr	r0, [r0]
    edd4:	e3500000 	cmp	r0, #0
    edd8:	0a00002f 	beq	ee9c <CTimer::~CTimer()+0xd4>
    eddc:	e3a03000 	mov	r3, #0
    ede0:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    ede4:	e3a01049 	mov	r1, #73	; 0x49
    ede8:	e2886018 	add	r6, r8, #24
    edec:	eb0009ce 	bl	1152c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    edf0:	e1a00006 	mov	r0, r6
    edf4:	e3047d43 	movw	r7, #19779	; 0x4d43
    edf8:	e3447b54 	movt	r7, #19284	; 0x4b54
    edfc:	eb0010a0 	bl	13084 <CPtrList::GetFirst()>
    ee00:	e2504000 	subs	r4, r0, #0
    ee04:	0a000011 	beq	ee50 <CTimer::~CTimer()+0x88>
    ee08:	e1a01004 	mov	r1, r4
    ee0c:	e1a00006 	mov	r0, r6
    ee10:	eb0010b3 	bl	130e4 <CPtrList::GetPtr(TPtrListElement*)>
    ee14:	e2505000 	subs	r5, r0, #0
    ee18:	0a000013 	beq	ee6c <CTimer::~CTimer()+0xa4>
    ee1c:	e5953000 	ldr	r3, [r5]
    ee20:	e1530007 	cmp	r3, r7
    ee24:	1a000016 	bne	ee84 <CTimer::~CTimer()+0xbc>
    ee28:	e1a01004 	mov	r1, r4
    ee2c:	e1a00006 	mov	r0, r6
    ee30:	eb001139 	bl	1331c <CPtrList::Remove(TPtrListElement*)>
    ee34:	e3a01014 	mov	r1, #20
    ee38:	e1a00005 	mov	r0, r5
    ee3c:	eb0006b0 	bl	10904 <operator delete(void*, unsigned int)>
    ee40:	e1a00006 	mov	r0, r6
    ee44:	eb00108e 	bl	13084 <CPtrList::GetFirst()>
    ee48:	e2504000 	subs	r4, r0, #0
    ee4c:	1affffed 	bne	ee08 <CTimer::~CTimer()+0x40>
    ee50:	e306392c 	movw	r3, #26924	; 0x692c
    ee54:	e3403001 	movt	r3, #1
    ee58:	e1a00006 	mov	r0, r6
    ee5c:	e5834000 	str	r4, [r3]
    ee60:	eb00107d 	bl	1305c <CPtrList::~CPtrList()>
    ee64:	e1a00008 	mov	r0, r8
    ee68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ee6c:	e3041db4 	movw	r1, #19892	; 0x4db4
    ee70:	e3401001 	movt	r1, #1
    ee74:	e3040dd8 	movw	r0, #19928	; 0x4dd8
    ee78:	e3400001 	movt	r0, #1
    ee7c:	e3a02059 	mov	r2, #89	; 0x59
    ee80:	ebffe97c 	bl	9478 <assertion_failed>
    ee84:	e3041db4 	movw	r1, #19892	; 0x4db4
    ee88:	e3401001 	movt	r1, #1
    ee8c:	e3040de4 	movw	r0, #19940	; 0x4de4
    ee90:	e3400001 	movt	r0, #1
    ee94:	e3a0205a 	mov	r2, #90	; 0x5a
    ee98:	ebffe976 	bl	9478 <assertion_failed>
    ee9c:	e3041db4 	movw	r1, #19892	; 0x4db4
    eea0:	e3401001 	movt	r1, #1
    eea4:	e3040dc0 	movw	r0, #19904	; 0x4dc0
    eea8:	e3400001 	movt	r0, #1
    eeac:	e3a02048 	mov	r2, #72	; 0x48
    eeb0:	ebffe970 	bl	9478 <assertion_failed>

0000eeb4 <CTimer::SetTimeZone(int)>:
    eeb4:	e1a02000 	mov	r2, r0
    eeb8:	e2813e59 	add	r3, r1, #1424	; 0x590
    eebc:	e283300f 	add	r3, r3, #15
    eec0:	e300cb3e 	movw	ip, #2878	; 0xb3e
    eec4:	e153000c 	cmp	r3, ip
    eec8:	93a00001 	movls	r0, #1
    eecc:	95821014 	strls	r1, [r2, #20]
    eed0:	83a00000 	movhi	r0, #0
    eed4:	e12fff1e 	bx	lr

0000eed8 <CTimer::GetTimeZone() const>:
    eed8:	e5900014 	ldr	r0, [r0, #20]
    eedc:	e12fff1e 	bx	lr

0000eee0 <CTimer::SetTime(unsigned int, bool)>:
    eee0:	e5903014 	ldr	r3, [r0, #20]
    eee4:	e3a0c03c 	mov	ip, #60	; 0x3c
    eee8:	e92d4070 	push	{r4, r5, r6, lr}
    eeec:	e3520000 	cmp	r2, #0
    eef0:	e1a04000 	mov	r4, r0
    eef4:	e1a05001 	mov	r5, r1
    eef8:	e003039c 	mul	r3, ip, r3
    eefc:	1a000002 	bne	ef0c <CTimer::SetTime(unsigned int, bool)+0x2c>
    ef00:	e3530000 	cmp	r3, #0
    ef04:	ba000019 	blt	ef70 <CTimer::SetTime(unsigned int, bool)+0x90>
    ef08:	e0855003 	add	r5, r5, r3
    ef0c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    ef10:	e3520000 	cmp	r2, #0
    ef14:	0a000007 	beq	ef38 <CTimer::SetTime(unsigned int, bool)+0x58>
    ef18:	e594100c 	ldr	r1, [r4, #12]
    ef1c:	e0450003 	sub	r0, r5, r3
    ef20:	e1530001 	cmp	r3, r1
    ef24:	d0411003 	suble	r1, r1, r3
    ef28:	c3a01000 	movgt	r1, #0
    ef2c:	e12fff32 	blx	r2
    ef30:	e3500000 	cmp	r0, #0
    ef34:	0a000010 	beq	ef7c <CTimer::SetTime(unsigned int, bool)+0x9c>
    ef38:	e5940010 	ldr	r0, [r4, #16]
    ef3c:	e3500000 	cmp	r0, #0
    ef40:	1a000002 	bne	ef50 <CTimer::SetTime(unsigned int, bool)+0x70>
    ef44:	e3a00001 	mov	r0, #1
    ef48:	e584500c 	str	r5, [r4, #12]
    ef4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ef50:	eb0008c3 	bl	11264 <EnterCritical>
    ef54:	e5943010 	ldr	r3, [r4, #16]
    ef58:	e584500c 	str	r5, [r4, #12]
    ef5c:	e3530000 	cmp	r3, #0
    ef60:	0a000007 	beq	ef84 <CTimer::SetTime(unsigned int, bool)+0xa4>
    ef64:	eb0008e9 	bl	11310 <LeaveCritical>
    ef68:	e3a00001 	mov	r0, #1
    ef6c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ef70:	e2632000 	rsb	r2, r3, #0
    ef74:	e1520001 	cmp	r2, r1
    ef78:	daffffe2 	ble	ef08 <CTimer::SetTime(unsigned int, bool)+0x28>
    ef7c:	e3a00000 	mov	r0, #0
    ef80:	e8bd8070 	pop	{r4, r5, r6, pc}
    ef84:	e3a00001 	mov	r0, #1
    ef88:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ef8c <CTimer::GetClockTicks()>:
    ef8c:	f57ff06f 	isb	sy
    ef90:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    ef94:	e12fff1e 	bx	lr

0000ef98 <CTimer::GetTicks() const>:
    ef98:	e5900004 	ldr	r0, [r0, #4]
    ef9c:	e12fff1e 	bx	lr

0000efa0 <CTimer::GetUptime() const>:
    efa0:	e5900008 	ldr	r0, [r0, #8]
    efa4:	e12fff1e 	bx	lr

0000efa8 <CTimer::GetTime() const>:
    efa8:	e590000c 	ldr	r0, [r0, #12]
    efac:	e12fff1e 	bx	lr

0000efb0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    efb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    efb4:	e1a04000 	mov	r4, r0
    efb8:	e5900010 	ldr	r0, [r0, #16]
    efbc:	e1a06001 	mov	r6, r1
    efc0:	e1a07002 	mov	r7, r2
    efc4:	e3500000 	cmp	r0, #0
    efc8:	1a000011 	bne	f014 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    efcc:	e594800c 	ldr	r8, [r4, #12]
    efd0:	e5945004 	ldr	r5, [r4, #4]
    efd4:	e3560000 	cmp	r6, #0
    efd8:	0a000016 	beq	f038 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
    efdc:	e3570000 	cmp	r7, #0
    efe0:	e5868000 	str	r8, [r6]
    efe4:	0a000019 	beq	f050 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    efe8:	e308351f 	movw	r3, #34079	; 0x851f
    efec:	e34531eb 	movt	r3, #20971	; 0x51eb
    eff0:	e3a01064 	mov	r1, #100	; 0x64
    eff4:	e3022710 	movw	r2, #10000	; 0x2710
    eff8:	e0830593 	umull	r0, r3, r3, r5
    effc:	e3a00001 	mov	r0, #1
    f000:	e1a032a3 	lsr	r3, r3, #5
    f004:	e0655391 	mls	r5, r1, r3, r5
    f008:	e0050592 	mul	r5, r2, r5
    f00c:	e5875000 	str	r5, [r7]
    f010:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f014:	eb000892 	bl	11264 <EnterCritical>
    f018:	e5943010 	ldr	r3, [r4, #16]
    f01c:	e594800c 	ldr	r8, [r4, #12]
    f020:	e3530000 	cmp	r3, #0
    f024:	e5945004 	ldr	r5, [r4, #4]
    f028:	0affffe9 	beq	efd4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    f02c:	eb0008b7 	bl	11310 <LeaveCritical>
    f030:	e3560000 	cmp	r6, #0
    f034:	1affffe8 	bne	efdc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    f038:	e3041db4 	movw	r1, #19892	; 0x4db4
    f03c:	e3401001 	movt	r1, #1
    f040:	e3040e0c 	movw	r0, #19980	; 0x4e0c
    f044:	e3400001 	movt	r0, #1
    f048:	e3a02f43 	mov	r2, #268	; 0x10c
    f04c:	ebffe909 	bl	9478 <assertion_failed>
    f050:	e3041db4 	movw	r1, #19892	; 0x4db4
    f054:	e3401001 	movt	r1, #1
    f058:	e3040e1c 	movw	r0, #19996	; 0x4e1c
    f05c:	e3400001 	movt	r0, #1
    f060:	e300210f 	movw	r2, #271	; 0x10f
    f064:	ebffe903 	bl	9478 <assertion_failed>

0000f068 <CTimer::GetUniversalTime() const>:
    f068:	e5903014 	ldr	r3, [r0, #20]
    f06c:	e3a0203c 	mov	r2, #60	; 0x3c
    f070:	e590000c 	ldr	r0, [r0, #12]
    f074:	e0030392 	mul	r3, r2, r3
    f078:	e1500003 	cmp	r0, r3
    f07c:	a0400003 	subge	r0, r0, r3
    f080:	b3a00000 	movlt	r0, #0
    f084:	e12fff1e 	bx	lr

0000f088 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    f088:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f08c:	e1a04000 	mov	r4, r0
    f090:	e5900010 	ldr	r0, [r0, #16]
    f094:	e1a05001 	mov	r5, r1
    f098:	e1a06002 	mov	r6, r2
    f09c:	e3500000 	cmp	r0, #0
    f0a0:	1a000019 	bne	f10c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    f0a4:	e594700c 	ldr	r7, [r4, #12]
    f0a8:	e5948004 	ldr	r8, [r4, #4]
    f0ac:	e5940014 	ldr	r0, [r4, #20]
    f0b0:	e3a0203c 	mov	r2, #60	; 0x3c
    f0b4:	e0000092 	mul	r0, r2, r0
    f0b8:	e1570000 	cmp	r7, r0
    f0bc:	ba000010 	blt	f104 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    f0c0:	e3550000 	cmp	r5, #0
    f0c4:	0a000018 	beq	f12c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    f0c8:	e0470000 	sub	r0, r7, r0
    f0cc:	e3560000 	cmp	r6, #0
    f0d0:	e5850000 	str	r0, [r5]
    f0d4:	0a00001a 	beq	f144 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    f0d8:	e308351f 	movw	r3, #34079	; 0x851f
    f0dc:	e34531eb 	movt	r3, #20971	; 0x51eb
    f0e0:	e3a01064 	mov	r1, #100	; 0x64
    f0e4:	e3022710 	movw	r2, #10000	; 0x2710
    f0e8:	e0830893 	umull	r0, r3, r3, r8
    f0ec:	e3a00001 	mov	r0, #1
    f0f0:	e1a032a3 	lsr	r3, r3, #5
    f0f4:	e0638391 	mls	r3, r1, r3, r8
    f0f8:	e0030392 	mul	r3, r2, r3
    f0fc:	e5863000 	str	r3, [r6]
    f100:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f104:	e3a00000 	mov	r0, #0
    f108:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f10c:	eb000854 	bl	11264 <EnterCritical>
    f110:	e5943010 	ldr	r3, [r4, #16]
    f114:	e594700c 	ldr	r7, [r4, #12]
    f118:	e3530000 	cmp	r3, #0
    f11c:	e5948004 	ldr	r8, [r4, #4]
    f120:	0affffe1 	beq	f0ac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f124:	eb000879 	bl	11310 <LeaveCritical>
    f128:	eaffffdf 	b	f0ac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f12c:	e3041db4 	movw	r1, #19892	; 0x4db4
    f130:	e3401001 	movt	r1, #1
    f134:	e3040e0c 	movw	r0, #19980	; 0x4e0c
    f138:	e3400001 	movt	r0, #1
    f13c:	e3002131 	movw	r2, #305	; 0x131
    f140:	ebffe8cc 	bl	9478 <assertion_failed>
    f144:	e3041db4 	movw	r1, #19892	; 0x4db4
    f148:	e3401001 	movt	r1, #1
    f14c:	e3040e1c 	movw	r0, #19996	; 0x4e1c
    f150:	e3400001 	movt	r0, #1
    f154:	e3a02f4d 	mov	r2, #308	; 0x134
    f158:	ebffe8c6 	bl	9478 <assertion_failed>

0000f15c <CTimer::GetTimeString()>:
    f15c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f160:	e1a04000 	mov	r4, r0
    f164:	e5900010 	ldr	r0, [r0, #16]
    f168:	e24dd014 	sub	sp, sp, #20
    f16c:	e3500000 	cmp	r0, #0
    f170:	1a000067 	bne	f314 <CTimer::GetTimeString()+0x1b8>
    f174:	e594500c 	ldr	r5, [r4, #12]
    f178:	e594a004 	ldr	sl, [r4, #4]
    f17c:	e195000a 	orrs	r0, r5, sl
    f180:	01a0a000 	moveq	sl, r0
    f184:	0a000054 	beq	f2dc <CTimer::GetTimeString()+0x180>
    f188:	e3087889 	movw	r7, #34953	; 0x8889
    f18c:	e3487888 	movt	r7, #34952	; 0x8888
    f190:	e30a4aab 	movw	r4, #43691	; 0xaaab
    f194:	e34a4aaa 	movt	r4, #43690	; 0xaaaa
    f198:	e3050c29 	movw	r0, #23593	; 0x5c29
    f19c:	e34c028f 	movt	r0, #49807	; 0xc28f
    f1a0:	e0832597 	umull	r2, r3, r7, r5
    f1a4:	e30de70a 	movw	lr, #55050	; 0xd70a
    f1a8:	e340e0a3 	movt	lr, #163	; 0xa3
    f1ac:	e30067b2 	movw	r6, #1970	; 0x7b2
    f1b0:	e300c16d 	movw	ip, #365	; 0x16d
    f1b4:	e1a082a3 	lsr	r8, r3, #5
    f1b8:	e1a03008 	mov	r3, r8
    f1bc:	e0872897 	umull	r2, r7, r7, r8
    f1c0:	e3a0203c 	mov	r2, #60	; 0x3c
    f1c4:	e1a092a7 	lsr	r9, r7, #5
    f1c8:	e0685892 	mls	r8, r2, r8, r5
    f1cc:	e0673992 	mls	r7, r2, r9, r3
    f1d0:	e3052c28 	movw	r2, #23592	; 0x5c28
    f1d4:	e340228f 	movt	r2, #655	; 0x28f
    f1d8:	e0843994 	umull	r3, r4, r4, r9
    f1dc:	e1a04224 	lsr	r4, r4, #4
    f1e0:	ea000007 	b	f204 <CTimer::GetTimeString()+0xa8>
    f1e4:	e3160003 	tst	r6, #3
    f1e8:	03a03001 	moveq	r3, #1
    f1ec:	13a03000 	movne	r3, #0
    f1f0:	e083100c 	add	r1, r3, ip
    f1f4:	e1540001 	cmp	r4, r1
    f1f8:	3a00000a 	bcc	f228 <CTimer::GetTimeString()+0xcc>
    f1fc:	e0444001 	sub	r4, r4, r1
    f200:	e2866001 	add	r6, r6, #1
    f204:	e0030690 	mul	r3, r0, r6
    f208:	e1520163 	cmp	r2, r3, ror #2
    f20c:	3afffff4 	bcc	f1e4 <CTimer::GetTimeString()+0x88>
    f210:	e15e0263 	cmp	lr, r3, ror #4
    f214:	23a03001 	movcs	r3, #1
    f218:	33a03000 	movcc	r3, #0
    f21c:	e083100c 	add	r1, r3, ip
    f220:	e1540001 	cmp	r4, r1
    f224:	2afffff4 	bcs	f1fc <CTimer::GetTimeString()+0xa0>
    f228:	e3040f94 	movw	r0, #20372	; 0x4f94
    f22c:	e3400001 	movt	r0, #1
    f230:	e3a05000 	mov	r5, #0
    f234:	ea000001 	b	f240 <CTimer::GetTimeString()+0xe4>
    f238:	e0444001 	sub	r4, r4, r1
    f23c:	e2855001 	add	r5, r5, #1
    f240:	e3550001 	cmp	r5, #1
    f244:	13a02000 	movne	r2, #0
    f248:	02032001 	andeq	r2, r3, #1
    f24c:	e3520000 	cmp	r2, #0
    f250:	13a0101d 	movne	r1, #29
    f254:	07901105 	ldreq	r1, [r0, r5, lsl #2]
    f258:	e1540001 	cmp	r4, r1
    f25c:	2afffff5 	bcs	f238 <CTimer::GetTimeString()+0xdc>
    f260:	e308b51f 	movw	fp, #34079	; 0x851f
    f264:	e345b1eb 	movt	fp, #20971	; 0x51eb
    f268:	e3a00010 	mov	r0, #16
    f26c:	e08b3a9b 	umull	r3, fp, fp, sl
    f270:	e3a03064 	mov	r3, #100	; 0x64
    f274:	e1a0b2ab 	lsr	fp, fp, #5
    f278:	e06bab93 	mls	fp, r3, fp, sl
    f27c:	eb000588 	bl	108a4 <operator new(unsigned int)>
    f280:	e1a0a000 	mov	sl, r0
    f284:	ebfff8d0 	bl	d5cc <CString::CString()>
    f288:	e30037b7 	movw	r3, #1975	; 0x7b7
    f28c:	e1560003 	cmp	r6, r3
    f290:	9a000014 	bls	f2e8 <CTimer::GetTimeString()+0x18c>
    f294:	e30a2aab 	movw	r2, #43691	; 0xaaab
    f298:	e34a2aaa 	movt	r2, #43690	; 0xaaaa
    f29c:	e58db00c 	str	fp, [sp, #12]
    f2a0:	e2843001 	add	r3, r4, #1
    f2a4:	e58d8008 	str	r8, [sp, #8]
    f2a8:	e1a0000a 	mov	r0, sl
    f2ac:	e0821992 	umull	r1, r2, r2, r9
    f2b0:	e3a01018 	mov	r1, #24
    f2b4:	e58d7004 	str	r7, [sp, #4]
    f2b8:	e1a02222 	lsr	r2, r2, #4
    f2bc:	e0699291 	mls	r9, r1, r2, r9
    f2c0:	e3062898 	movw	r2, #26776	; 0x6898
    f2c4:	e3402001 	movt	r2, #1
    f2c8:	e58d9000 	str	r9, [sp]
    f2cc:	e3041e30 	movw	r1, #20016	; 0x4e30
    f2d0:	e3401001 	movt	r1, #1
    f2d4:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    f2d8:	ebfffe4a 	bl	ec08 <CString::Format(char const*, ...)>
    f2dc:	e1a0000a 	mov	r0, sl
    f2e0:	e28dd014 	add	sp, sp, #20
    f2e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2e8:	e1a0000a 	mov	r0, sl
    f2ec:	e1a03007 	mov	r3, r7
    f2f0:	e1a02009 	mov	r2, r9
    f2f4:	e58db004 	str	fp, [sp, #4]
    f2f8:	e58d8000 	str	r8, [sp]
    f2fc:	e3041e4c 	movw	r1, #20044	; 0x4e4c
    f300:	e3401001 	movt	r1, #1
    f304:	ebfffe3f 	bl	ec08 <CString::Format(char const*, ...)>
    f308:	e1a0000a 	mov	r0, sl
    f30c:	e28dd014 	add	sp, sp, #20
    f310:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f314:	eb0007d2 	bl	11264 <EnterCritical>
    f318:	e5943010 	ldr	r3, [r4, #16]
    f31c:	e594500c 	ldr	r5, [r4, #12]
    f320:	e3530000 	cmp	r3, #0
    f324:	e594a004 	ldr	sl, [r4, #4]
    f328:	0affff93 	beq	f17c <CTimer::GetTimeString()+0x20>
    f32c:	eb0007f7 	bl	11310 <LeaveCritical>
    f330:	eaffff91 	b	f17c <CTimer::GetTimeString()+0x20>

0000f334 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    f334:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f338:	e1a07000 	mov	r7, r0
    f33c:	e3a00014 	mov	r0, #20
    f340:	e1a06001 	mov	r6, r1
    f344:	e1a04002 	mov	r4, r2
    f348:	e1a08003 	mov	r8, r3
    f34c:	eb000554 	bl	108a4 <operator new(unsigned int)>
    f350:	e5971004 	ldr	r1, [r7, #4]
    f354:	e3540000 	cmp	r4, #0
    f358:	e0816006 	add	r6, r1, r6
    f35c:	0a00003c 	beq	f454 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    f360:	e1a05000 	mov	r5, r0
    f364:	e5804004 	str	r4, [r0, #4]
    f368:	e597001c 	ldr	r0, [r7, #28]
    f36c:	e59d3020 	ldr	r3, [sp, #32]
    f370:	e5853010 	str	r3, [r5, #16]
    f374:	e3500000 	cmp	r0, #0
    f378:	e3043d43 	movw	r3, #19779	; 0x4d43
    f37c:	e3443b54 	movt	r3, #19284	; 0x4b54
    f380:	e5856008 	str	r6, [r5, #8]
    f384:	e585800c 	str	r8, [r5, #12]
    f388:	e5853000 	str	r3, [r5]
    f38c:	1a000025 	bne	f428 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
    f390:	e2874018 	add	r4, r7, #24
    f394:	e1a00004 	mov	r0, r4
    f398:	eb000f39 	bl	13084 <CPtrList::GetFirst()>
    f39c:	e2509000 	subs	r9, r0, #0
    f3a0:	0a000033 	beq	f474 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f3a4:	e3048d43 	movw	r8, #19779	; 0x4d43
    f3a8:	e3448b54 	movt	r8, #19284	; 0x4b54
    f3ac:	e1a01009 	mov	r1, r9
    f3b0:	e1a00004 	mov	r0, r4
    f3b4:	eb000f4a 	bl	130e4 <CPtrList::GetPtr(TPtrListElement*)>
    f3b8:	e3500000 	cmp	r0, #0
    f3bc:	0a00000d 	beq	f3f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
    f3c0:	e5903000 	ldr	r3, [r0]
    f3c4:	e1530008 	cmp	r3, r8
    f3c8:	1a000010 	bne	f410 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    f3cc:	e5903008 	ldr	r3, [r0, #8]
    f3d0:	e0433006 	sub	r3, r3, r6
    f3d4:	e3530000 	cmp	r3, #0
    f3d8:	ca000014 	bgt	f430 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    f3dc:	e1a01009 	mov	r1, r9
    f3e0:	e1a00004 	mov	r0, r4
    f3e4:	eb000f28 	bl	1308c <CPtrList::GetNext(TPtrListElement*)>
    f3e8:	e3500000 	cmp	r0, #0
    f3ec:	0a000020 	beq	f474 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f3f0:	e1a09000 	mov	r9, r0
    f3f4:	eaffffec 	b	f3ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    f3f8:	e3041db4 	movw	r1, #19892	; 0x4db4
    f3fc:	e3401001 	movt	r1, #1
    f400:	e3040e60 	movw	r0, #20064	; 0x4e60
    f404:	e3400001 	movt	r0, #1
    f408:	e300219b 	movw	r2, #411	; 0x19b
    f40c:	ebffe819 	bl	9478 <assertion_failed>
    f410:	e3041db4 	movw	r1, #19892	; 0x4db4
    f414:	e3401001 	movt	r1, #1
    f418:	e3040e70 	movw	r0, #20080	; 0x4e70
    f41c:	e3400001 	movt	r0, #1
    f420:	e3a02f67 	mov	r2, #412	; 0x19c
    f424:	ebffe813 	bl	9478 <assertion_failed>
    f428:	eb00078d 	bl	11264 <EnterCritical>
    f42c:	eaffffd7 	b	f390 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
    f430:	e1a02005 	mov	r2, r5
    f434:	e1a01009 	mov	r1, r9
    f438:	e1a00004 	mov	r0, r4
    f43c:	eb000f3e 	bl	1313c <CPtrList::InsertBefore(TPtrListElement*, void*)>
    f440:	e597301c 	ldr	r3, [r7, #28]
    f444:	e3530000 	cmp	r3, #0
    f448:	1a000007 	bne	f46c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    f44c:	e1a00005 	mov	r0, r5
    f450:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f454:	e3041db4 	movw	r1, #19892	; 0x4db4
    f458:	e3401001 	movt	r1, #1
    f45c:	e3050270 	movw	r0, #21104	; 0x5270
    f460:	e3400001 	movt	r0, #1
    f464:	e300218b 	movw	r2, #395	; 0x18b
    f468:	ebffe802 	bl	9478 <assertion_failed>
    f46c:	eb0007a7 	bl	11310 <LeaveCritical>
    f470:	eafffff5 	b	f44c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    f474:	e1a02005 	mov	r2, r5
    f478:	e1a01009 	mov	r1, r9
    f47c:	e1a00004 	mov	r0, r4
    f480:	eb000f69 	bl	1322c <CPtrList::InsertAfter(TPtrListElement*, void*)>
    f484:	eaffffed 	b	f440 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>

0000f488 <CTimer::CancelKernelTimer(unsigned int)>:
    f488:	e92d4070 	push	{r4, r5, r6, lr}
    f48c:	e2514000 	subs	r4, r1, #0
    f490:	0a00001a 	beq	f500 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    f494:	e1a05000 	mov	r5, r0
    f498:	e590001c 	ldr	r0, [r0, #28]
    f49c:	e3500000 	cmp	r0, #0
    f4a0:	1a000014 	bne	f4f8 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    f4a4:	e2856018 	add	r6, r5, #24
    f4a8:	e1a01004 	mov	r1, r4
    f4ac:	e1a00006 	mov	r0, r6
    f4b0:	eb000fe3 	bl	13444 <CPtrList::Find(void*)>
    f4b4:	e2501000 	subs	r1, r0, #0
    f4b8:	0a000009 	beq	f4e4 <CTimer::CancelKernelTimer(unsigned int)+0x5c>
    f4bc:	e5942000 	ldr	r2, [r4]
    f4c0:	e3043d43 	movw	r3, #19779	; 0x4d43
    f4c4:	e3443b54 	movt	r3, #19284	; 0x4b54
    f4c8:	e1520003 	cmp	r2, r3
    f4cc:	1a000011 	bne	f518 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    f4d0:	e1a00006 	mov	r0, r6
    f4d4:	eb000f90 	bl	1331c <CPtrList::Remove(TPtrListElement*)>
    f4d8:	e3a01014 	mov	r1, #20
    f4dc:	e1a00004 	mov	r0, r4
    f4e0:	eb000507 	bl	10904 <operator delete(void*, unsigned int)>
    f4e4:	e595301c 	ldr	r3, [r5, #28]
    f4e8:	e3530000 	cmp	r3, #0
    f4ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    f4f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    f4f4:	ea000785 	b	11310 <LeaveCritical>
    f4f8:	eb000759 	bl	11264 <EnterCritical>
    f4fc:	eaffffe8 	b	f4a4 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    f500:	e3041db4 	movw	r1, #19892	; 0x4db4
    f504:	e3401001 	movt	r1, #1
    f508:	e3040dd8 	movw	r0, #19928	; 0x4dd8
    f50c:	e3400001 	movt	r0, #1
    f510:	e3a02f6e 	mov	r2, #440	; 0x1b8
    f514:	ebffe7d7 	bl	9478 <assertion_failed>
    f518:	e3041db4 	movw	r1, #19892	; 0x4db4
    f51c:	e3401001 	movt	r1, #1
    f520:	e3040de4 	movw	r0, #19940	; 0x4de4
    f524:	e3400001 	movt	r0, #1
    f528:	e30021bf 	movw	r2, #447	; 0x1bf
    f52c:	ebffe7d1 	bl	9478 <assertion_failed>

0000f530 <CTimer::PollKernelTimers()>:
    f530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f534:	e1a06000 	mov	r6, r0
    f538:	e590001c 	ldr	r0, [r0, #28]
    f53c:	e3500000 	cmp	r0, #0
    f540:	1a00003e 	bne	f640 <CTimer::PollKernelTimers()+0x110>
    f544:	e2867018 	add	r7, r6, #24
    f548:	e1a00007 	mov	r0, r7
    f54c:	eb000ecc 	bl	13084 <CPtrList::GetFirst()>
    f550:	e2505000 	subs	r5, r0, #0
    f554:	0a000028 	beq	f5fc <CTimer::PollKernelTimers()+0xcc>
    f558:	e3048d43 	movw	r8, #19779	; 0x4d43
    f55c:	e3448b54 	movt	r8, #19284	; 0x4b54
    f560:	e1a01005 	mov	r1, r5
    f564:	e1a00007 	mov	r0, r7
    f568:	eb000edd 	bl	130e4 <CPtrList::GetPtr(TPtrListElement*)>
    f56c:	e2504000 	subs	r4, r0, #0
    f570:	0a000034 	beq	f648 <CTimer::PollKernelTimers()+0x118>
    f574:	e5943000 	ldr	r3, [r4]
    f578:	e1530008 	cmp	r3, r8
    f57c:	1a000037 	bne	f660 <CTimer::PollKernelTimers()+0x130>
    f580:	e5962004 	ldr	r2, [r6, #4]
    f584:	e5943008 	ldr	r3, [r4, #8]
    f588:	e0433002 	sub	r3, r3, r2
    f58c:	e3530000 	cmp	r3, #0
    f590:	ca000019 	bgt	f5fc <CTimer::PollKernelTimers()+0xcc>
    f594:	e1a01005 	mov	r1, r5
    f598:	e1a00007 	mov	r0, r7
    f59c:	eb000eba 	bl	1308c <CPtrList::GetNext(TPtrListElement*)>
    f5a0:	e1a01005 	mov	r1, r5
    f5a4:	e1a03000 	mov	r3, r0
    f5a8:	e1a00007 	mov	r0, r7
    f5ac:	e1a05003 	mov	r5, r3
    f5b0:	eb000f59 	bl	1331c <CPtrList::Remove(TPtrListElement*)>
    f5b4:	e596301c 	ldr	r3, [r6, #28]
    f5b8:	e3530000 	cmp	r3, #0
    f5bc:	1a000013 	bne	f610 <CTimer::PollKernelTimers()+0xe0>
    f5c0:	e5943004 	ldr	r3, [r4, #4]
    f5c4:	e3530000 	cmp	r3, #0
    f5c8:	0a000014 	beq	f620 <CTimer::PollKernelTimers()+0xf0>
    f5cc:	e5942010 	ldr	r2, [r4, #16]
    f5d0:	e1a00004 	mov	r0, r4
    f5d4:	e594100c 	ldr	r1, [r4, #12]
    f5d8:	e12fff33 	blx	r3
    f5dc:	e1a00004 	mov	r0, r4
    f5e0:	e3a01014 	mov	r1, #20
    f5e4:	eb0004c6 	bl	10904 <operator delete(void*, unsigned int)>
    f5e8:	e596001c 	ldr	r0, [r6, #28]
    f5ec:	e3500000 	cmp	r0, #0
    f5f0:	1a000010 	bne	f638 <CTimer::PollKernelTimers()+0x108>
    f5f4:	e3550000 	cmp	r5, #0
    f5f8:	1affffd8 	bne	f560 <CTimer::PollKernelTimers()+0x30>
    f5fc:	e596301c 	ldr	r3, [r6, #28]
    f600:	e3530000 	cmp	r3, #0
    f604:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    f608:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    f60c:	ea00073f 	b	11310 <LeaveCritical>
    f610:	eb00073e 	bl	11310 <LeaveCritical>
    f614:	e5943004 	ldr	r3, [r4, #4]
    f618:	e3530000 	cmp	r3, #0
    f61c:	1affffea 	bne	f5cc <CTimer::PollKernelTimers()+0x9c>
    f620:	e3041db4 	movw	r1, #19892	; 0x4db4
    f624:	e3401001 	movt	r1, #1
    f628:	e3050270 	movw	r0, #21104	; 0x5270
    f62c:	e3400001 	movt	r0, #1
    f630:	e30021e3 	movw	r2, #483	; 0x1e3
    f634:	ebffe78f 	bl	9478 <assertion_failed>
    f638:	eb000709 	bl	11264 <EnterCritical>
    f63c:	eaffffec 	b	f5f4 <CTimer::PollKernelTimers()+0xc4>
    f640:	eb000707 	bl	11264 <EnterCritical>
    f644:	eaffffbe 	b	f544 <CTimer::PollKernelTimers()+0x14>
    f648:	e3041db4 	movw	r1, #19892	; 0x4db4
    f64c:	e3401001 	movt	r1, #1
    f650:	e3040dd8 	movw	r0, #19928	; 0x4dd8
    f654:	e3400001 	movt	r0, #1
    f658:	e3a02f75 	mov	r2, #468	; 0x1d4
    f65c:	ebffe785 	bl	9478 <assertion_failed>
    f660:	e3041db4 	movw	r1, #19892	; 0x4db4
    f664:	e3401001 	movt	r1, #1
    f668:	e3040de4 	movw	r0, #19940	; 0x4de4
    f66c:	e3400001 	movt	r0, #1
    f670:	e30021d5 	movw	r2, #469	; 0x1d5
    f674:	ebffe77f 	bl	9478 <assertion_failed>

0000f678 <CTimer::InterruptHandler()>:
    f678:	e92d4070 	push	{r4, r5, r6, lr}
    f67c:	e1a04000 	mov	r4, r0
    f680:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
    f684:	e3a0c000 	mov	ip, #0
    f688:	e3022710 	movw	r2, #10000	; 0x2710
    f68c:	e0933002 	adds	r3, r3, r2
    f690:	e1a0100c 	mov	r1, ip
    f694:	e1a00003 	mov	r0, r3
    f698:	e2ae2000 	adc	r2, lr, #0
    f69c:	e1a0300c 	mov	r3, ip
    f6a0:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    f6a4:	e5940010 	ldr	r0, [r4, #16]
    f6a8:	e150000c 	cmp	r0, ip
    f6ac:	1a000018 	bne	f714 <CTimer::InterruptHandler()+0x9c>
    f6b0:	e5942004 	ldr	r2, [r4, #4]
    f6b4:	e308351f 	movw	r3, #34079	; 0x851f
    f6b8:	e34531eb 	movt	r3, #20971	; 0x51eb
    f6bc:	e3a01064 	mov	r1, #100	; 0x64
    f6c0:	e2822001 	add	r2, r2, #1
    f6c4:	e5842004 	str	r2, [r4, #4]
    f6c8:	e0830293 	umull	r0, r3, r3, r2
    f6cc:	e1a032a3 	lsr	r3, r3, #5
    f6d0:	e0632391 	mls	r3, r1, r3, r2
    f6d4:	e3530000 	cmp	r3, #0
    f6d8:	0a000019 	beq	f744 <CTimer::InterruptHandler()+0xcc>
    f6dc:	e1a00004 	mov	r0, r4
    f6e0:	ebffff92 	bl	f530 <CTimer::PollKernelTimers()>
    f6e4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f6e8:	e3530000 	cmp	r3, #0
    f6ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    f6f0:	e284602c 	add	r6, r4, #44	; 0x2c
    f6f4:	e3a05000 	mov	r5, #0
    f6f8:	e4963004 	ldr	r3, [r6], #4
    f6fc:	e2855001 	add	r5, r5, #1
    f700:	e12fff33 	blx	r3
    f704:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    f708:	e1530005 	cmp	r3, r5
    f70c:	8afffff9 	bhi	f6f8 <CTimer::InterruptHandler()+0x80>
    f710:	e8bd8070 	pop	{r4, r5, r6, pc}
    f714:	eb0006d2 	bl	11264 <EnterCritical>
    f718:	e5942004 	ldr	r2, [r4, #4]
    f71c:	e3050c29 	movw	r0, #23593	; 0x5c29
    f720:	e34c028f 	movt	r0, #49807	; 0xc28f
    f724:	e2822001 	add	r2, r2, #1
    f728:	e5842004 	str	r2, [r4, #4]
    f72c:	e3051c28 	movw	r1, #23592	; 0x5c28
    f730:	e340128f 	movt	r1, #655	; 0x28f
    f734:	e5943010 	ldr	r3, [r4, #16]
    f738:	e0020290 	mul	r2, r0, r2
    f73c:	e1510162 	cmp	r1, r2, ror #2
    f740:	3a000005 	bcc	f75c <CTimer::InterruptHandler()+0xe4>
    f744:	e5942008 	ldr	r2, [r4, #8]
    f748:	e2822001 	add	r2, r2, #1
    f74c:	e5842008 	str	r2, [r4, #8]
    f750:	e594200c 	ldr	r2, [r4, #12]
    f754:	e2822001 	add	r2, r2, #1
    f758:	e584200c 	str	r2, [r4, #12]
    f75c:	e3530000 	cmp	r3, #0
    f760:	0affffdd 	beq	f6dc <CTimer::InterruptHandler()+0x64>
    f764:	eb0006e9 	bl	11310 <LeaveCritical>
    f768:	eaffffdb 	b	f6dc <CTimer::InterruptHandler()+0x64>

0000f76c <CTimer::InterruptHandler(void*)>:
    f76c:	e3500000 	cmp	r0, #0
    f770:	0a000000 	beq	f778 <CTimer::InterruptHandler(void*)+0xc>
    f774:	eaffffbf 	b	f678 <CTimer::InterruptHandler()>
    f778:	e3041db4 	movw	r1, #19892	; 0x4db4
    f77c:	e3401001 	movt	r1, #1
    f780:	e3040e98 	movw	r0, #20120	; 0x4e98
    f784:	e3400001 	movt	r0, #1
    f788:	e92d4010 	push	{r4, lr}
    f78c:	e300222a 	movw	r2, #554	; 0x22a
    f790:	ebffe738 	bl	9478 <assertion_failed>

0000f794 <CTimer::TuneMsDelay()>:
    f794:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f798:	e1a06000 	mov	r6, r0
    f79c:	e5900020 	ldr	r0, [r0, #32]
    f7a0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    f7a4:	e24dd00c 	sub	sp, sp, #12
    f7a8:	e5967004 	ldr	r7, [r6, #4]
    f7ac:	e3025710 	movw	r5, #10000	; 0x2710
    f7b0:	e308451f 	movw	r4, #34079	; 0x851f
    f7b4:	e34541eb 	movt	r4, #20971	; 0x51eb
    f7b8:	e0000092 	mul	r0, r2, r0
    f7bc:	eb000a5b 	bl	12130 <DelayLoop>
    f7c0:	e5963004 	ldr	r3, [r6, #4]
    f7c4:	e0433007 	sub	r3, r3, r7
    f7c8:	e735f315 	udiv	r5, r5, r3
    f7cc:	e5963020 	ldr	r3, [r6, #32]
    f7d0:	e0030593 	mul	r3, r3, r5
    f7d4:	e0832394 	umull	r2, r3, r4, r3
    f7d8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    f7dc:	e3412062 	movt	r2, #4194	; 0x1062
    f7e0:	e1a032a3 	lsr	r3, r3, #5
    f7e4:	e5863020 	str	r3, [r6, #32]
    f7e8:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    f7ec:	e0832392 	umull	r2, r3, r2, r3
    f7f0:	e1a03323 	lsr	r3, r3, #6
    f7f4:	e5863024 	str	r3, [r6, #36]	; 0x24
    f7f8:	e0843594 	umull	r3, r4, r4, r5
    f7fc:	ebffeda7 	bl	aea0 <CLogger::Get()>
    f800:	e3a02064 	mov	r2, #100	; 0x64
    f804:	e59f1024 	ldr	r1, [pc, #36]	; f830 <CTimer::TuneMsDelay()+0x9c>
    f808:	e3043ea4 	movw	r3, #20132	; 0x4ea4
    f80c:	e3403001 	movt	r3, #1
    f810:	e1a042a4 	lsr	r4, r4, #5
    f814:	e58d4000 	str	r4, [sp]
    f818:	e0645492 	mls	r4, r2, r4, r5
    f81c:	e3a02003 	mov	r2, #3
    f820:	e58d4004 	str	r4, [sp, #4]
    f824:	ebffef7d 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f828:	e28dd00c 	add	sp, sp, #12
    f82c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f830:	00014fc4 	.word	0x00014fc4

0000f834 <CTimer::Initialize()>:
    f834:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f838:	e1a04000 	mov	r4, r0
    f83c:	e5900000 	ldr	r0, [r0]
    f840:	e24dd00c 	sub	sp, sp, #12
    f844:	e3500000 	cmp	r0, #0
    f848:	0a000028 	beq	f8f0 <CTimer::Initialize()+0xbc>
    f84c:	e1a03004 	mov	r3, r4
    f850:	e3a01049 	mov	r1, #73	; 0x49
    f854:	e30f276c 	movw	r2, #63340	; 0xf76c
    f858:	e3402000 	movt	r2, #0
    f85c:	eb0006ff 	bl	11460 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    f860:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
    f864:	e3a05000 	mov	r5, #0
    f868:	e3022710 	movw	r2, #10000	; 0x2710
    f86c:	e0933002 	adds	r3, r3, r2
    f870:	e1a01005 	mov	r1, r5
    f874:	e1a00003 	mov	r0, r3
    f878:	e2ac6000 	adc	r6, ip, #0
    f87c:	e1a07005 	mov	r7, r5
    f880:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
    f884:	e3a03001 	mov	r3, #1
    f888:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    f88c:	e1a00004 	mov	r0, r4
    f890:	ebffffbf 	bl	f794 <CTimer::TuneMsDelay()>
    f894:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
    f898:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    f89c:	e3a02b3e 	mov	r2, #63488	; 0xf800
    f8a0:	e3402124 	movt	r2, #292	; 0x124
    f8a4:	e30a3aab 	movw	r3, #43691	; 0xaaab
    f8a8:	e34036aa 	movt	r3, #1706	; 0x6aa
    f8ac:	e5916008 	ldr	r6, [r1, #8]
    f8b0:	e1560003 	cmp	r6, r3
    f8b4:	01540002 	cmpeq	r4, r2
    f8b8:	1a000002 	bne	f8c8 <CTimer::Initialize()+0x94>
    f8bc:	e3a00001 	mov	r0, #1
    f8c0:	e28dd00c 	add	sp, sp, #12
    f8c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f8c8:	ebffed74 	bl	aea0 <CLogger::Get()>
    f8cc:	e59f1034 	ldr	r1, [pc, #52]	; f908 <CTimer::Initialize()+0xd4>
    f8d0:	e1a02005 	mov	r2, r5
    f8d4:	e88d0050 	stm	sp, {r4, r6}
    f8d8:	e3043ebc 	movw	r3, #20156	; 0x4ebc
    f8dc:	e3403001 	movt	r3, #1
    f8e0:	ebffef4e 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f8e4:	e3a00001 	mov	r0, #1
    f8e8:	e28dd00c 	add	sp, sp, #12
    f8ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f8f0:	e3041db4 	movw	r1, #19892	; 0x4db4
    f8f4:	e3401001 	movt	r1, #1
    f8f8:	e3040dc0 	movw	r0, #19904	; 0x4dc0
    f8fc:	e3400001 	movt	r0, #1
    f900:	e3a02066 	mov	r2, #102	; 0x66
    f904:	ebffe6db 	bl	9478 <assertion_failed>
    f908:	00014fc4 	.word	0x00014fc4

0000f90c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
    f90c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    f910:	e92d4010 	push	{r4, lr}
    f914:	e3530000 	cmp	r3, #0
    f918:	1a000008 	bne	f940 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
    f91c:	e3510000 	cmp	r1, #0
    f920:	e5801028 	str	r1, [r0, #40]	; 0x28
    f924:	18bd8010 	popne	{r4, pc}
    f928:	e3041db4 	movw	r1, #19892	; 0x4db4
    f92c:	e3401001 	movt	r1, #1
    f930:	e3040f14 	movw	r0, #20244	; 0x4f14
    f934:	e3400001 	movt	r0, #1
    f938:	e3002242 	movw	r2, #578	; 0x242
    f93c:	ebffe6cd 	bl	9478 <assertion_failed>
    f940:	e3041db4 	movw	r1, #19892	; 0x4db4
    f944:	e3401001 	movt	r1, #1
    f948:	e3040ef8 	movw	r0, #20216	; 0x4ef8
    f94c:	e3400001 	movt	r0, #1
    f950:	e3a02d09 	mov	r2, #576	; 0x240
    f954:	ebffe6c7 	bl	9478 <assertion_failed>

0000f958 <CTimer::RegisterPeriodicHandler(void (*)())>:
    f958:	e3510000 	cmp	r1, #0
    f95c:	e92d4010 	push	{r4, lr}
    f960:	0a00000a 	beq	f990 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
    f964:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    f968:	e3530003 	cmp	r3, #3
    f96c:	8a00000d 	bhi	f9a8 <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    f970:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    f974:	e0803103 	add	r3, r0, r3, lsl #2
    f978:	e583102c 	str	r1, [r3, #44]	; 0x2c
    f97c:	f57ff04f 	dsb	sy
    f980:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    f984:	e2833001 	add	r3, r3, #1
    f988:	e580303c 	str	r3, [r0, #60]	; 0x3c
    f98c:	e8bd8010 	pop	{r4, pc}
    f990:	e3041db4 	movw	r1, #19892	; 0x4db4
    f994:	e3401001 	movt	r1, #1
    f998:	e3050270 	movw	r0, #21104	; 0x5270
    f99c:	e3400001 	movt	r0, #1
    f9a0:	e3002247 	movw	r2, #583	; 0x247
    f9a4:	ebffe6b3 	bl	9478 <assertion_failed>
    f9a8:	e3041db4 	movw	r1, #19892	; 0x4db4
    f9ac:	e3401001 	movt	r1, #1
    f9b0:	e3040f30 	movw	r0, #20272	; 0x4f30
    f9b4:	e3400001 	movt	r0, #1
    f9b8:	e3002249 	movw	r2, #585	; 0x249
    f9bc:	ebffe6ad 	bl	9478 <assertion_failed>

0000f9c0 <CTimer::SimpleMsDelay(unsigned int)>:
    f9c0:	e3500000 	cmp	r0, #0
    f9c4:	012fff1e 	bxeq	lr
    f9c8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    f9cc:	e0000093 	mul	r0, r3, r0
    f9d0:	e3500000 	cmp	r0, #0
    f9d4:	012fff1e 	bxeq	lr
    f9d8:	e2800001 	add	r0, r0, #1
    f9dc:	f57ff06f 	isb	sy
    f9e0:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    f9e4:	f57ff06f 	isb	sy
    f9e8:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    f9ec:	e0433002 	sub	r3, r3, r2
    f9f0:	e1500003 	cmp	r0, r3
    f9f4:	8afffffa 	bhi	f9e4 <CTimer::SimpleMsDelay(unsigned int)+0x24>
    f9f8:	e12fff1e 	bx	lr

0000f9fc <CTimer::SimpleusDelay(unsigned int)>:
    f9fc:	e3500000 	cmp	r0, #0
    fa00:	012fff1e 	bxeq	lr
    fa04:	e2800001 	add	r0, r0, #1
    fa08:	f57ff06f 	isb	sy
    fa0c:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    fa10:	f57ff06f 	isb	sy
    fa14:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    fa18:	e0433002 	sub	r3, r3, r2
    fa1c:	e1500003 	cmp	r0, r3
    fa20:	8afffffa 	bhi	fa10 <CTimer::SimpleusDelay(unsigned int)+0x14>
    fa24:	e12fff1e 	bx	lr

0000fa28 <CTimer::IsLeapYear(unsigned int)>:
    fa28:	e3053c29 	movw	r3, #23593	; 0x5c29
    fa2c:	e34c328f 	movt	r3, #49807	; 0xc28f
    fa30:	e3052c28 	movw	r2, #23592	; 0x5c28
    fa34:	e340228f 	movt	r2, #655	; 0x28f
    fa38:	e0030093 	mul	r3, r3, r0
    fa3c:	e1520163 	cmp	r2, r3, ror #2
    fa40:	2a000003 	bcs	fa54 <CTimer::IsLeapYear(unsigned int)+0x2c>
    fa44:	e3100003 	tst	r0, #3
    fa48:	03a00001 	moveq	r0, #1
    fa4c:	13a00000 	movne	r0, #0
    fa50:	e12fff1e 	bx	lr
    fa54:	e30d270a 	movw	r2, #55050	; 0xd70a
    fa58:	e34020a3 	movt	r2, #163	; 0xa3
    fa5c:	e1520263 	cmp	r2, r3, ror #4
    fa60:	23a00001 	movcs	r0, #1
    fa64:	33a00000 	movcc	r0, #0
    fa68:	e12fff1e 	bx	lr

0000fa6c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    fa6c:	e3500001 	cmp	r0, #1
    fa70:	0a000003 	beq	fa84 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    fa74:	e3043f94 	movw	r3, #20372	; 0x4f94
    fa78:	e3403001 	movt	r3, #1
    fa7c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    fa80:	e12fff1e 	bx	lr
    fa84:	e3053c29 	movw	r3, #23593	; 0x5c29
    fa88:	e34c328f 	movt	r3, #49807	; 0xc28f
    fa8c:	e3052c28 	movw	r2, #23592	; 0x5c28
    fa90:	e340228f 	movt	r2, #655	; 0x28f
    fa94:	e0030193 	mul	r3, r3, r1
    fa98:	e1520163 	cmp	r2, r3, ror #2
    fa9c:	2a000003 	bcs	fab0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
    faa0:	e3110003 	tst	r1, #3
    faa4:	1afffff2 	bne	fa74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    faa8:	e3a0001d 	mov	r0, #29
    faac:	e12fff1e 	bx	lr
    fab0:	e30d270a 	movw	r2, #55050	; 0xd70a
    fab4:	e34020a3 	movt	r2, #163	; 0xa3
    fab8:	e1520263 	cmp	r2, r3, ror #4
    fabc:	3affffec 	bcc	fa74 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    fac0:	eafffff8 	b	faa8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

0000fac4 <CTimer::Get()>:
    fac4:	e306392c 	movw	r3, #26924	; 0x692c
    fac8:	e3403001 	movt	r3, #1
    facc:	e5930000 	ldr	r0, [r3]
    fad0:	e3500000 	cmp	r0, #0
    fad4:	112fff1e 	bxne	lr
    fad8:	e3041db4 	movw	r1, #19892	; 0x4db4
    fadc:	e3401001 	movt	r1, #1
    fae0:	e3040384 	movw	r0, #17284	; 0x4384
    fae4:	e3400001 	movt	r0, #1
    fae8:	e92d4010 	push	{r4, lr}
    faec:	e300228a 	movw	r2, #650	; 0x28a
    faf0:	ebffe660 	bl	9478 <assertion_failed>

0000faf4 <memset>:
    faf4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    faf8:	e28db000 	add	fp, sp, #0
    fafc:	e24dd024 	sub	sp, sp, #36	; 0x24
    fb00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    fb04:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    fb08:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    fb0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    fb10:	e50b3008 	str	r3, [fp, #-8]
    fb14:	e51b3008 	ldr	r3, [fp, #-8]
    fb18:	e2033003 	and	r3, r3, #3
    fb1c:	e3530000 	cmp	r3, #0
    fb20:	1a000027 	bne	fbc4 <memset+0xd0>
    fb24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    fb28:	e353000f 	cmp	r3, #15
    fb2c:	9a000024 	bls	fbc4 <memset+0xd0>
    fb30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    fb34:	e1a02403 	lsl	r2, r3, #8
    fb38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    fb3c:	e1823003 	orr	r3, r2, r3
    fb40:	e50b3010 	str	r3, [fp, #-16]
    fb44:	e51b3010 	ldr	r3, [fp, #-16]
    fb48:	e1a03803 	lsl	r3, r3, #16
    fb4c:	e51b2010 	ldr	r2, [fp, #-16]
    fb50:	e1823003 	orr	r3, r2, r3
    fb54:	e50b3010 	str	r3, [fp, #-16]
    fb58:	e51b3008 	ldr	r3, [fp, #-8]
    fb5c:	e2832004 	add	r2, r3, #4
    fb60:	e50b2008 	str	r2, [fp, #-8]
    fb64:	e51b2010 	ldr	r2, [fp, #-16]
    fb68:	e5832000 	str	r2, [r3]
    fb6c:	e51b3008 	ldr	r3, [fp, #-8]
    fb70:	e2832004 	add	r2, r3, #4
    fb74:	e50b2008 	str	r2, [fp, #-8]
    fb78:	e51b2010 	ldr	r2, [fp, #-16]
    fb7c:	e5832000 	str	r2, [r3]
    fb80:	e51b3008 	ldr	r3, [fp, #-8]
    fb84:	e2832004 	add	r2, r3, #4
    fb88:	e50b2008 	str	r2, [fp, #-8]
    fb8c:	e51b2010 	ldr	r2, [fp, #-16]
    fb90:	e5832000 	str	r2, [r3]
    fb94:	e51b3008 	ldr	r3, [fp, #-8]
    fb98:	e2832004 	add	r2, r3, #4
    fb9c:	e50b2008 	str	r2, [fp, #-8]
    fba0:	e51b2010 	ldr	r2, [fp, #-16]
    fba4:	e5832000 	str	r2, [r3]
    fba8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    fbac:	e2433010 	sub	r3, r3, #16
    fbb0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    fbb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    fbb8:	e353000f 	cmp	r3, #15
    fbbc:	9a000000 	bls	fbc4 <memset+0xd0>
    fbc0:	eaffffe4 	b	fb58 <memset+0x64>
    fbc4:	e51b3008 	ldr	r3, [fp, #-8]
    fbc8:	e50b300c 	str	r3, [fp, #-12]
    fbcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    fbd0:	e2432001 	sub	r2, r3, #1
    fbd4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    fbd8:	e3530000 	cmp	r3, #0
    fbdc:	13a03001 	movne	r3, #1
    fbe0:	03a03000 	moveq	r3, #0
    fbe4:	e6ef3073 	uxtb	r3, r3
    fbe8:	e3530000 	cmp	r3, #0
    fbec:	0a000006 	beq	fc0c <memset+0x118>
    fbf0:	e51b300c 	ldr	r3, [fp, #-12]
    fbf4:	e2832001 	add	r2, r3, #1
    fbf8:	e50b200c 	str	r2, [fp, #-12]
    fbfc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    fc00:	e6af2072 	sxtb	r2, r2
    fc04:	e5c32000 	strb	r2, [r3]
    fc08:	eaffffef 	b	fbcc <memset+0xd8>
    fc0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    fc10:	e1a00003 	mov	r0, r3
    fc14:	e28bd000 	add	sp, fp, #0
    fc18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    fc1c:	e12fff1e 	bx	lr

0000fc20 <memmove>:
    fc20:	e1500001 	cmp	r0, r1
    fc24:	9a000002 	bls	fc34 <memmove+0x14>
    fc28:	e0813002 	add	r3, r1, r2
    fc2c:	e1530000 	cmp	r3, r0
    fc30:	8a000000 	bhi	fc38 <memmove+0x18>
    fc34:	ea00020d 	b	10470 <memcpy>
    fc38:	e3520000 	cmp	r2, #0
    fc3c:	e080c002 	add	ip, r0, r2
    fc40:	012fff1e 	bxeq	lr
    fc44:	e1a0200c 	mov	r2, ip
    fc48:	e173c0d1 	ldrsb	ip, [r3, #-1]!
    fc4c:	e562c001 	strb	ip, [r2, #-1]!
    fc50:	e1510003 	cmp	r1, r3
    fc54:	1afffffb 	bne	fc48 <memmove+0x28>
    fc58:	e12fff1e 	bx	lr

0000fc5c <memcmp>:
    fc5c:	e242c001 	sub	ip, r2, #1
    fc60:	e3520000 	cmp	r2, #0
    fc64:	0a00000c 	beq	fc9c <memcmp+0x40>
    fc68:	e2403001 	sub	r3, r0, #1
    fc6c:	e2411001 	sub	r1, r1, #1
    fc70:	e080c00c 	add	ip, r0, ip
    fc74:	ea000002 	b	fc84 <memcmp+0x28>
    fc78:	3a000009 	bcc	fca4 <memcmp+0x48>
    fc7c:	e153000c 	cmp	r3, ip
    fc80:	0a000005 	beq	fc9c <memcmp+0x40>
    fc84:	e5f30001 	ldrb	r0, [r3, #1]!
    fc88:	e5f12001 	ldrb	r2, [r1, #1]!
    fc8c:	e1500002 	cmp	r0, r2
    fc90:	9afffff8 	bls	fc78 <memcmp+0x1c>
    fc94:	e3a00001 	mov	r0, #1
    fc98:	e12fff1e 	bx	lr
    fc9c:	e3a00000 	mov	r0, #0
    fca0:	e12fff1e 	bx	lr
    fca4:	e3e00000 	mvn	r0, #0
    fca8:	e12fff1e 	bx	lr

0000fcac <strlen>:
    fcac:	e1a03000 	mov	r3, r0
    fcb0:	e0d300d1 	ldrsb	r0, [r3], #1
    fcb4:	e3500000 	cmp	r0, #0
    fcb8:	012fff1e 	bxeq	lr
    fcbc:	e3a00000 	mov	r0, #0
    fcc0:	e0d320d1 	ldrsb	r2, [r3], #1
    fcc4:	e2800001 	add	r0, r0, #1
    fcc8:	e3520000 	cmp	r2, #0
    fccc:	1afffffb 	bne	fcc0 <strlen+0x14>
    fcd0:	e12fff1e 	bx	lr

0000fcd4 <strcmp>:
    fcd4:	e1d030d0 	ldrsb	r3, [r0]
    fcd8:	e3530000 	cmp	r3, #0
    fcdc:	1a000006 	bne	fcfc <strcmp+0x28>
    fce0:	ea000016 	b	fd40 <strcmp+0x6c>
    fce4:	e1520003 	cmp	r2, r3
    fce8:	ba00000c 	blt	fd20 <strcmp+0x4c>
    fcec:	ca00000d 	bgt	fd28 <strcmp+0x54>
    fcf0:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fcf4:	e3530000 	cmp	r3, #0
    fcf8:	0a00000c 	beq	fd30 <strcmp+0x5c>
    fcfc:	e1a0c001 	mov	ip, r1
    fd00:	e0d120d1 	ldrsb	r2, [r1], #1
    fd04:	e3520000 	cmp	r2, #0
    fd08:	1afffff5 	bne	fce4 <strcmp+0x10>
    fd0c:	e1530002 	cmp	r3, r2
    fd10:	ca000002 	bgt	fd20 <strcmp+0x4c>
    fd14:	a3a00000 	movge	r0, #0
    fd18:	b3e00000 	mvnlt	r0, #0
    fd1c:	e12fff1e 	bx	lr
    fd20:	e3a00001 	mov	r0, #1
    fd24:	e12fff1e 	bx	lr
    fd28:	e3e00000 	mvn	r0, #0
    fd2c:	e12fff1e 	bx	lr
    fd30:	e1dc20d1 	ldrsb	r2, [ip, #1]
    fd34:	e1530002 	cmp	r3, r2
    fd38:	dafffff5 	ble	fd14 <strcmp+0x40>
    fd3c:	eafffff7 	b	fd20 <strcmp+0x4c>
    fd40:	e1d120d0 	ldrsb	r2, [r1]
    fd44:	eafffff0 	b	fd0c <strcmp+0x38>

0000fd48 <strcasecmp>:
    fd48:	e2402001 	sub	r2, r0, #1
    fd4c:	ea000009 	b	fd78 <strcasecmp+0x30>
    fd50:	e0d100d1 	ldrsb	r0, [r1], #1
    fd54:	e240c061 	sub	ip, r0, #97	; 0x61
    fd58:	e35c0019 	cmp	ip, #25
    fd5c:	92400020 	subls	r0, r0, #32
    fd60:	9a000001 	bls	fd6c <strcasecmp+0x24>
    fd64:	e3500000 	cmp	r0, #0
    fd68:	0a000012 	beq	fdb8 <strcasecmp+0x70>
    fd6c:	e1530000 	cmp	r3, r0
    fd70:	ca000012 	bgt	fdc0 <strcasecmp+0x78>
    fd74:	ba000013 	blt	fdc8 <strcasecmp+0x80>
    fd78:	e1f230d1 	ldrsb	r3, [r2, #1]!
    fd7c:	e2430061 	sub	r0, r3, #97	; 0x61
    fd80:	e3500019 	cmp	r0, #25
    fd84:	92433020 	subls	r3, r3, #32
    fd88:	9afffff0 	bls	fd50 <strcasecmp+0x8>
    fd8c:	e3530000 	cmp	r3, #0
    fd90:	1affffee 	bne	fd50 <strcasecmp+0x8>
    fd94:	e1d100d0 	ldrsb	r0, [r1]
    fd98:	e2402061 	sub	r2, r0, #97	; 0x61
    fd9c:	e3520019 	cmp	r2, #25
    fda0:	92400020 	subls	r0, r0, #32
    fda4:	8a000003 	bhi	fdb8 <strcasecmp+0x70>
    fda8:	e1530000 	cmp	r3, r0
    fdac:	a3a00000 	movge	r0, #0
    fdb0:	b3e00000 	mvnlt	r0, #0
    fdb4:	e12fff1e 	bx	lr
    fdb8:	e1500003 	cmp	r0, r3
    fdbc:	aafffff9 	bge	fda8 <strcasecmp+0x60>
    fdc0:	e3a00001 	mov	r0, #1
    fdc4:	e12fff1e 	bx	lr
    fdc8:	e3e00000 	mvn	r0, #0
    fdcc:	e12fff1e 	bx	lr

0000fdd0 <strncmp>:
    fdd0:	e3520000 	cmp	r2, #0
    fdd4:	0a000015 	beq	fe30 <strncmp+0x60>
    fdd8:	e2400001 	sub	r0, r0, #1
    fddc:	e081c002 	add	ip, r1, r2
    fde0:	ea000007 	b	fe04 <strncmp+0x34>
    fde4:	e0d120d1 	ldrsb	r2, [r1], #1
    fde8:	e3520000 	cmp	r2, #0
    fdec:	0a000008 	beq	fe14 <strncmp+0x44>
    fdf0:	e1530002 	cmp	r3, r2
    fdf4:	ca00000b 	bgt	fe28 <strncmp+0x58>
    fdf8:	ba00000e 	blt	fe38 <strncmp+0x68>
    fdfc:	e151000c 	cmp	r1, ip
    fe00:	0a00000a 	beq	fe30 <strncmp+0x60>
    fe04:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fe08:	e3530000 	cmp	r3, #0
    fe0c:	1afffff4 	bne	fde4 <strncmp+0x14>
    fe10:	e1d120d0 	ldrsb	r2, [r1]
    fe14:	e1520003 	cmp	r2, r3
    fe18:	ba000002 	blt	fe28 <strncmp+0x58>
    fe1c:	d3a00000 	movle	r0, #0
    fe20:	c3e00000 	mvngt	r0, #0
    fe24:	e12fff1e 	bx	lr
    fe28:	e3a00001 	mov	r0, #1
    fe2c:	e12fff1e 	bx	lr
    fe30:	e3a00000 	mov	r0, #0
    fe34:	e12fff1e 	bx	lr
    fe38:	e3e00000 	mvn	r0, #0
    fe3c:	e12fff1e 	bx	lr

0000fe40 <strncasecmp>:
    fe40:	e1a0c000 	mov	ip, r0
    fe44:	e2520000 	subs	r0, r2, #0
    fe48:	012fff1e 	bxeq	lr
    fe4c:	e24cc001 	sub	ip, ip, #1
    fe50:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fe54:	e2432061 	sub	r2, r3, #97	; 0x61
    fe58:	e3520019 	cmp	r2, #25
    fe5c:	92433020 	subls	r3, r3, #32
    fe60:	8a00000d 	bhi	fe9c <strncasecmp+0x5c>
    fe64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    fe68:	e0d120d1 	ldrsb	r2, [r1], #1
    fe6c:	e242e061 	sub	lr, r2, #97	; 0x61
    fe70:	e35e0019 	cmp	lr, #25
    fe74:	92422020 	subls	r2, r2, #32
    fe78:	9a000012 	bls	fec8 <strncasecmp+0x88>
    fe7c:	e3520000 	cmp	r2, #0
    fe80:	1a000010 	bne	fec8 <strncasecmp+0x88>
    fe84:	e1530002 	cmp	r3, r2
    fe88:	ca000020 	bgt	ff10 <strncasecmp+0xd0>
    fe8c:	e1520003 	cmp	r2, r3
    fe90:	d3a00000 	movle	r0, #0
    fe94:	c3e00000 	mvngt	r0, #0
    fe98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fe9c:	e3530000 	cmp	r3, #0
    fea0:	1affffef 	bne	fe64 <strncasecmp+0x24>
    fea4:	e1d120d0 	ldrsb	r2, [r1]
    fea8:	e2421061 	sub	r1, r2, #97	; 0x61
    feac:	e3510019 	cmp	r1, #25
    feb0:	92422020 	subls	r2, r2, #32
    feb4:	8a000019 	bhi	ff20 <strncasecmp+0xe0>
    feb8:	e1520003 	cmp	r2, r3
    febc:	d3a00000 	movle	r0, #0
    fec0:	c3e00000 	mvngt	r0, #0
    fec4:	e12fff1e 	bx	lr
    fec8:	e1530002 	cmp	r3, r2
    fecc:	ca00000f 	bgt	ff10 <strncasecmp+0xd0>
    fed0:	ba000010 	blt	ff18 <strncasecmp+0xd8>
    fed4:	e2500001 	subs	r0, r0, #1
    fed8:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    fedc:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    fee0:	e2432061 	sub	r2, r3, #97	; 0x61
    fee4:	e3520019 	cmp	r2, #25
    fee8:	92433020 	subls	r3, r3, #32
    feec:	9affffdd 	bls	fe68 <strncasecmp+0x28>
    fef0:	e3530000 	cmp	r3, #0
    fef4:	1affffdb 	bne	fe68 <strncasecmp+0x28>
    fef8:	e1d120d0 	ldrsb	r2, [r1]
    fefc:	e2421061 	sub	r1, r2, #97	; 0x61
    ff00:	e3510019 	cmp	r1, #25
    ff04:	92422020 	subls	r2, r2, #32
    ff08:	9affffdf 	bls	fe8c <strncasecmp+0x4c>
    ff0c:	eaffffdc 	b	fe84 <strncasecmp+0x44>
    ff10:	e3a00001 	mov	r0, #1
    ff14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ff18:	e3e00000 	mvn	r0, #0
    ff1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ff20:	e1530002 	cmp	r3, r2
    ff24:	daffffe3 	ble	feb8 <strncasecmp+0x78>
    ff28:	e3a00001 	mov	r0, #1
    ff2c:	e12fff1e 	bx	lr

0000ff30 <strcpy>:
    ff30:	e1d130d0 	ldrsb	r3, [r1]
    ff34:	e1a02000 	mov	r2, r0
    ff38:	e3530000 	cmp	r3, #0
    ff3c:	0a000003 	beq	ff50 <strcpy+0x20>
    ff40:	e4c23001 	strb	r3, [r2], #1
    ff44:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ff48:	e3530000 	cmp	r3, #0
    ff4c:	1afffffb 	bne	ff40 <strcpy+0x10>
    ff50:	e3a03000 	mov	r3, #0
    ff54:	e5c23000 	strb	r3, [r2]
    ff58:	e12fff1e 	bx	lr

0000ff5c <strncpy>:
    ff5c:	e3520000 	cmp	r2, #0
    ff60:	012fff1e 	bxeq	lr
    ff64:	e080c002 	add	ip, r0, r2
    ff68:	e2411001 	sub	r1, r1, #1
    ff6c:	e1a02000 	mov	r2, r0
    ff70:	ea000002 	b	ff80 <strncpy+0x24>
    ff74:	e4c23001 	strb	r3, [r2], #1
    ff78:	e152000c 	cmp	r2, ip
    ff7c:	012fff1e 	bxeq	lr
    ff80:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ff84:	e3530000 	cmp	r3, #0
    ff88:	1afffff9 	bne	ff74 <strncpy+0x18>
    ff8c:	e5c23000 	strb	r3, [r2]
    ff90:	e12fff1e 	bx	lr

0000ff94 <strcat>:
    ff94:	e1d030d0 	ldrsb	r3, [r0]
    ff98:	e3530000 	cmp	r3, #0
    ff9c:	e1a03000 	mov	r3, r0
    ffa0:	0a000002 	beq	ffb0 <strcat+0x1c>
    ffa4:	e1f320d1 	ldrsb	r2, [r3, #1]!
    ffa8:	e3520000 	cmp	r2, #0
    ffac:	1afffffc 	bne	ffa4 <strcat+0x10>
    ffb0:	e1d120d0 	ldrsb	r2, [r1]
    ffb4:	e3520000 	cmp	r2, #0
    ffb8:	0a000003 	beq	ffcc <strcat+0x38>
    ffbc:	e4c32001 	strb	r2, [r3], #1
    ffc0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    ffc4:	e3520000 	cmp	r2, #0
    ffc8:	1afffffb 	bne	ffbc <strcat+0x28>
    ffcc:	e3a02000 	mov	r2, #0
    ffd0:	e5c32000 	strb	r2, [r3]
    ffd4:	e12fff1e 	bx	lr

0000ffd8 <strchr>:
    ffd8:	e1d030d0 	ldrsb	r3, [r0]
    ffdc:	e3530000 	cmp	r3, #0
    ffe0:	0a000004 	beq	fff8 <strchr+0x20>
    ffe4:	e1530001 	cmp	r3, r1
    ffe8:	012fff1e 	bxeq	lr
    ffec:	e1f030d1 	ldrsb	r3, [r0, #1]!
    fff0:	e3530000 	cmp	r3, #0
    fff4:	1afffffa 	bne	ffe4 <strchr+0xc>
    fff8:	e1a00003 	mov	r0, r3
    fffc:	e12fff1e 	bx	lr

00010000 <strstr>:
   10000:	e1d030d0 	ldrsb	r3, [r0]
   10004:	e3530000 	cmp	r3, #0
   10008:	1a000003 	bne	1001c <strstr+0x1c>
   1000c:	e1d130d0 	ldrsb	r3, [r1]
   10010:	e3530000 	cmp	r3, #0
   10014:	13a00000 	movne	r0, #0
   10018:	e12fff1e 	bx	lr
   1001c:	e92d4010 	push	{r4, lr}
   10020:	e1d140d0 	ldrsb	r4, [r1]
   10024:	e3540000 	cmp	r4, #0
   10028:	08bd8010 	popeq	{r4, pc}
   1002c:	e2402001 	sub	r2, r0, #1
   10030:	e1a0e001 	mov	lr, r1
   10034:	e1a03004 	mov	r3, r4
   10038:	ea000002 	b	10048 <strstr+0x48>
   1003c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10040:	e3530000 	cmp	r3, #0
   10044:	08bd8010 	popeq	{r4, pc}
   10048:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   1004c:	e15c0003 	cmp	ip, r3
   10050:	0afffff9 	beq	1003c <strstr+0x3c>
   10054:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10058:	e3530000 	cmp	r3, #0
   1005c:	1afffff0 	bne	10024 <strstr+0x24>
   10060:	e1a00003 	mov	r0, r3
   10064:	e8bd8010 	pop	{r4, pc}

00010068 <strtok_r>:
   10068:	e92d4030 	push	{r4, r5, lr}
   1006c:	e1a05002 	mov	r5, r2
   10070:	e2502000 	subs	r2, r0, #0
   10074:	0a000026 	beq	10114 <strtok_r+0xac>
   10078:	e1d2c0d0 	ldrsb	ip, [r2]
   1007c:	e35c0000 	cmp	ip, #0
   10080:	0a000028 	beq	10128 <strtok_r+0xc0>
   10084:	e1d100d0 	ldrsb	r0, [r1]
   10088:	e3500000 	cmp	r0, #0
   1008c:	0a00000a 	beq	100bc <strtok_r+0x54>
   10090:	e1a0e001 	mov	lr, r1
   10094:	e1a03000 	mov	r3, r0
   10098:	ea000002 	b	100a8 <strtok_r+0x40>
   1009c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   100a0:	e3530000 	cmp	r3, #0
   100a4:	0a000004 	beq	100bc <strtok_r+0x54>
   100a8:	e153000c 	cmp	r3, ip
   100ac:	1afffffa 	bne	1009c <strtok_r+0x34>
   100b0:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   100b4:	e3500000 	cmp	r0, #0
   100b8:	1afffff4 	bne	10090 <strtok_r+0x28>
   100bc:	e35c0000 	cmp	ip, #0
   100c0:	11a04002 	movne	r4, r2
   100c4:	0a000017 	beq	10128 <strtok_r+0xc0>
   100c8:	e3500000 	cmp	r0, #0
   100cc:	0a00000c 	beq	10104 <strtok_r+0x9c>
   100d0:	e1a03000 	mov	r3, r0
   100d4:	e1a0e001 	mov	lr, r1
   100d8:	ea000002 	b	100e8 <strtok_r+0x80>
   100dc:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   100e0:	e3530000 	cmp	r3, #0
   100e4:	0a000006 	beq	10104 <strtok_r+0x9c>
   100e8:	e15c0003 	cmp	ip, r3
   100ec:	1afffffa 	bne	100dc <strtok_r+0x74>
   100f0:	e3a03000 	mov	r3, #0
   100f4:	e4c43001 	strb	r3, [r4], #1
   100f8:	e1a00002 	mov	r0, r2
   100fc:	e5854000 	str	r4, [r5]
   10100:	e8bd8030 	pop	{r4, r5, pc}
   10104:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
   10108:	e35c0000 	cmp	ip, #0
   1010c:	1affffed 	bne	100c8 <strtok_r+0x60>
   10110:	eafffff8 	b	100f8 <strtok_r+0x90>
   10114:	e5952000 	ldr	r2, [r5]
   10118:	e3520000 	cmp	r2, #0
   1011c:	1affffd5 	bne	10078 <strtok_r+0x10>
   10120:	e1a00002 	mov	r0, r2
   10124:	e8bd8030 	pop	{r4, r5, pc}
   10128:	e3a02000 	mov	r2, #0
   1012c:	e5852000 	str	r2, [r5]
   10130:	e1a00002 	mov	r0, r2
   10134:	e8bd8030 	pop	{r4, r5, pc}

00010138 <strtoul>:
   10138:	e92d4070 	push	{r4, r5, r6, lr}
   1013c:	e2514000 	subs	r4, r1, #0
   10140:	e2423002 	sub	r3, r2, #2
   10144:	15840000 	strne	r0, [r4]
   10148:	e3520000 	cmp	r2, #0
   1014c:	13530022 	cmpne	r3, #34	; 0x22
   10150:	8a000041 	bhi	1025c <strtoul+0x124>
   10154:	e1d030d0 	ldrsb	r3, [r0]
   10158:	e1a01000 	mov	r1, r0
   1015c:	e2800001 	add	r0, r0, #1
   10160:	e243c009 	sub	ip, r3, #9
   10164:	e3530020 	cmp	r3, #32
   10168:	0afffff9 	beq	10154 <strtoul+0x1c>
   1016c:	e6efc07c 	uxtb	ip, ip
   10170:	e35c0004 	cmp	ip, #4
   10174:	9afffff6 	bls	10154 <strtoul+0x1c>
   10178:	e353002b 	cmp	r3, #43	; 0x2b
   1017c:	0a000027 	beq	10220 <strtoul+0xe8>
   10180:	e353002d 	cmp	r3, #45	; 0x2d
   10184:	03a06001 	moveq	r6, #1
   10188:	13a06000 	movne	r6, #0
   1018c:	01d130d1 	ldrsbeq	r3, [r1, #1]
   10190:	01a01000 	moveq	r1, r0
   10194:	e3530030 	cmp	r3, #48	; 0x30
   10198:	0a000025 	beq	10234 <strtoul+0xfc>
   1019c:	e3520000 	cmp	r2, #0
   101a0:	03a0200a 	moveq	r2, #10
   101a4:	e1a0c003 	mov	ip, r3
   101a8:	e353002f 	cmp	r3, #47	; 0x2f
   101ac:	da000039 	ble	10298 <strtoul+0x160>
   101b0:	e3a05001 	mov	r5, #1
   101b4:	e3a0e000 	mov	lr, #0
   101b8:	ea000008 	b	101e0 <strtoul+0xa8>
   101bc:	e020c29e 	mla	r0, lr, r2, ip
   101c0:	e3a05000 	mov	r5, #0
   101c4:	e150000e 	cmp	r0, lr
   101c8:	3a000029 	bcc	10274 <strtoul+0x13c>
   101cc:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   101d0:	e1a0e000 	mov	lr, r0
   101d4:	e1a0300c 	mov	r3, ip
   101d8:	e35c002f 	cmp	ip, #47	; 0x2f
   101dc:	da000029 	ble	10288 <strtoul+0x150>
   101e0:	e2433061 	sub	r3, r3, #97	; 0x61
   101e4:	e3530019 	cmp	r3, #25
   101e8:	924cc020 	subls	ip, ip, #32
   101ec:	e35c0040 	cmp	ip, #64	; 0x40
   101f0:	c24cc007 	subgt	ip, ip, #7
   101f4:	e24cc030 	sub	ip, ip, #48	; 0x30
   101f8:	e15c0002 	cmp	ip, r2
   101fc:	baffffee 	blt	101bc <strtoul+0x84>
   10200:	e2255001 	eor	r5, r5, #1
   10204:	e1a0000e 	mov	r0, lr
   10208:	e0055006 	and	r5, r5, r6
   1020c:	e3540000 	cmp	r4, #0
   10210:	15841000 	strne	r1, [r4]
   10214:	e3550000 	cmp	r5, #0
   10218:	12600000 	rsbne	r0, r0, #0
   1021c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10220:	e1d130d1 	ldrsb	r3, [r1, #1]
   10224:	e3a06000 	mov	r6, #0
   10228:	e1a01000 	mov	r1, r0
   1022c:	e3530030 	cmp	r3, #48	; 0x30
   10230:	1affffd9 	bne	1019c <strtoul+0x64>
   10234:	e1d130d1 	ldrsb	r3, [r1, #1]
   10238:	e281c001 	add	ip, r1, #1
   1023c:	e3c30020 	bic	r0, r3, #32
   10240:	e3500058 	cmp	r0, #88	; 0x58
   10244:	1a000006 	bne	10264 <strtoul+0x12c>
   10248:	e3d23010 	bics	r3, r2, #16
   1024c:	01d130d2 	ldrsbeq	r3, [r1, #2]
   10250:	03a02010 	moveq	r2, #16
   10254:	02811002 	addeq	r1, r1, #2
   10258:	0affffd1 	beq	101a4 <strtoul+0x6c>
   1025c:	e3a00000 	mov	r0, #0
   10260:	e8bd8070 	pop	{r4, r5, r6, pc}
   10264:	e3520000 	cmp	r2, #0
   10268:	e1a0100c 	mov	r1, ip
   1026c:	03a02008 	moveq	r2, #8
   10270:	eaffffcb 	b	101a4 <strtoul+0x6c>
   10274:	e1540005 	cmp	r4, r5
   10278:	0a000004 	beq	10290 <strtoul+0x158>
   1027c:	e5841000 	str	r1, [r4]
   10280:	e3e00000 	mvn	r0, #0
   10284:	e8bd8070 	pop	{r4, r5, r6, pc}
   10288:	e3a05001 	mov	r5, #1
   1028c:	eaffffdd 	b	10208 <strtoul+0xd0>
   10290:	e3e00000 	mvn	r0, #0
   10294:	e8bd8070 	pop	{r4, r5, r6, pc}
   10298:	e3540000 	cmp	r4, #0
   1029c:	0affffee 	beq	1025c <strtoul+0x124>
   102a0:	e3a00000 	mov	r0, #0
   102a4:	e5841000 	str	r1, [r4]
   102a8:	e8bd8070 	pop	{r4, r5, r6, pc}

000102ac <strtoull>:
   102ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   102b0:	e2515000 	subs	r5, r1, #0
   102b4:	e2423002 	sub	r3, r2, #2
   102b8:	15850000 	strne	r0, [r5]
   102bc:	e3520000 	cmp	r2, #0
   102c0:	13530022 	cmpne	r3, #34	; 0x22
   102c4:	8a00004d 	bhi	10400 <strtoull+0x154>
   102c8:	e1d030d0 	ldrsb	r3, [r0]
   102cc:	e1a0c000 	mov	ip, r0
   102d0:	e2800001 	add	r0, r0, #1
   102d4:	e243e009 	sub	lr, r3, #9
   102d8:	e3530020 	cmp	r3, #32
   102dc:	0afffff9 	beq	102c8 <strtoull+0x1c>
   102e0:	e6efe07e 	uxtb	lr, lr
   102e4:	e35e0004 	cmp	lr, #4
   102e8:	9afffff6 	bls	102c8 <strtoull+0x1c>
   102ec:	e353002b 	cmp	r3, #43	; 0x2b
   102f0:	0a000033 	beq	103c4 <strtoull+0x118>
   102f4:	e353002d 	cmp	r3, #45	; 0x2d
   102f8:	03a08001 	moveq	r8, #1
   102fc:	13a08000 	movne	r8, #0
   10300:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   10304:	01a0c000 	moveq	ip, r0
   10308:	e3530030 	cmp	r3, #48	; 0x30
   1030c:	0a000031 	beq	103d8 <strtoull+0x12c>
   10310:	e3520000 	cmp	r2, #0
   10314:	03a0200a 	moveq	r2, #10
   10318:	e1a0e003 	mov	lr, r3
   1031c:	e353002f 	cmp	r3, #47	; 0x2f
   10320:	da000048 	ble	10448 <strtoull+0x19c>
   10324:	e3a04000 	mov	r4, #0
   10328:	e3a07001 	mov	r7, #1
   1032c:	e1a06004 	mov	r6, r4
   10330:	e1a09fc2 	asr	r9, r2, #31
   10334:	ea00000b 	b	10368 <strtoull+0xbc>
   10338:	e09e0000 	adds	r0, lr, r0
   1033c:	e3a07000 	mov	r7, #0
   10340:	e0a11fce 	adc	r1, r1, lr, asr #31
   10344:	e1500004 	cmp	r0, r4
   10348:	e0d13006 	sbcs	r3, r1, r6
   1034c:	3a000032 	bcc	1041c <strtoull+0x170>
   10350:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   10354:	e1a04000 	mov	r4, r0
   10358:	e1a06001 	mov	r6, r1
   1035c:	e1a0300e 	mov	r3, lr
   10360:	e35e002f 	cmp	lr, #47	; 0x2f
   10364:	da000032 	ble	10434 <strtoull+0x188>
   10368:	e2433061 	sub	r3, r3, #97	; 0x61
   1036c:	e0010692 	mul	r1, r2, r6
   10370:	e3530019 	cmp	r3, #25
   10374:	e08a0492 	umull	r0, sl, r2, r4
   10378:	924ee020 	subls	lr, lr, #32
   1037c:	e0211994 	mla	r1, r4, r9, r1
   10380:	e35e0040 	cmp	lr, #64	; 0x40
   10384:	c24ee007 	subgt	lr, lr, #7
   10388:	e081100a 	add	r1, r1, sl
   1038c:	e24ee030 	sub	lr, lr, #48	; 0x30
   10390:	e15e0002 	cmp	lr, r2
   10394:	baffffe7 	blt	10338 <strtoull+0x8c>
   10398:	e2277001 	eor	r7, r7, #1
   1039c:	e1a00004 	mov	r0, r4
   103a0:	e1a01006 	mov	r1, r6
   103a4:	e0088007 	and	r8, r8, r7
   103a8:	e3550000 	cmp	r5, #0
   103ac:	1585c000 	strne	ip, [r5]
   103b0:	e3580000 	cmp	r8, #0
   103b4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   103b8:	e2700000 	rsbs	r0, r0, #0
   103bc:	e2e11000 	rsc	r1, r1, #0
   103c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   103c4:	e1dc30d1 	ldrsb	r3, [ip, #1]
   103c8:	e3a08000 	mov	r8, #0
   103cc:	e1a0c000 	mov	ip, r0
   103d0:	e3530030 	cmp	r3, #48	; 0x30
   103d4:	1affffcd 	bne	10310 <strtoull+0x64>
   103d8:	e1dc30d1 	ldrsb	r3, [ip, #1]
   103dc:	e28c0001 	add	r0, ip, #1
   103e0:	e3c31020 	bic	r1, r3, #32
   103e4:	e3510058 	cmp	r1, #88	; 0x58
   103e8:	1a000007 	bne	1040c <strtoull+0x160>
   103ec:	e3d23010 	bics	r3, r2, #16
   103f0:	01dc30d2 	ldrsbeq	r3, [ip, #2]
   103f4:	03a02010 	moveq	r2, #16
   103f8:	028cc002 	addeq	ip, ip, #2
   103fc:	0affffc5 	beq	10318 <strtoull+0x6c>
   10400:	e3a00000 	mov	r0, #0
   10404:	e1a01000 	mov	r1, r0
   10408:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1040c:	e3520000 	cmp	r2, #0
   10410:	e1a0c000 	mov	ip, r0
   10414:	03a02008 	moveq	r2, #8
   10418:	eaffffbe 	b	10318 <strtoull+0x6c>
   1041c:	e1550007 	cmp	r5, r7
   10420:	0a000005 	beq	1043c <strtoull+0x190>
   10424:	e1a01007 	mov	r1, r7
   10428:	e585c000 	str	ip, [r5]
   1042c:	e3e00000 	mvn	r0, #0
   10430:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10434:	e3a07001 	mov	r7, #1
   10438:	eaffffd9 	b	103a4 <strtoull+0xf8>
   1043c:	e1a01005 	mov	r1, r5
   10440:	e3e00000 	mvn	r0, #0
   10444:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10448:	e3550000 	cmp	r5, #0
   1044c:	0affffeb 	beq	10400 <strtoull+0x154>
   10450:	e3a00000 	mov	r0, #0
   10454:	e585c000 	str	ip, [r5]
   10458:	e1a01000 	mov	r1, r0
   1045c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010460 <atoi>:
   10460:	e3a0200a 	mov	r2, #10
   10464:	e3a01000 	mov	r1, #0
   10468:	eaffff32 	b	10138 <strtoul>

0001046c <char2int>:
   1046c:	e12fff1e 	bx	lr

00010470 <memcpy>:
   10470:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   10474:	e352007f 	cmp	r2, #127	; 0x7f
   10478:	9a00000b 	bls	104ac <memcpy+0x3c>
   1047c:	e3110003 	tst	r1, #3
   10480:	1a000009 	bne	104ac <memcpy+0x3c>
   10484:	e3100003 	tst	r0, #3
   10488:	1a000007 	bne	104ac <memcpy+0x3c>
   1048c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   10490:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10494:	e2422020 	sub	r2, r2, #32
   10498:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   1049c:	f5d1f040 	pld	[r1, #64]	; 0x40
   104a0:	e352001f 	cmp	r2, #31
   104a4:	8afffff9 	bhi	10490 <memcpy+0x20>
   104a8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   104ac:	e3520000 	cmp	r2, #0
   104b0:	0a000003 	beq	104c4 <memcpy+0x54>
   104b4:	e4d13001 	ldrb	r3, [r1], #1
   104b8:	e2522001 	subs	r2, r2, #1
   104bc:	e4c03001 	strb	r3, [r0], #1
   104c0:	1afffffb 	bne	104b4 <memcpy+0x44>
   104c4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   104c8:	e12fff1e 	bx	lr

000104cc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   104cc:	e12fff1e 	bx	lr

000104d0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   104d0:	e92d4010 	push	{r4, lr}
   104d4:	e3a01014 	mov	r1, #20
   104d8:	e1a04000 	mov	r4, r0
   104dc:	eb000108 	bl	10904 <operator delete(void*, unsigned int)>
   104e0:	e1a00004 	mov	r0, r4
   104e4:	e8bd8010 	pop	{r4, pc}

000104e8 <CVirtualGPIOPin::Write(unsigned int)>:
   104e8:	e92d4070 	push	{r4, r5, r6, lr}
   104ec:	e1a04000 	mov	r4, r0
   104f0:	e5d03004 	ldrb	r3, [r0, #4]
   104f4:	e24dd028 	sub	sp, sp, #40	; 0x28
   104f8:	e1a05001 	mov	r5, r1
   104fc:	e3530000 	cmp	r3, #0
   10500:	0a000013 	beq	10554 <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   10504:	e5901008 	ldr	r1, [r0, #8]
   10508:	e3510000 	cmp	r1, #0
   1050c:	1a000036 	bne	105ec <CVirtualGPIOPin::Write(unsigned int)+0x104>
   10510:	e28d000c 	add	r0, sp, #12
   10514:	eb000679 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10518:	e3a03014 	mov	r3, #20
   1051c:	e3a01008 	mov	r1, #8
   10520:	e08d2003 	add	r2, sp, r3
   10524:	e58d1000 	str	r1, [sp]
   10528:	e28d000c 	add	r0, sp, #12
   1052c:	e3a01082 	mov	r1, #130	; 0x82
   10530:	e58d1020 	str	r1, [sp, #32]
   10534:	e3081041 	movw	r1, #32833	; 0x8041
   10538:	e3401003 	movt	r1, #3
   1053c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10540:	eb0006b4 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10544:	e28d000c 	add	r0, sp, #12
   10548:	eb000673 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   1054c:	e28dd028 	add	sp, sp, #40	; 0x28
   10550:	e8bd8070 	pop	{r4, r5, r6, pc}
   10554:	e5903008 	ldr	r3, [r0, #8]
   10558:	e3530001 	cmp	r3, #1
   1055c:	8afffffa 	bhi	1054c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10560:	e3066930 	movw	r6, #26928	; 0x6930
   10564:	e3406001 	movt	r6, #1
   10568:	e3510001 	cmp	r1, #1
   1056c:	93a03000 	movls	r3, #0
   10570:	83a03001 	movhi	r3, #1
   10574:	e5962000 	ldr	r2, [r6]
   10578:	e3520000 	cmp	r2, #0
   1057c:	03833001 	orreq	r3, r3, #1
   10580:	e3530000 	cmp	r3, #0
   10584:	1afffff0 	bne	1054c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10588:	e5960004 	ldr	r0, [r6, #4]
   1058c:	e3500000 	cmp	r0, #0
   10590:	1a000020 	bne	10618 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   10594:	e1d421b0 	ldrh	r2, [r4, #16]
   10598:	e1d431b2 	ldrh	r3, [r4, #18]
   1059c:	e584500c 	str	r5, [r4, #12]
   105a0:	e0421003 	sub	r1, r2, r3
   105a4:	e6bf1071 	sxth	r1, r1
   105a8:	e3510000 	cmp	r1, #0
   105ac:	da000013 	ble	10600 <CVirtualGPIOPin::Write(unsigned int)+0x118>
   105b0:	e3550000 	cmp	r5, #0
   105b4:	1a000006 	bne	105d4 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   105b8:	e2833001 	add	r3, r3, #1
   105bc:	e6ff3073 	uxth	r3, r3
   105c0:	e1c431b2 	strh	r3, [r4, #18]
   105c4:	e5940008 	ldr	r0, [r4, #8]
   105c8:	e1833802 	orr	r3, r3, r2, lsl #16
   105cc:	e5961000 	ldr	r1, [r6]
   105d0:	e7813100 	str	r3, [r1, r0, lsl #2]
   105d4:	e5963004 	ldr	r3, [r6, #4]
   105d8:	e3530000 	cmp	r3, #0
   105dc:	0affffda 	beq	1054c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   105e0:	e28dd028 	add	sp, sp, #40	; 0x28
   105e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   105e8:	ea000348 	b	11310 <LeaveCritical>
   105ec:	e3041fcc 	movw	r1, #20428	; 0x4fcc
   105f0:	e3401001 	movt	r1, #1
   105f4:	e3a0205b 	mov	r2, #91	; 0x5b
   105f8:	e2810014 	add	r0, r1, #20
   105fc:	ebffe39d 	bl	9478 <assertion_failed>
   10600:	e3550000 	cmp	r5, #0
   10604:	0afffff2 	beq	105d4 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   10608:	e2822001 	add	r2, r2, #1
   1060c:	e6ff2072 	uxth	r2, r2
   10610:	e1c421b0 	strh	r2, [r4, #16]
   10614:	eaffffea 	b	105c4 <CVirtualGPIOPin::Write(unsigned int)+0xdc>
   10618:	eb000311 	bl	11264 <EnterCritical>
   1061c:	eaffffdc 	b	10594 <CVirtualGPIOPin::Write(unsigned int)+0xac>

00010620 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   10620:	e92d4070 	push	{r4, r5, r6, lr}
   10624:	e1a04000 	mov	r4, r0
   10628:	e59f313c 	ldr	r3, [pc, #316]	; 1076c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   1062c:	e3a00000 	mov	r0, #0
   10630:	e3510001 	cmp	r1, #1
   10634:	91a0c002 	movls	ip, r2
   10638:	8382c001 	orrhi	ip, r2, #1
   1063c:	e24dd020 	sub	sp, sp, #32
   10640:	e15c0000 	cmp	ip, r0
   10644:	e5840010 	str	r0, [r4, #16]
   10648:	e5843000 	str	r3, [r4]
   1064c:	e5c42004 	strb	r2, [r4, #4]
   10650:	e5841008 	str	r1, [r4, #8]
   10654:	0a000002 	beq	10664 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   10658:	e1a00004 	mov	r0, r4
   1065c:	e28dd020 	add	sp, sp, #32
   10660:	e8bd8070 	pop	{r4, r5, r6, pc}
   10664:	e3065930 	movw	r5, #26928	; 0x6930
   10668:	e3405001 	movt	r5, #1
   1066c:	e5950004 	ldr	r0, [r5, #4]
   10670:	e3500000 	cmp	r0, #0
   10674:	1a00000e 	bne	106b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   10678:	e5956000 	ldr	r6, [r5]
   1067c:	e3560000 	cmp	r6, #0
   10680:	0a00000f 	beq	106c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa4>
   10684:	e5943008 	ldr	r3, [r4, #8]
   10688:	e3a02000 	mov	r2, #0
   1068c:	e7862103 	str	r2, [r6, r3, lsl #2]
   10690:	e5953004 	ldr	r3, [r5, #4]
   10694:	e3530000 	cmp	r3, #0
   10698:	1a000024 	bne	10730 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   1069c:	e1a00004 	mov	r0, r4
   106a0:	e3a01000 	mov	r1, #0
   106a4:	ebffff8f 	bl	104e8 <CVirtualGPIOPin::Write(unsigned int)>
   106a8:	e1a00004 	mov	r0, r4
   106ac:	e28dd020 	add	sp, sp, #32
   106b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   106b4:	eb0002ea 	bl	11264 <EnterCritical>
   106b8:	e5956000 	ldr	r6, [r5]
   106bc:	e3560000 	cmp	r6, #0
   106c0:	1affffef 	bne	10684 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   106c4:	e3a00001 	mov	r0, #1
   106c8:	eb0002b4 	bl	111a0 <CMemorySystem::GetCoherentPage(unsigned int)>
   106cc:	e1a01006 	mov	r1, r6
   106d0:	e5850000 	str	r0, [r5]
   106d4:	e28d0008 	add	r0, sp, #8
   106d8:	eb000608 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   106dc:	e5953000 	ldr	r3, [r5]
   106e0:	e28d0008 	add	r0, sp, #8
   106e4:	e3081020 	movw	r1, #32800	; 0x8020
   106e8:	e3401004 	movt	r1, #4
   106ec:	e3833103 	orr	r3, r3, #-1073741824	; 0xc0000000
   106f0:	e58d301c 	str	r3, [sp, #28]
   106f4:	e3a03004 	mov	r3, #4
   106f8:	e58d3000 	str	r3, [sp]
   106fc:	e3a03010 	mov	r3, #16
   10700:	e08d2003 	add	r2, sp, r3
   10704:	eb000643 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10708:	e3500000 	cmp	r0, #0
   1070c:	0a000009 	beq	10738 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   10710:	e28d0008 	add	r0, sp, #8
   10714:	eb000600 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   10718:	e5956000 	ldr	r6, [r5]
   1071c:	e3560000 	cmp	r6, #0
   10720:	1affffd7 	bne	10684 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   10724:	e5953004 	ldr	r3, [r5, #4]
   10728:	e3530000 	cmp	r3, #0
   1072c:	0affffda 	beq	1069c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   10730:	eb0002f6 	bl	11310 <LeaveCritical>
   10734:	eaffffd8 	b	1069c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   10738:	e3a03010 	mov	r3, #16
   1073c:	e58d0000 	str	r0, [sp]
   10740:	e1a01003 	mov	r1, r3
   10744:	e28d2010 	add	r2, sp, #16
   10748:	e3401004 	movt	r1, #4
   1074c:	e28d0008 	add	r0, sp, #8
   10750:	eb000630 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10754:	e3500000 	cmp	r0, #0
   10758:	05850000 	streq	r0, [r5]
   1075c:	159d301c 	ldrne	r3, [sp, #28]
   10760:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   10764:	15853000 	strne	r3, [r5]
   10768:	eaffffe8 	b	10710 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   1076c:	00014ff4 	.word	0x00014ff4

00010770 <CVirtualGPIOPin::Invert()>:
   10770:	e590100c 	ldr	r1, [r0, #12]
   10774:	e2211001 	eor	r1, r1, #1
   10778:	eaffff5a 	b	104e8 <CVirtualGPIOPin::Write(unsigned int)>

0001077c <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   1077c:	e3063930 	movw	r3, #26928	; 0x6930
   10780:	e3403001 	movt	r3, #1
   10784:	e3a02000 	mov	r2, #0
   10788:	e5832004 	str	r2, [r3, #4]
   1078c:	e12fff1e 	bx	lr

00010790 <ChainBootStub(void const*, unsigned int)>:
   10790:	e2811003 	add	r1, r1, #3
   10794:	e1b01121 	lsrs	r1, r1, #2
   10798:	0a000007 	beq	107bc <ChainBootStub(void const*, unsigned int)+0x2c>
   1079c:	e1a03000 	mov	r3, r0
   107a0:	e0800101 	add	r0, r0, r1, lsl #2
   107a4:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   107a8:	e083200c 	add	r2, r3, ip
   107ac:	e4931004 	ldr	r1, [r3], #4
   107b0:	e1530000 	cmp	r3, r0
   107b4:	e5821000 	str	r1, [r2]
   107b8:	1afffffa 	bne	107a8 <ChainBootStub(void const*, unsigned int)+0x18>
   107bc:	e3a03000 	mov	r3, #0
   107c0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   107c4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   107c8:	f57ff04f 	dsb	sy
   107cc:	f57ff06f 	isb	sy
   107d0:	e3a03902 	mov	r3, #32768	; 0x8000
   107d4:	e12fff13 	bx	r3

000107d8 <EnableChainBoot>:
   107d8:	e3063938 	movw	r3, #26936	; 0x6938
   107dc:	e3403001 	movt	r3, #1
   107e0:	e1a0c001 	mov	ip, r1
   107e4:	e92d4010 	push	{r4, lr}
   107e8:	e3a02b01 	mov	r2, #1024	; 0x400
   107ec:	e8831001 	stm	r3, {r0, ip}
   107f0:	e3001790 	movw	r1, #1936	; 0x790
   107f4:	e3401001 	movt	r1, #1
   107f8:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   107fc:	ebffff1b 	bl	10470 <memcpy>
   10800:	e3a03000 	mov	r3, #0
   10804:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10808:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   1080c:	f57ff04f 	dsb	sy
   10810:	f57ff06f 	isb	sy
   10814:	e8bd8010 	pop	{r4, pc}

00010818 <IsChainBootEnabled>:
   10818:	e3063938 	movw	r3, #26936	; 0x6938
   1081c:	e3403001 	movt	r3, #1
   10820:	e5930000 	ldr	r0, [r3]
   10824:	e2500000 	subs	r0, r0, #0
   10828:	13a00001 	movne	r0, #1
   1082c:	e12fff1e 	bx	lr

00010830 <DoChainBoot>:
   10830:	e3063938 	movw	r3, #26936	; 0x6938
   10834:	e3403001 	movt	r3, #1
   10838:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   1083c:	e1c300d0 	ldrd	r0, [r3]
   10840:	e12fff12 	bx	r2

00010844 <operator new(unsigned int, int)>:
   10844:	e3d13002 	bics	r3, r1, #2
   10848:	0a000001 	beq	10854 <operator new(unsigned int, int)+0x10>
   1084c:	e3a00000 	mov	r0, #0
   10850:	e12fff1e 	bx	lr
   10854:	e3063940 	movw	r3, #26944	; 0x6940
   10858:	e3403001 	movt	r3, #1
   1085c:	e1a01000 	mov	r1, r0
   10860:	e5930000 	ldr	r0, [r3]
   10864:	e280000c 	add	r0, r0, #12
   10868:	ea00004f 	b	109ac <CHeapAllocator::Allocate(unsigned int)>

0001086c <operator new[](unsigned int, int)>:
   1086c:	e3d13002 	bics	r3, r1, #2
   10870:	0a000001 	beq	1087c <operator new[](unsigned int, int)+0x10>
   10874:	e3a00000 	mov	r0, #0
   10878:	e12fff1e 	bx	lr
   1087c:	e3063940 	movw	r3, #26944	; 0x6940
   10880:	e3403001 	movt	r3, #1
   10884:	e1a01000 	mov	r1, r0
   10888:	e5930000 	ldr	r0, [r3]
   1088c:	e280000c 	add	r0, r0, #12
   10890:	ea000045 	b	109ac <CHeapAllocator::Allocate(unsigned int)>

00010894 <operator new(unsigned int, void*)>:
   10894:	e1a00001 	mov	r0, r1
   10898:	e12fff1e 	bx	lr

0001089c <operator new[](unsigned int, void*)>:
   1089c:	e1a00001 	mov	r0, r1
   108a0:	e12fff1e 	bx	lr

000108a4 <operator new(unsigned int)>:
   108a4:	e3063940 	movw	r3, #26944	; 0x6940
   108a8:	e3403001 	movt	r3, #1
   108ac:	e1a01000 	mov	r1, r0
   108b0:	e5930000 	ldr	r0, [r3]
   108b4:	e280000c 	add	r0, r0, #12
   108b8:	ea00003b 	b	109ac <CHeapAllocator::Allocate(unsigned int)>

000108bc <operator new[](unsigned int)>:
   108bc:	e3063940 	movw	r3, #26944	; 0x6940
   108c0:	e3403001 	movt	r3, #1
   108c4:	e1a01000 	mov	r1, r0
   108c8:	e5930000 	ldr	r0, [r3]
   108cc:	e280000c 	add	r0, r0, #12
   108d0:	ea000035 	b	109ac <CHeapAllocator::Allocate(unsigned int)>

000108d4 <operator delete(void*)>:
   108d4:	e3063940 	movw	r3, #26944	; 0x6940
   108d8:	e3403001 	movt	r3, #1
   108dc:	e1a01000 	mov	r1, r0
   108e0:	e5930000 	ldr	r0, [r3]
   108e4:	e280000c 	add	r0, r0, #12
   108e8:	ea000098 	b	10b50 <CHeapAllocator::Free(void*)>

000108ec <operator delete[](void*)>:
   108ec:	e3063940 	movw	r3, #26944	; 0x6940
   108f0:	e3403001 	movt	r3, #1
   108f4:	e1a01000 	mov	r1, r0
   108f8:	e5930000 	ldr	r0, [r3]
   108fc:	e280000c 	add	r0, r0, #12
   10900:	ea000092 	b	10b50 <CHeapAllocator::Free(void*)>

00010904 <operator delete(void*, unsigned int)>:
   10904:	e3063940 	movw	r3, #26944	; 0x6940
   10908:	e3403001 	movt	r3, #1
   1090c:	e1a01000 	mov	r1, r0
   10910:	e5930000 	ldr	r0, [r3]
   10914:	e280000c 	add	r0, r0, #12
   10918:	ea00008c 	b	10b50 <CHeapAllocator::Free(void*)>

0001091c <operator delete[](void*, unsigned int)>:
   1091c:	e3063940 	movw	r3, #26944	; 0x6940
   10920:	e3403001 	movt	r3, #1
   10924:	e1a01000 	mov	r1, r0
   10928:	e5930000 	ldr	r0, [r3]
   1092c:	e280000c 	add	r0, r0, #12
   10930:	ea000086 	b	10b50 <CHeapAllocator::Free(void*)>

00010934 <CHeapAllocator::CHeapAllocator(char const*)>:
   10934:	e92d4010 	push	{r4, lr}
   10938:	e1a04000 	mov	r4, r0
   1093c:	e3a03000 	mov	r3, #0
   10940:	e3a00001 	mov	r0, #1
   10944:	e3a020a8 	mov	r2, #168	; 0xa8
   10948:	e884000a 	stm	r4, {r1, r3}
   1094c:	e1a01003 	mov	r1, r3
   10950:	e5843008 	str	r3, [r4, #8]
   10954:	e584300c 	str	r3, [r4, #12]
   10958:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   1095c:	e2840010 	add	r0, r4, #16
   10960:	ebfffc63 	bl	faf4 <memset>
   10964:	e59f3020 	ldr	r3, [pc, #32]	; 1098c <CHeapAllocator::CHeapAllocator(char const*)+0x58>
   10968:	e1a02004 	mov	r2, r4
   1096c:	e283001c 	add	r0, r3, #28
   10970:	e2822008 	add	r2, r2, #8
   10974:	e5b31004 	ldr	r1, [r3, #4]!
   10978:	e1530000 	cmp	r3, r0
   1097c:	e5821008 	str	r1, [r2, #8]
   10980:	1afffffa 	bne	10970 <CHeapAllocator::CHeapAllocator(char const*)+0x3c>
   10984:	e1a00004 	mov	r0, r4
   10988:	e8bd8010 	pop	{r4, pc}
   1098c:	000168c4 	.word	0x000168c4

00010990 <CHeapAllocator::~CHeapAllocator()>:
   10990:	e12fff1e 	bx	lr

00010994 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   10994:	e0812002 	add	r2, r1, r2
   10998:	e980000e 	stmib	r0, {r1, r2, r3}
   1099c:	e12fff1e 	bx	lr

000109a0 <CHeapAllocator::GetFreeSpace() const>:
   109a0:	e9900005 	ldmib	r0, {r0, r2}
   109a4:	e0420000 	sub	r0, r2, r0
   109a8:	e12fff1e 	bx	lr

000109ac <CHeapAllocator::Allocate(unsigned int)>:
   109ac:	e5903004 	ldr	r3, [r0, #4]
   109b0:	e3530000 	cmp	r3, #0
   109b4:	0a000062 	beq	10b44 <CHeapAllocator::Allocate(unsigned int)+0x198>
   109b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   109bc:	e1a05000 	mov	r5, r0
   109c0:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   109c4:	e1a04001 	mov	r4, r1
   109c8:	e3500000 	cmp	r0, #0
   109cc:	1a000045 	bne	10ae8 <CHeapAllocator::Allocate(unsigned int)+0x13c>
   109d0:	e5953010 	ldr	r3, [r5, #16]
   109d4:	e3530000 	cmp	r3, #0
   109d8:	0a000021 	beq	10a64 <CHeapAllocator::Allocate(unsigned int)+0xb8>
   109dc:	e2852010 	add	r2, r5, #16
   109e0:	ea000002 	b	109f0 <CHeapAllocator::Allocate(unsigned int)+0x44>
   109e4:	e5b23008 	ldr	r3, [r2, #8]!
   109e8:	e3530000 	cmp	r3, #0
   109ec:	0a00001c 	beq	10a64 <CHeapAllocator::Allocate(unsigned int)+0xb8>
   109f0:	e1540003 	cmp	r4, r3
   109f4:	8afffffa 	bhi	109e4 <CHeapAllocator::Allocate(unsigned int)+0x38>
   109f8:	e5926004 	ldr	r6, [r2, #4]
   109fc:	e3560000 	cmp	r6, #0
   10a00:	01a04003 	moveq	r4, r3
   10a04:	0a000016 	beq	10a64 <CHeapAllocator::Allocate(unsigned int)+0xb8>
   10a08:	e5961000 	ldr	r1, [r6]
   10a0c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10a10:	e344324c 	movt	r3, #16972	; 0x424c
   10a14:	e1510003 	cmp	r1, r3
   10a18:	05963008 	ldreq	r3, [r6, #8]
   10a1c:	05823004 	streq	r3, [r2, #4]
   10a20:	1a000042 	bne	10b30 <CHeapAllocator::Allocate(unsigned int)+0x184>
   10a24:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10a28:	e3530000 	cmp	r3, #0
   10a2c:	1a00002b 	bne	10ae0 <CHeapAllocator::Allocate(unsigned int)+0x134>
   10a30:	e316003f 	tst	r6, #63	; 0x3f
   10a34:	e3a03000 	mov	r3, #0
   10a38:	e2860040 	add	r0, r6, #64	; 0x40
   10a3c:	e5c63008 	strb	r3, [r6, #8]
   10a40:	e5c63009 	strb	r3, [r6, #9]
   10a44:	e5c6300a 	strb	r3, [r6, #10]
   10a48:	e5c6300b 	strb	r3, [r6, #11]
   10a4c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10a50:	e3041ffc 	movw	r1, #20476	; 0x4ffc
   10a54:	e3401001 	movt	r1, #1
   10a58:	e3a0208e 	mov	r2, #142	; 0x8e
   10a5c:	e2810050 	add	r0, r1, #80	; 0x50
   10a60:	ebffe284 	bl	9478 <assertion_failed>
   10a64:	e5956004 	ldr	r6, [r5, #4]
   10a68:	e284307f 	add	r3, r4, #127	; 0x7f
   10a6c:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   10a70:	e595700c 	ldr	r7, [r5, #12]
   10a74:	e0863003 	add	r3, r6, r3
   10a78:	e1560003 	cmp	r6, r3
   10a7c:	3a000006 	bcc	10a9c <CHeapAllocator::Allocate(unsigned int)+0xf0>
   10a80:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10a84:	e3570000 	cmp	r7, #0
   10a88:	1a000018 	bne	10af0 <CHeapAllocator::Allocate(unsigned int)+0x144>
   10a8c:	e3530000 	cmp	r3, #0
   10a90:	1a000021 	bne	10b1c <CHeapAllocator::Allocate(unsigned int)+0x170>
   10a94:	e3a00000 	mov	r0, #0
   10a98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10a9c:	e5952008 	ldr	r2, [r5, #8]
   10aa0:	e0422007 	sub	r2, r2, r7
   10aa4:	e1530002 	cmp	r3, r2
   10aa8:	8afffff4 	bhi	10a80 <CHeapAllocator::Allocate(unsigned int)+0xd4>
   10aac:	e5853004 	str	r3, [r5, #4]
   10ab0:	e3a02043 	mov	r2, #67	; 0x43
   10ab4:	e3a0304d 	mov	r3, #77	; 0x4d
   10ab8:	e5c62000 	strb	r2, [r6]
   10abc:	e5c63001 	strb	r3, [r6, #1]
   10ac0:	e3a0204c 	mov	r2, #76	; 0x4c
   10ac4:	e3a03042 	mov	r3, #66	; 0x42
   10ac8:	e5c62002 	strb	r2, [r6, #2]
   10acc:	e5c63003 	strb	r3, [r6, #3]
   10ad0:	e5864004 	str	r4, [r6, #4]
   10ad4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10ad8:	e3530000 	cmp	r3, #0
   10adc:	0affffd3 	beq	10a30 <CHeapAllocator::Allocate(unsigned int)+0x84>
   10ae0:	eb00020a 	bl	11310 <LeaveCritical>
   10ae4:	eaffffd1 	b	10a30 <CHeapAllocator::Allocate(unsigned int)+0x84>
   10ae8:	eb0001dd 	bl	11264 <EnterCritical>
   10aec:	eaffffb7 	b	109d0 <CHeapAllocator::Allocate(unsigned int)+0x24>
   10af0:	e3a02000 	mov	r2, #0
   10af4:	e585200c 	str	r2, [r5, #12]
   10af8:	e1530002 	cmp	r3, r2
   10afc:	1a000009 	bne	10b28 <CHeapAllocator::Allocate(unsigned int)+0x17c>
   10b00:	ebffe8e6 	bl	aea0 <CLogger::Get()>
   10b04:	e59f3040 	ldr	r3, [pc, #64]	; 10b4c <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   10b08:	e5951000 	ldr	r1, [r5]
   10b0c:	e3a02000 	mov	r2, #0
   10b10:	ebffeac2 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b14:	e3a00000 	mov	r0, #0
   10b18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10b1c:	eb0001fb 	bl	11310 <LeaveCritical>
   10b20:	e1a00007 	mov	r0, r7
   10b24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10b28:	eb0001f8 	bl	11310 <LeaveCritical>
   10b2c:	eafffff3 	b	10b00 <CHeapAllocator::Allocate(unsigned int)+0x154>
   10b30:	e3041ffc 	movw	r1, #20476	; 0x4ffc
   10b34:	e3401001 	movt	r1, #1
   10b38:	e3a0205e 	mov	r2, #94	; 0x5e
   10b3c:	e2810014 	add	r0, r1, #20
   10b40:	ebffe24c 	bl	9478 <assertion_failed>
   10b44:	e3a00000 	mov	r0, #0
   10b48:	e12fff1e 	bx	lr
   10b4c:	0001503c 	.word	0x0001503c

00010b50 <CHeapAllocator::Free(void*)>:
   10b50:	e3510000 	cmp	r1, #0
   10b54:	012fff1e 	bxeq	lr
   10b58:	e92d4070 	push	{r4, r5, r6, lr}
   10b5c:	e3043d43 	movw	r3, #19779	; 0x4d43
   10b60:	e344324c 	movt	r3, #16972	; 0x424c
   10b64:	e5112040 	ldr	r2, [r1, #-64]	; 0xffffffc0
   10b68:	e2415040 	sub	r5, r1, #64	; 0x40
   10b6c:	e1520003 	cmp	r2, r3
   10b70:	1a00001b 	bne	10be4 <CHeapAllocator::Free(void*)+0x94>
   10b74:	e5903010 	ldr	r3, [r0, #16]
   10b78:	e1a06000 	mov	r6, r0
   10b7c:	e3530000 	cmp	r3, #0
   10b80:	08bd8070 	popeq	{r4, r5, r6, pc}
   10b84:	e5952004 	ldr	r2, [r5, #4]
   10b88:	e2804010 	add	r4, r0, #16
   10b8c:	ea000002 	b	10b9c <CHeapAllocator::Free(void*)+0x4c>
   10b90:	e5b43008 	ldr	r3, [r4, #8]!
   10b94:	e3530000 	cmp	r3, #0
   10b98:	08bd8070 	popeq	{r4, r5, r6, pc}
   10b9c:	e1530002 	cmp	r3, r2
   10ba0:	1afffffa 	bne	10b90 <CHeapAllocator::Free(void*)+0x40>
   10ba4:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   10ba8:	e3500000 	cmp	r0, #0
   10bac:	1a000003 	bne	10bc0 <CHeapAllocator::Free(void*)+0x70>
   10bb0:	e5943004 	ldr	r3, [r4, #4]
   10bb4:	e5853008 	str	r3, [r5, #8]
   10bb8:	e5845004 	str	r5, [r4, #4]
   10bbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10bc0:	eb0001a7 	bl	11264 <EnterCritical>
   10bc4:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   10bc8:	e5942004 	ldr	r2, [r4, #4]
   10bcc:	e3530000 	cmp	r3, #0
   10bd0:	e5852008 	str	r2, [r5, #8]
   10bd4:	e5845004 	str	r5, [r4, #4]
   10bd8:	08bd8070 	popeq	{r4, r5, r6, pc}
   10bdc:	e8bd4070 	pop	{r4, r5, r6, lr}
   10be0:	ea0001ca 	b	11310 <LeaveCritical>
   10be4:	e3041ffc 	movw	r1, #20476	; 0x4ffc
   10be8:	e3401001 	movt	r1, #1
   10bec:	e3a020bf 	mov	r2, #191	; 0xbf
   10bf0:	e2810014 	add	r0, r1, #20
   10bf4:	ebffe21f 	bl	9478 <assertion_failed>

00010bf8 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   10bf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10bfc:	e2515000 	subs	r5, r1, #0
   10c00:	0a00001a 	beq	10c70 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   10c04:	e3520000 	cmp	r2, #0
   10c08:	0a00001b 	beq	10c7c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x84>
   10c0c:	e5151040 	ldr	r1, [r5, #-64]	; 0xffffffc0
   10c10:	e3043d43 	movw	r3, #19779	; 0x4d43
   10c14:	e344324c 	movt	r3, #16972	; 0x424c
   10c18:	e2457040 	sub	r7, r5, #64	; 0x40
   10c1c:	e1510003 	cmp	r1, r3
   10c20:	1a000018 	bne	10c88 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x90>
   10c24:	e5973004 	ldr	r3, [r7, #4]
   10c28:	e1530002 	cmp	r3, r2
   10c2c:	21a04005 	movcs	r4, r5
   10c30:	3a000001 	bcc	10c3c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x44>
   10c34:	e1a00004 	mov	r0, r4
   10c38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10c3c:	e1a01002 	mov	r1, r2
   10c40:	e1a06000 	mov	r6, r0
   10c44:	ebffff58 	bl	109ac <CHeapAllocator::Allocate(unsigned int)>
   10c48:	e2504000 	subs	r4, r0, #0
   10c4c:	0afffff8 	beq	10c34 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   10c50:	e5972004 	ldr	r2, [r7, #4]
   10c54:	e1a01005 	mov	r1, r5
   10c58:	ebfffe04 	bl	10470 <memcpy>
   10c5c:	e1a00006 	mov	r0, r6
   10c60:	e1a01005 	mov	r1, r5
   10c64:	ebffffb9 	bl	10b50 <CHeapAllocator::Free(void*)>
   10c68:	e1a00004 	mov	r0, r4
   10c6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10c70:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10c74:	e1a01002 	mov	r1, r2
   10c78:	eaffff4b 	b	109ac <CHeapAllocator::Allocate(unsigned int)>
   10c7c:	e1a04002 	mov	r4, r2
   10c80:	ebffffb2 	bl	10b50 <CHeapAllocator::Free(void*)>
   10c84:	eaffffea 	b	10c34 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   10c88:	e3041ffc 	movw	r1, #20476	; 0x4ffc
   10c8c:	e3401001 	movt	r1, #1
   10c90:	e3a020a3 	mov	r2, #163	; 0xa3
   10c94:	e2810014 	add	r0, r1, #20
   10c98:	ebffe1f6 	bl	9478 <assertion_failed>

00010c9c <InvalidateDataCacheL1Only>:
   10c9c:	e92d0070 	push	{r4, r5, r6}
   10ca0:	e3a00000 	mov	r0, #0
   10ca4:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   10ca8:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   10cac:	e3071fff 	movw	r1, #32767	; 0x7fff
   10cb0:	e00126a0 	and	r2, r1, r0, lsr #13
   10cb4:	e30013ff 	movw	r1, #1023	; 0x3ff
   10cb8:	e00131a0 	and	r3, r1, r0, lsr #3
   10cbc:	e2822001 	add	r2, r2, #1
   10cc0:	e2000007 	and	r0, r0, #7
   10cc4:	e2800004 	add	r0, r0, #4
   10cc8:	e16f1f13 	clz	r1, r3
   10ccc:	e2834001 	add	r4, r3, #1
   10cd0:	e2422001 	sub	r2, r2, #1
   10cd4:	e1a03004 	mov	r3, r4
   10cd8:	e2533001 	subs	r3, r3, #1
   10cdc:	e1a05113 	lsl	r5, r3, r1
   10ce0:	e1a06012 	lsl	r6, r2, r0
   10ce4:	e1855006 	orr	r5, r5, r6
   10ce8:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   10cec:	cafffff9 	bgt	10cd8 <InvalidateDataCacheL1Only+0x3c>
   10cf0:	e3520000 	cmp	r2, #0
   10cf4:	cafffff5 	bgt	10cd0 <InvalidateDataCacheL1Only+0x34>
   10cf8:	f57ff04e 	dsb	st
   10cfc:	f57ff06f 	isb	sy
   10d00:	e8bd0070 	pop	{r4, r5, r6}
   10d04:	e12fff1e 	bx	lr

00010d08 <InvalidateDataCache>:
   10d08:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10d0c:	f57ff05f 	dmb	sy
   10d10:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10d14:	e1a03ba0 	lsr	r3, r0, #23
   10d18:	e213300e 	ands	r3, r3, #14
   10d1c:	0a00001d 	beq	10d98 <InvalidateDataCache+0x90>
   10d20:	e3a0a000 	mov	sl, #0
   10d24:	e08a20aa 	add	r2, sl, sl, lsr #1
   10d28:	e1a01230 	lsr	r1, r0, r2
   10d2c:	e2011007 	and	r1, r1, #7
   10d30:	e3510002 	cmp	r1, #2
   10d34:	ba000014 	blt	10d8c <InvalidateDataCache+0x84>
   10d38:	e10f9000 	mrs	r9, CPSR
   10d3c:	f10c0080 	cpsid	i
   10d40:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10d44:	f57ff06f 	isb	sy
   10d48:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10d4c:	e121f009 	msr	CPSR_c, r9
   10d50:	e2012007 	and	r2, r1, #7
   10d54:	e2822004 	add	r2, r2, #4
   10d58:	e30043ff 	movw	r4, #1023	; 0x3ff
   10d5c:	e01441a1 	ands	r4, r4, r1, lsr #3
   10d60:	e16f5f14 	clz	r5, r4
   10d64:	e3077fff 	movw	r7, #32767	; 0x7fff
   10d68:	e01776a1 	ands	r7, r7, r1, lsr #13
   10d6c:	e1a09007 	mov	r9, r7
   10d70:	e18ab514 	orr	fp, sl, r4, lsl r5
   10d74:	e18bb219 	orr	fp, fp, r9, lsl r2
   10d78:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   10d7c:	e2599001 	subs	r9, r9, #1
   10d80:	aafffffa 	bge	10d70 <InvalidateDataCache+0x68>
   10d84:	e2544001 	subs	r4, r4, #1
   10d88:	aafffff7 	bge	10d6c <InvalidateDataCache+0x64>
   10d8c:	e28aa002 	add	sl, sl, #2
   10d90:	e153000a 	cmp	r3, sl
   10d94:	caffffe2 	bgt	10d24 <InvalidateDataCache+0x1c>
   10d98:	e3a0a000 	mov	sl, #0
   10d9c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10da0:	f57ff04e 	dsb	st
   10da4:	f57ff06f 	isb	sy
   10da8:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   10dac:	e12fff1e 	bx	lr

00010db0 <CleanDataCache>:
   10db0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10db4:	f57ff05f 	dmb	sy
   10db8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10dbc:	e1a03ba0 	lsr	r3, r0, #23
   10dc0:	e213300e 	ands	r3, r3, #14
   10dc4:	0a00001d 	beq	10e40 <CleanDataCache+0x90>
   10dc8:	e3a0a000 	mov	sl, #0
   10dcc:	e08a20aa 	add	r2, sl, sl, lsr #1
   10dd0:	e1a01230 	lsr	r1, r0, r2
   10dd4:	e2011007 	and	r1, r1, #7
   10dd8:	e3510002 	cmp	r1, #2
   10ddc:	ba000014 	blt	10e34 <CleanDataCache+0x84>
   10de0:	e10f9000 	mrs	r9, CPSR
   10de4:	f10c0080 	cpsid	i
   10de8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10dec:	f57ff06f 	isb	sy
   10df0:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10df4:	e121f009 	msr	CPSR_c, r9
   10df8:	e2012007 	and	r2, r1, #7
   10dfc:	e2822004 	add	r2, r2, #4
   10e00:	e30043ff 	movw	r4, #1023	; 0x3ff
   10e04:	e01441a1 	ands	r4, r4, r1, lsr #3
   10e08:	e16f5f14 	clz	r5, r4
   10e0c:	e3077fff 	movw	r7, #32767	; 0x7fff
   10e10:	e01776a1 	ands	r7, r7, r1, lsr #13
   10e14:	e1a09007 	mov	r9, r7
   10e18:	e18ab514 	orr	fp, sl, r4, lsl r5
   10e1c:	e18bb219 	orr	fp, fp, r9, lsl r2
   10e20:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   10e24:	e2599001 	subs	r9, r9, #1
   10e28:	aafffffa 	bge	10e18 <CleanDataCache+0x68>
   10e2c:	e2544001 	subs	r4, r4, #1
   10e30:	aafffff7 	bge	10e14 <CleanDataCache+0x64>
   10e34:	e28aa002 	add	sl, sl, #2
   10e38:	e153000a 	cmp	r3, sl
   10e3c:	caffffe2 	bgt	10dcc <CleanDataCache+0x1c>
   10e40:	e3a0a000 	mov	sl, #0
   10e44:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10e48:	f57ff04e 	dsb	st
   10e4c:	f57ff06f 	isb	sy
   10e50:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   10e54:	e12fff1e 	bx	lr

00010e58 <CleanAndInvalidateDataCacheRange>:
   10e58:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   10e5c:	e1a03823 	lsr	r3, r3, #16
   10e60:	e203300f 	and	r3, r3, #15
   10e64:	e3a02004 	mov	r2, #4
   10e68:	e1a02312 	lsl	r2, r2, r3
   10e6c:	e0801001 	add	r1, r0, r1
   10e70:	e2423001 	sub	r3, r2, #1
   10e74:	e1c00003 	bic	r0, r0, r3
   10e78:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   10e7c:	e0800002 	add	r0, r0, r2
   10e80:	e1500001 	cmp	r0, r1
   10e84:	3afffffb 	bcc	10e78 <CleanAndInvalidateDataCacheRange+0x20>
   10e88:	f57ff04e 	dsb	st
   10e8c:	e12fff1e 	bx	lr

00010e90 <CMemorySystem::~CMemorySystem()>:
   10e90:	e3063940 	movw	r3, #26944	; 0x6940
   10e94:	e3403001 	movt	r3, #1
   10e98:	e92d4070 	push	{r4, r5, r6, lr}
   10e9c:	e1a04000 	mov	r4, r0
   10ea0:	e5932000 	ldr	r2, [r3]
   10ea4:	e1500002 	cmp	r0, r2
   10ea8:	0a000005 	beq	10ec4 <CMemorySystem::~CMemorySystem()+0x34>
   10eac:	e28400c8 	add	r0, r4, #200	; 0xc8
   10eb0:	eb000980 	bl	134b8 <CPageAllocator::~CPageAllocator()>
   10eb4:	e284000c 	add	r0, r4, #12
   10eb8:	ebfffeb4 	bl	10990 <CHeapAllocator::~CHeapAllocator()>
   10ebc:	e1a00004 	mov	r0, r4
   10ec0:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ec4:	e5d02000 	ldrb	r2, [r0]
   10ec8:	e3a05000 	mov	r5, #0
   10ecc:	e5835000 	str	r5, [r3]
   10ed0:	e1520005 	cmp	r2, r5
   10ed4:	0afffff4 	beq	10eac <CMemorySystem::~CMemorySystem()+0x1c>
   10ed8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   10edc:	e3c33005 	bic	r3, r3, #5
   10ee0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   10ee4:	ebffffb1 	bl	10db0 <CleanDataCache>
   10ee8:	ebffff86 	bl	10d08 <InvalidateDataCache>
   10eec:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   10ef0:	f57ff04f 	dsb	sy
   10ef4:	eaffffec 	b	10eac <CMemorySystem::~CMemorySystem()+0x1c>

00010ef8 <CMemorySystem::Destructor()>:
   10ef8:	e3063940 	movw	r3, #26944	; 0x6940
   10efc:	e3403001 	movt	r3, #1
   10f00:	e5932000 	ldr	r2, [r3]
   10f04:	e1520000 	cmp	r2, r0
   10f08:	112fff1e 	bxne	lr
   10f0c:	e5d22000 	ldrb	r2, [r2]
   10f10:	e92d4010 	push	{r4, lr}
   10f14:	e3a04000 	mov	r4, #0
   10f18:	e1520004 	cmp	r2, r4
   10f1c:	e5834000 	str	r4, [r3]
   10f20:	08bd8010 	popeq	{r4, pc}
   10f24:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   10f28:	e3c33005 	bic	r3, r3, #5
   10f2c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   10f30:	ebffff9e 	bl	10db0 <CleanDataCache>
   10f34:	ebffff73 	bl	10d08 <InvalidateDataCache>
   10f38:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   10f3c:	f57ff04f 	dsb	sy
   10f40:	e8bd8010 	pop	{r4, pc}

00010f44 <CMemorySystem::GetMemSize() const>:
   10f44:	e3063940 	movw	r3, #26944	; 0x6940
   10f48:	e3403001 	movt	r3, #1
   10f4c:	e5933000 	ldr	r3, [r3]
   10f50:	e3530000 	cmp	r3, #0
   10f54:	0a000002 	beq	10f64 <CMemorySystem::GetMemSize() const+0x20>
   10f58:	e9930009 	ldmib	r3, {r0, r3}
   10f5c:	e0800003 	add	r0, r0, r3
   10f60:	e12fff1e 	bx	lr
   10f64:	e3051078 	movw	r1, #20600	; 0x5078
   10f68:	e3401001 	movt	r1, #1
   10f6c:	e3a020a0 	mov	r2, #160	; 0xa0
   10f70:	e281000c 	add	r0, r1, #12
   10f74:	e92d4010 	push	{r4, lr}
   10f78:	ebffe13e 	bl	9478 <assertion_failed>

00010f7c <CMemorySystem::Get()>:
   10f7c:	e3063940 	movw	r3, #26944	; 0x6940
   10f80:	e3403001 	movt	r3, #1
   10f84:	e5930000 	ldr	r0, [r3]
   10f88:	e3500000 	cmp	r0, #0
   10f8c:	112fff1e 	bxne	lr
   10f90:	e3051078 	movw	r1, #20600	; 0x5078
   10f94:	e3401001 	movt	r1, #1
   10f98:	e3a020a6 	mov	r2, #166	; 0xa6
   10f9c:	e281000c 	add	r0, r1, #12
   10fa0:	e92d4010 	push	{r4, lr}
   10fa4:	ebffe133 	bl	9478 <assertion_failed>

00010fa8 <CMemorySystem::EnableMMU()>:
   10fa8:	e5d03000 	ldrb	r3, [r0]
   10fac:	e92d4010 	push	{r4, lr}
   10fb0:	e3530000 	cmp	r3, #0
   10fb4:	0a000019 	beq	11020 <CMemorySystem::EnableMMU()+0x78>
   10fb8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   10fbc:	e3833040 	orr	r3, r3, #64	; 0x40
   10fc0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   10fc4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   10fc8:	e3130001 	tst	r3, #1
   10fcc:	1a000018 	bne	11034 <CMemorySystem::EnableMMU()+0x8c>
   10fd0:	e3a04000 	mov	r4, #0
   10fd4:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   10fd8:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   10fdc:	e1500004 	cmp	r0, r4
   10fe0:	0a000018 	beq	11048 <CMemorySystem::EnableMMU()+0xa0>
   10fe4:	eb000096 	bl	11244 <CPageTable::GetBaseAddress() const>
   10fe8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   10fec:	e3a03001 	mov	r3, #1
   10ff0:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   10ff4:	ebffff43 	bl	10d08 <InvalidateDataCache>
   10ff8:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   10ffc:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   11000:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   11004:	f57ff04f 	dsb	sy
   11008:	f57ff06f 	isb	sy
   1100c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11010:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   11014:	e3833005 	orr	r3, r3, #5
   11018:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1101c:	e8bd8010 	pop	{r4, pc}
   11020:	e3051078 	movw	r1, #20600	; 0x5078
   11024:	e3401001 	movt	r1, #1
   11028:	e3a020ac 	mov	r2, #172	; 0xac
   1102c:	e281001c 	add	r0, r1, #28
   11030:	ebffe110 	bl	9478 <assertion_failed>
   11034:	e3051078 	movw	r1, #20600	; 0x5078
   11038:	e3401001 	movt	r1, #1
   1103c:	e3a020ba 	mov	r2, #186	; 0xba
   11040:	e281002c 	add	r0, r1, #44	; 0x2c
   11044:	ebffe10b 	bl	9478 <assertion_failed>
   11048:	e3051078 	movw	r1, #20600	; 0x5078
   1104c:	e3401001 	movt	r1, #1
   11050:	e3a020c0 	mov	r2, #192	; 0xc0
   11054:	e2810058 	add	r0, r1, #88	; 0x58
   11058:	ebffe106 	bl	9478 <assertion_failed>

0001105c <CMemorySystem::CMemorySystem(bool)>:
   1105c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11060:	e1a04000 	mov	r4, r0
   11064:	e280700c 	add	r7, r0, #12
   11068:	e1a03001 	mov	r3, r1
   1106c:	e3a05000 	mov	r5, #0
   11070:	e5c03000 	strb	r3, [r0]
   11074:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   11078:	e5805004 	str	r5, [r0, #4]
   1107c:	e28460c8 	add	r6, r4, #200	; 0xc8
   11080:	e5805008 	str	r5, [r0, #8]
   11084:	e1a00007 	mov	r0, r7
   11088:	e59f110c 	ldr	r1, [pc, #268]	; 1119c <CMemorySystem::CMemorySystem(bool)+0x140>
   1108c:	ebfffe28 	bl	10934 <CHeapAllocator::CHeapAllocator(char const*)>
   11090:	e1a00006 	mov	r0, r6
   11094:	eb000900 	bl	1349c <CPageAllocator::CPageAllocator()>
   11098:	e3063940 	movw	r3, #26944	; 0x6940
   1109c:	e3403001 	movt	r3, #1
   110a0:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   110a4:	e5935000 	ldr	r5, [r3]
   110a8:	e3550000 	cmp	r5, #0
   110ac:	0a000002 	beq	110bc <CMemorySystem::CMemorySystem(bool)+0x60>
   110b0:	e1a00004 	mov	r0, r4
   110b4:	e28dd02c 	add	sp, sp, #44	; 0x2c
   110b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   110bc:	e3a01001 	mov	r1, #1
   110c0:	e28d000c 	add	r0, sp, #12
   110c4:	e5834000 	str	r4, [r3]
   110c8:	eb00038c 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   110cc:	e3a03014 	mov	r3, #20
   110d0:	e3a01005 	mov	r1, #5
   110d4:	e3401001 	movt	r1, #1
   110d8:	e08d2003 	add	r2, sp, r3
   110dc:	e28d000c 	add	r0, sp, #12
   110e0:	e58d5000 	str	r5, [sp]
   110e4:	eb0003cb 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   110e8:	e3500000 	cmp	r0, #0
   110ec:	0a000016 	beq	1114c <CMemorySystem::CMemorySystem(bool)+0xf0>
   110f0:	e59d3020 	ldr	r3, [sp, #32]
   110f4:	e3530000 	cmp	r3, #0
   110f8:	1a000022 	bne	11188 <CMemorySystem::CMemorySystem(bool)+0x12c>
   110fc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11100:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   11104:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   11108:	e1a00007 	mov	r0, r7
   1110c:	e3a01605 	mov	r1, #5242880	; 0x500000
   11110:	e5843004 	str	r3, [r4, #4]
   11114:	e3a03701 	mov	r3, #262144	; 0x40000
   11118:	ebfffe1d 	bl	10994 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   1111c:	e3a02501 	mov	r2, #4194304	; 0x400000
   11120:	e1a01005 	mov	r1, r5
   11124:	e1a00006 	mov	r0, r6
   11128:	eb0008e3 	bl	134bc <CPageAllocator::Setup(unsigned int, unsigned int)>
   1112c:	e5d43000 	ldrb	r3, [r4]
   11130:	e3530000 	cmp	r3, #0
   11134:	1a00000a 	bne	11164 <CMemorySystem::CMemorySystem(bool)+0x108>
   11138:	e28d000c 	add	r0, sp, #12
   1113c:	eb000376 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11140:	e1a00004 	mov	r0, r4
   11144:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11148:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1114c:	e3a03303 	mov	r3, #201326592	; 0xc000000
   11150:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   11154:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   11158:	e58d0020 	str	r0, [sp, #32]
   1115c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11160:	eaffffe8 	b	11108 <CMemorySystem::CMemorySystem(bool)+0xac>
   11164:	e3a00004 	mov	r0, #4
   11168:	ebfffdcd 	bl	108a4 <operator new(unsigned int)>
   1116c:	e5941004 	ldr	r1, [r4, #4]
   11170:	e1a05000 	mov	r5, r0
   11174:	eb00000c 	bl	111ac <CPageTable::CPageTable(unsigned int)>
   11178:	e1a00004 	mov	r0, r4
   1117c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11180:	ebffff88 	bl	10fa8 <CMemorySystem::EnableMMU()>
   11184:	eaffffeb 	b	11138 <CMemorySystem::CMemorySystem(bool)+0xdc>
   11188:	e3051078 	movw	r1, #20600	; 0x5078
   1118c:	e3401001 	movt	r1, #1
   11190:	e3a0204e 	mov	r2, #78	; 0x4e
   11194:	e2810074 	add	r0, r1, #116	; 0x74
   11198:	ebffe0b6 	bl	9478 <assertion_failed>
   1119c:	000150e4 	.word	0x000150e4

000111a0 <CMemorySystem::GetCoherentPage(unsigned int)>:
   111a0:	e1a00600 	lsl	r0, r0, #12
   111a4:	e2800501 	add	r0, r0, #4194304	; 0x400000
   111a8:	e12fff1e 	bx	lr

000111ac <CPageTable::CPageTable(unsigned int)>:
   111ac:	e3a029ba 	mov	r2, #3047424	; 0x2e8000
   111b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   111b4:	e1a0c002 	mov	ip, r2
   111b8:	e5802000 	str	r2, [r0]
   111bc:	e304e0a4 	movw	lr, #16548	; 0x40a4
   111c0:	e340e001 	movt	lr, #1
   111c4:	e3006412 	movw	r6, #1042	; 0x412
   111c8:	e3406001 	movt	r6, #1
   111cc:	e30f5ffe 	movw	r5, #65534	; 0xfffe
   111d0:	e3445003 	movt	r5, #16387	; 0x4003
   111d4:	e3004416 	movw	r4, #1046	; 0x416
   111d8:	e3404001 	movt	r4, #1
   111dc:	e1a07000 	mov	r7, r0
   111e0:	e3a03000 	mov	r3, #0
   111e4:	e300240e 	movw	r2, #1038	; 0x40e
   111e8:	ea00000c 	b	11220 <CPageTable::CPageTable(unsigned int)+0x74>
   111ec:	e153000e 	cmp	r3, lr
   111f0:	3300240e 	movwcc	r2, #1038	; 0x40e
   111f4:	3a000008 	bcc	1121c <CPageTable::CPageTable(unsigned int)+0x70>
   111f8:	e3530501 	cmp	r3, #4194304	; 0x400000
   111fc:	01a02006 	moveq	r2, r6
   11200:	0a000005 	beq	1121c <CPageTable::CPageTable(unsigned int)+0x70>
   11204:	e1530001 	cmp	r3, r1
   11208:	e300241e 	movw	r2, #1054	; 0x41e
   1120c:	3a000002 	bcc	1121c <CPageTable::CPageTable(unsigned int)+0x70>
   11210:	e1530005 	cmp	r3, r5
   11214:	91a02004 	movls	r2, r4
   11218:	83a02000 	movhi	r2, #0
   1121c:	e28cc004 	add	ip, ip, #4
   11220:	e1822003 	orr	r2, r2, r3
   11224:	e3730601 	cmn	r3, #1048576	; 0x100000
   11228:	e58c2000 	str	r2, [ip]
   1122c:	e2833601 	add	r3, r3, #1048576	; 0x100000
   11230:	1affffed 	bne	111ec <CPageTable::CPageTable(unsigned int)+0x40>
   11234:	ebfffedd 	bl	10db0 <CleanDataCache>
   11238:	e1a00007 	mov	r0, r7
   1123c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00011240 <CPageTable::~CPageTable()>:
   11240:	e12fff1e 	bx	lr

00011244 <CPageTable::GetBaseAddress() const>:
   11244:	e5900000 	ldr	r0, [r0]
   11248:	e3800059 	orr	r0, r0, #89	; 0x59
   1124c:	e12fff1e 	bx	lr

00011250 <CurrentExecutionLevel>:
   11250:	e10f0000 	mrs	r0, CPSR
   11254:	e3100040 	tst	r0, #64	; 0x40
   11258:	07e003d0 	ubfxeq	r0, r0, #7, #1
   1125c:	13a00002 	movne	r0, #2
   11260:	e12fff1e 	bx	lr

00011264 <EnterCritical>:
   11264:	e2403001 	sub	r3, r0, #1
   11268:	e92d4010 	push	{r4, lr}
   1126c:	e3530001 	cmp	r3, #1
   11270:	8a000012 	bhi	112c0 <EnterCritical+0x5c>
   11274:	e10f1000 	mrs	r1, CPSR
   11278:	e3500002 	cmp	r0, #2
   1127c:	1a000015 	bne	112d8 <EnterCritical+0x74>
   11280:	f10c00c0 	cpsid	if
   11284:	e3063944 	movw	r3, #26948	; 0x6944
   11288:	e3403001 	movt	r3, #1
   1128c:	e5932000 	ldr	r2, [r3]
   11290:	e3520013 	cmp	r2, #19
   11294:	8a000017 	bhi	112f8 <EnterCritical+0x94>
   11298:	e5932000 	ldr	r2, [r3]
   1129c:	e3500001 	cmp	r0, #1
   112a0:	e2820001 	add	r0, r2, #1
   112a4:	e5830000 	str	r0, [r3]
   112a8:	e0833102 	add	r3, r3, r2, lsl #2
   112ac:	e5831004 	str	r1, [r3, #4]
   112b0:	1a000000 	bne	112b8 <EnterCritical+0x54>
   112b4:	f1080040 	cpsie	f
   112b8:	f57ff05f 	dmb	sy
   112bc:	e8bd8010 	pop	{r4, pc}
   112c0:	e3051108 	movw	r1, #20744	; 0x5108
   112c4:	e3401001 	movt	r1, #1
   112c8:	e3050118 	movw	r0, #20760	; 0x5118
   112cc:	e3400001 	movt	r0, #1
   112d0:	e3a02064 	mov	r2, #100	; 0x64
   112d4:	ebffe067 	bl	9478 <assertion_failed>
   112d8:	e3110040 	tst	r1, #64	; 0x40
   112dc:	0affffe7 	beq	11280 <EnterCritical+0x1c>
   112e0:	e3051108 	movw	r1, #20744	; 0x5108
   112e4:	e3401001 	movt	r1, #1
   112e8:	e3050150 	movw	r0, #20816	; 0x5150
   112ec:	e3400001 	movt	r0, #1
   112f0:	e3a0206a 	mov	r2, #106	; 0x6a
   112f4:	ebffe05f 	bl	9478 <assertion_failed>
   112f8:	e3051108 	movw	r1, #20744	; 0x5108
   112fc:	e3401001 	movt	r1, #1
   11300:	e3050180 	movw	r0, #20864	; 0x5180
   11304:	e3400001 	movt	r0, #1
   11308:	e3a0206e 	mov	r2, #110	; 0x6e
   1130c:	ebffe059 	bl	9478 <assertion_failed>

00011310 <LeaveCritical>:
   11310:	f57ff05f 	dmb	sy
   11314:	f10c0040 	cpsid	f
   11318:	e3063944 	movw	r3, #26948	; 0x6944
   1131c:	e3403001 	movt	r3, #1
   11320:	e5932000 	ldr	r2, [r3]
   11324:	e3520000 	cmp	r2, #0
   11328:	0a000006 	beq	11348 <LeaveCritical+0x38>
   1132c:	e5932000 	ldr	r2, [r3]
   11330:	e2422001 	sub	r2, r2, #1
   11334:	e5832000 	str	r2, [r3]
   11338:	e0833102 	add	r3, r3, r2, lsl #2
   1133c:	e5933004 	ldr	r3, [r3, #4]
   11340:	e121f003 	msr	CPSR_c, r3
   11344:	e12fff1e 	bx	lr
   11348:	e3051108 	movw	r1, #20744	; 0x5108
   1134c:	e3401001 	movt	r1, #1
   11350:	e30501a8 	movw	r0, #20904	; 0x51a8
   11354:	e3400001 	movt	r0, #1
   11358:	e3a0207f 	mov	r2, #127	; 0x7f
   1135c:	e92d4010 	push	{r4, lr}
   11360:	ebffe044 	bl	9478 <assertion_failed>

00011364 <SyncDataAndInstructionCache>:
   11364:	e92d4010 	push	{r4, lr}
   11368:	ebfffe90 	bl	10db0 <CleanDataCache>
   1136c:	e3a03000 	mov	r3, #0
   11370:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11374:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11378:	f57ff04f 	dsb	sy
   1137c:	f57ff06f 	isb	sy
   11380:	e8bd8010 	pop	{r4, pc}

00011384 <CInterruptSystem::CInterruptSystem()>:
   11384:	e3a02000 	mov	r2, #0
   11388:	e2403004 	sub	r3, r0, #4
   1138c:	e2801f53 	add	r1, r0, #332	; 0x14c
   11390:	e5a32004 	str	r2, [r3, #4]!
   11394:	e1530001 	cmp	r3, r1
   11398:	e5832150 	str	r2, [r3, #336]	; 0x150
   1139c:	1afffffb 	bne	11390 <CInterruptSystem::CInterruptSystem()+0xc>
   113a0:	e3063998 	movw	r3, #27032	; 0x6998
   113a4:	e3403001 	movt	r3, #1
   113a8:	e5830000 	str	r0, [r3]
   113ac:	e12fff1e 	bx	lr

000113b0 <CInterruptSystem::~CInterruptSystem()>:
   113b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   113b4:	f10c0080 	cpsid	i
   113b8:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   113bc:	e3a03a0b 	mov	r3, #45056	; 0xb000
   113c0:	e3433f00 	movt	r3, #16128	; 0x3f00
   113c4:	e3062998 	movw	r2, #27032	; 0x6998
   113c8:	e3402001 	movt	r2, #1
   113cc:	e3a01000 	mov	r1, #0
   113d0:	e3e0c000 	mvn	ip, #0
   113d4:	e583120c 	str	r1, [r3, #524]	; 0x20c
   113d8:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   113dc:	e583c220 	str	ip, [r3, #544]	; 0x220
   113e0:	e583c224 	str	ip, [r3, #548]	; 0x224
   113e4:	e58e1040 	str	r1, [lr, #64]	; 0x40
   113e8:	e5821000 	str	r1, [r2]
   113ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000113f0 <CInterruptSystem::Initialize()>:
   113f0:	e3032770 	movw	r2, #14192	; 0x3770
   113f4:	e3402001 	movt	r2, #1
   113f8:	e3033788 	movw	r3, #14216	; 0x3788
   113fc:	e3403001 	movt	r3, #1
   11400:	e2422018 	sub	r2, r2, #24
   11404:	e243301c 	sub	r3, r3, #28
   11408:	e92d4010 	push	{r4, lr}
   1140c:	e3a04000 	mov	r4, #0
   11410:	e1a02142 	asr	r2, r2, #2
   11414:	e1a03143 	asr	r3, r3, #2
   11418:	e2422002 	sub	r2, r2, #2
   1141c:	e2433002 	sub	r3, r3, #2
   11420:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11424:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11428:	e1c421f8 	strd	r2, [r4, #24]
   1142c:	ebffffcc 	bl	11364 <SyncDataAndInstructionCache>
   11430:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   11434:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11438:	e3433f00 	movt	r3, #16128	; 0x3f00
   1143c:	e3e02000 	mvn	r2, #0
   11440:	e583420c 	str	r4, [r3, #524]	; 0x20c
   11444:	e583221c 	str	r2, [r3, #540]	; 0x21c
   11448:	e5832220 	str	r2, [r3, #544]	; 0x220
   1144c:	e5832224 	str	r2, [r3, #548]	; 0x224
   11450:	e5814040 	str	r4, [r1, #64]	; 0x40
   11454:	f1080080 	cpsie	i
   11458:	e3a00001 	mov	r0, #1
   1145c:	e8bd8010 	pop	{r4, pc}

00011460 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11460:	e3510053 	cmp	r1, #83	; 0x53
   11464:	e92d4010 	push	{r4, lr}
   11468:	8a00001d 	bhi	114e4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x84>
   1146c:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   11470:	e080e101 	add	lr, r0, r1, lsl #2
   11474:	e35c0000 	cmp	ip, #0
   11478:	1a00001f 	bne	114fc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   1147c:	e7802101 	str	r2, [r0, r1, lsl #2]
   11480:	e3510047 	cmp	r1, #71	; 0x47
   11484:	e58e3150 	str	r3, [lr, #336]	; 0x150
   11488:	9a000006 	bls	114a8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   1148c:	e3510049 	cmp	r1, #73	; 0x49
   11490:	1a00001f 	bne	11514 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   11494:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11498:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   1149c:	e3833002 	orr	r3, r3, #2
   114a0:	e5823040 	str	r3, [r2, #64]	; 0x40
   114a4:	e8bd8010 	pop	{r4, pc}
   114a8:	e351001f 	cmp	r1, #31
   114ac:	930b3210 	movwls	r3, #45584	; 0xb210
   114b0:	93433f00 	movtls	r3, #16128	; 0x3f00
   114b4:	9a000005 	bls	114d0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x70>
   114b8:	e351003f 	cmp	r1, #63	; 0x3f
   114bc:	e30b2218 	movw	r2, #45592	; 0xb218
   114c0:	e3432f00 	movt	r2, #16128	; 0x3f00
   114c4:	e30b3214 	movw	r3, #45588	; 0xb214
   114c8:	e3433f00 	movt	r3, #16128	; 0x3f00
   114cc:	81a03002 	movhi	r3, r2
   114d0:	e201101f 	and	r1, r1, #31
   114d4:	e3a02001 	mov	r2, #1
   114d8:	e1a01112 	lsl	r1, r2, r1
   114dc:	e5831000 	str	r1, [r3]
   114e0:	e8bd8010 	pop	{r4, pc}
   114e4:	e30511c0 	movw	r1, #20928	; 0x51c0
   114e8:	e3401001 	movt	r1, #1
   114ec:	e30501d0 	movw	r0, #20944	; 0x51d0
   114f0:	e3400001 	movt	r0, #1
   114f4:	e3a02076 	mov	r2, #118	; 0x76
   114f8:	ebffdfde 	bl	9478 <assertion_failed>
   114fc:	e30511c0 	movw	r1, #20928	; 0x51c0
   11500:	e3401001 	movt	r1, #1
   11504:	e30501e4 	movw	r0, #20964	; 0x51e4
   11508:	e3400001 	movt	r0, #1
   1150c:	e3a02077 	mov	r2, #119	; 0x77
   11510:	ebffdfd8 	bl	9478 <assertion_failed>
   11514:	e30511c0 	movw	r1, #20928	; 0x51c0
   11518:	e3401001 	movt	r1, #1
   1151c:	e3050200 	movw	r0, #20992	; 0x5200
   11520:	e3400001 	movt	r0, #1
   11524:	e3a020b0 	mov	r2, #176	; 0xb0
   11528:	ebffdfd2 	bl	9478 <assertion_failed>

0001152c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   1152c:	e3510053 	cmp	r1, #83	; 0x53
   11530:	e92d4010 	push	{r4, lr}
   11534:	8a00001e 	bhi	115b4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x88>
   11538:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   1153c:	e0802101 	add	r2, r0, r1, lsl #2
   11540:	e3530000 	cmp	r3, #0
   11544:	0a000020 	beq	115cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   11548:	e3510047 	cmp	r1, #71	; 0x47
   1154c:	9a000009 	bls	11578 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   11550:	e3510049 	cmp	r1, #73	; 0x49
   11554:	1a000022 	bne	115e4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   11558:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
   1155c:	e59c3040 	ldr	r3, [ip, #64]	; 0x40
   11560:	e3c33002 	bic	r3, r3, #2
   11564:	e58c3040 	str	r3, [ip, #64]	; 0x40
   11568:	e3a03000 	mov	r3, #0
   1156c:	e7803101 	str	r3, [r0, r1, lsl #2]
   11570:	e5823150 	str	r3, [r2, #336]	; 0x150
   11574:	e8bd8010 	pop	{r4, pc}
   11578:	e351001f 	cmp	r1, #31
   1157c:	930b321c 	movwls	r3, #45596	; 0xb21c
   11580:	93433f00 	movtls	r3, #16128	; 0x3f00
   11584:	9a000005 	bls	115a0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   11588:	e351003f 	cmp	r1, #63	; 0x3f
   1158c:	e30bc224 	movw	ip, #45604	; 0xb224
   11590:	e343cf00 	movt	ip, #16128	; 0x3f00
   11594:	e30b3220 	movw	r3, #45600	; 0xb220
   11598:	e3433f00 	movt	r3, #16128	; 0x3f00
   1159c:	81a0300c 	movhi	r3, ip
   115a0:	e201e01f 	and	lr, r1, #31
   115a4:	e3a0c001 	mov	ip, #1
   115a8:	e1a0ce1c 	lsl	ip, ip, lr
   115ac:	e583c000 	str	ip, [r3]
   115b0:	eaffffec 	b	11568 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   115b4:	e30511c0 	movw	r1, #20928	; 0x51c0
   115b8:	e3401001 	movt	r1, #1
   115bc:	e30501d0 	movw	r0, #20944	; 0x51d0
   115c0:	e3400001 	movt	r0, #1
   115c4:	e3a02081 	mov	r2, #129	; 0x81
   115c8:	ebffdfaa 	bl	9478 <assertion_failed>
   115cc:	e30511c0 	movw	r1, #20928	; 0x51c0
   115d0:	e3401001 	movt	r1, #1
   115d4:	e3050220 	movw	r0, #21024	; 0x5220
   115d8:	e3400001 	movt	r0, #1
   115dc:	e3a02082 	mov	r2, #130	; 0x82
   115e0:	ebffdfa4 	bl	9478 <assertion_failed>
   115e4:	e30511c0 	movw	r1, #20928	; 0x51c0
   115e8:	e3401001 	movt	r1, #1
   115ec:	e3050200 	movw	r0, #20992	; 0x5200
   115f0:	e3400001 	movt	r0, #1
   115f4:	e3a020c8 	mov	r2, #200	; 0xc8
   115f8:	ebffdf9e 	bl	9478 <assertion_failed>

000115fc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   115fc:	e3510047 	cmp	r1, #71	; 0x47
   11600:	e92d4010 	push	{r4, lr}
   11604:	8a00000d 	bhi	11640 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x44>
   11608:	e3520000 	cmp	r2, #0
   1160c:	0a000011 	beq	11658 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x5c>
   11610:	e30608e4 	movw	r0, #26852	; 0x68e4
   11614:	e3400001 	movt	r0, #1
   11618:	e590c000 	ldr	ip, [r0]
   1161c:	e35c0000 	cmp	ip, #0
   11620:	1a000012 	bne	11670 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x74>
   11624:	e3a0ca0b 	mov	ip, #45056	; 0xb000
   11628:	e343cf00 	movt	ip, #16128	; 0x3f00
   1162c:	e3811080 	orr	r1, r1, #128	; 0x80
   11630:	e5802000 	str	r2, [r0]
   11634:	e5803004 	str	r3, [r0, #4]
   11638:	e58c120c 	str	r1, [ip, #524]	; 0x20c
   1163c:	e8bd8010 	pop	{r4, pc}
   11640:	e30511c0 	movw	r1, #20928	; 0x51c0
   11644:	e3401001 	movt	r1, #1
   11648:	e305023c 	movw	r0, #21052	; 0x523c
   1164c:	e3400001 	movt	r0, #1
   11650:	e3a0208f 	mov	r2, #143	; 0x8f
   11654:	ebffdf87 	bl	9478 <assertion_failed>
   11658:	e30511c0 	movw	r1, #20928	; 0x51c0
   1165c:	e3401001 	movt	r1, #1
   11660:	e3050270 	movw	r0, #21104	; 0x5270
   11664:	e3400001 	movt	r0, #1
   11668:	e3a02090 	mov	r2, #144	; 0x90
   1166c:	ebffdf81 	bl	9478 <assertion_failed>
   11670:	e30511c0 	movw	r1, #20928	; 0x51c0
   11674:	e3401001 	movt	r1, #1
   11678:	e3050250 	movw	r0, #21072	; 0x5250
   1167c:	e3400001 	movt	r0, #1
   11680:	e3a02091 	mov	r2, #145	; 0x91
   11684:	ebffdf7b 	bl	9478 <assertion_failed>

00011688 <CInterruptSystem::DisconnectFIQ()>:
   11688:	e30638e4 	movw	r3, #26852	; 0x68e4
   1168c:	e3403001 	movt	r3, #1
   11690:	e5932000 	ldr	r2, [r3]
   11694:	e3520000 	cmp	r2, #0
   11698:	0a00000c 	beq	116d0 <CInterruptSystem::DisconnectFIQ()+0x48>
   1169c:	e3a01a0b 	mov	r1, #45056	; 0xb000
   116a0:	e3431f00 	movt	r1, #16128	; 0x3f00
   116a4:	e3a02000 	mov	r2, #0
   116a8:	e581220c 	str	r2, [r1, #524]	; 0x20c
   116ac:	e5c32000 	strb	r2, [r3]
   116b0:	e5c32001 	strb	r2, [r3, #1]
   116b4:	e5c32002 	strb	r2, [r3, #2]
   116b8:	e5c32003 	strb	r2, [r3, #3]
   116bc:	e5c32004 	strb	r2, [r3, #4]
   116c0:	e5c32005 	strb	r2, [r3, #5]
   116c4:	e5c32006 	strb	r2, [r3, #6]
   116c8:	e5c32007 	strb	r2, [r3, #7]
   116cc:	e12fff1e 	bx	lr
   116d0:	e30511c0 	movw	r1, #20928	; 0x51c0
   116d4:	e3401001 	movt	r1, #1
   116d8:	e3050268 	movw	r0, #21096	; 0x5268
   116dc:	e3400001 	movt	r0, #1
   116e0:	e3a0209b 	mov	r2, #155	; 0x9b
   116e4:	e92d4010 	push	{r4, lr}
   116e8:	ebffdf62 	bl	9478 <assertion_failed>

000116ec <CInterruptSystem::EnableIRQ(unsigned int)>:
   116ec:	e3500053 	cmp	r0, #83	; 0x53
   116f0:	e92d4010 	push	{r4, lr}
   116f4:	8a000017 	bhi	11758 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   116f8:	e3500047 	cmp	r0, #71	; 0x47
   116fc:	8a00000e 	bhi	1173c <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   11700:	e350001f 	cmp	r0, #31
   11704:	930b3210 	movwls	r3, #45584	; 0xb210
   11708:	93433f00 	movtls	r3, #16128	; 0x3f00
   1170c:	9a000005 	bls	11728 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   11710:	e350003f 	cmp	r0, #63	; 0x3f
   11714:	e30b2218 	movw	r2, #45592	; 0xb218
   11718:	e3432f00 	movt	r2, #16128	; 0x3f00
   1171c:	e30b3214 	movw	r3, #45588	; 0xb214
   11720:	e3433f00 	movt	r3, #16128	; 0x3f00
   11724:	81a03002 	movhi	r3, r2
   11728:	e200001f 	and	r0, r0, #31
   1172c:	e3a02001 	mov	r2, #1
   11730:	e1a00012 	lsl	r0, r2, r0
   11734:	e5830000 	str	r0, [r3]
   11738:	e8bd8010 	pop	{r4, pc}
   1173c:	e3500049 	cmp	r0, #73	; 0x49
   11740:	1a00000a 	bne	11770 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   11744:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11748:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   1174c:	e3833002 	orr	r3, r3, #2
   11750:	e5823040 	str	r3, [r2, #64]	; 0x40
   11754:	e8bd8010 	pop	{r4, pc}
   11758:	e30511c0 	movw	r1, #20928	; 0x51c0
   1175c:	e3401001 	movt	r1, #1
   11760:	e30501d0 	movw	r0, #20944	; 0x51d0
   11764:	e3400001 	movt	r0, #1
   11768:	e3a020a7 	mov	r2, #167	; 0xa7
   1176c:	ebffdf41 	bl	9478 <assertion_failed>
   11770:	e30511c0 	movw	r1, #20928	; 0x51c0
   11774:	e3401001 	movt	r1, #1
   11778:	e3050200 	movw	r0, #20992	; 0x5200
   1177c:	e3400001 	movt	r0, #1
   11780:	e3a020b0 	mov	r2, #176	; 0xb0
   11784:	ebffdf3b 	bl	9478 <assertion_failed>

00011788 <CInterruptSystem::DisableIRQ(unsigned int)>:
   11788:	e3500053 	cmp	r0, #83	; 0x53
   1178c:	e92d4010 	push	{r4, lr}
   11790:	8a000017 	bhi	117f4 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   11794:	e3500047 	cmp	r0, #71	; 0x47
   11798:	8a00000e 	bhi	117d8 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   1179c:	e350001f 	cmp	r0, #31
   117a0:	930b321c 	movwls	r3, #45596	; 0xb21c
   117a4:	93433f00 	movtls	r3, #16128	; 0x3f00
   117a8:	9a000005 	bls	117c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   117ac:	e350003f 	cmp	r0, #63	; 0x3f
   117b0:	e30b2224 	movw	r2, #45604	; 0xb224
   117b4:	e3432f00 	movt	r2, #16128	; 0x3f00
   117b8:	e30b3220 	movw	r3, #45600	; 0xb220
   117bc:	e3433f00 	movt	r3, #16128	; 0x3f00
   117c0:	81a03002 	movhi	r3, r2
   117c4:	e200001f 	and	r0, r0, #31
   117c8:	e3a02001 	mov	r2, #1
   117cc:	e1a00012 	lsl	r0, r2, r0
   117d0:	e5830000 	str	r0, [r3]
   117d4:	e8bd8010 	pop	{r4, pc}
   117d8:	e3500049 	cmp	r0, #73	; 0x49
   117dc:	1a00000a 	bne	1180c <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   117e0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   117e4:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   117e8:	e3c33002 	bic	r3, r3, #2
   117ec:	e5823040 	str	r3, [r2, #64]	; 0x40
   117f0:	e8bd8010 	pop	{r4, pc}
   117f4:	e30511c0 	movw	r1, #20928	; 0x51c0
   117f8:	e3401001 	movt	r1, #1
   117fc:	e30501d0 	movw	r0, #20944	; 0x51d0
   11800:	e3400001 	movt	r0, #1
   11804:	e3a020bf 	mov	r2, #191	; 0xbf
   11808:	ebffdf1a 	bl	9478 <assertion_failed>
   1180c:	e30511c0 	movw	r1, #20928	; 0x51c0
   11810:	e3401001 	movt	r1, #1
   11814:	e3050200 	movw	r0, #20992	; 0x5200
   11818:	e3400001 	movt	r0, #1
   1181c:	e3a020c8 	mov	r2, #200	; 0xc8
   11820:	ebffdf14 	bl	9478 <assertion_failed>

00011824 <CInterruptSystem::EnableFIQ(unsigned int)>:
   11824:	e3500047 	cmp	r0, #71	; 0x47
   11828:	8a000004 	bhi	11840 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   1182c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11830:	e3433f00 	movt	r3, #16128	; 0x3f00
   11834:	e3800080 	orr	r0, r0, #128	; 0x80
   11838:	e583020c 	str	r0, [r3, #524]	; 0x20c
   1183c:	e12fff1e 	bx	lr
   11840:	e30511c0 	movw	r1, #20928	; 0x51c0
   11844:	e3401001 	movt	r1, #1
   11848:	e305023c 	movw	r0, #21052	; 0x523c
   1184c:	e3400001 	movt	r0, #1
   11850:	e3a020d7 	mov	r2, #215	; 0xd7
   11854:	e92d4010 	push	{r4, lr}
   11858:	ebffdf06 	bl	9478 <assertion_failed>

0001185c <CInterruptSystem::DisableFIQ()>:
   1185c:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11860:	e3433f00 	movt	r3, #16128	; 0x3f00
   11864:	e3a02000 	mov	r2, #0
   11868:	e583220c 	str	r2, [r3, #524]	; 0x20c
   1186c:	e12fff1e 	bx	lr

00011870 <CInterruptSystem::Get()>:
   11870:	e3063998 	movw	r3, #27032	; 0x6998
   11874:	e3403001 	movt	r3, #1
   11878:	e5930000 	ldr	r0, [r3]
   1187c:	e3500000 	cmp	r0, #0
   11880:	112fff1e 	bxne	lr
   11884:	e30511c0 	movw	r1, #20928	; 0x51c0
   11888:	e3401001 	movt	r1, #1
   1188c:	e3040384 	movw	r0, #17284	; 0x4384
   11890:	e3400001 	movt	r0, #1
   11894:	e3a020e9 	mov	r2, #233	; 0xe9
   11898:	e92d4010 	push	{r4, lr}
   1189c:	ebffdef5 	bl	9478 <assertion_failed>

000118a0 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   118a0:	e3510053 	cmp	r1, #83	; 0x53
   118a4:	e92d4010 	push	{r4, lr}
   118a8:	8a00000b 	bhi	118dc <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   118ac:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   118b0:	e0803101 	add	r3, r0, r1, lsl #2
   118b4:	e3540000 	cmp	r4, #0
   118b8:	0a000003 	beq	118cc <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   118bc:	e5930150 	ldr	r0, [r3, #336]	; 0x150
   118c0:	e12fff34 	blx	r4
   118c4:	e3a00001 	mov	r0, #1
   118c8:	e8bd8010 	pop	{r4, pc}
   118cc:	e1a00001 	mov	r0, r1
   118d0:	ebffffac 	bl	11788 <CInterruptSystem::DisableIRQ(unsigned int)>
   118d4:	e1a00004 	mov	r0, r4
   118d8:	e8bd8010 	pop	{r4, pc}
   118dc:	e30511c0 	movw	r1, #20928	; 0x51c0
   118e0:	e3401001 	movt	r1, #1
   118e4:	e30501d0 	movw	r0, #20944	; 0x51d0
   118e8:	e3400001 	movt	r0, #1
   118ec:	e3a020ef 	mov	r2, #239	; 0xef
   118f0:	ebffdee0 	bl	9478 <assertion_failed>

000118f4 <CInterruptSystem::InterruptHandler()>:
   118f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   118f8:	e3067998 	movw	r7, #27032	; 0x6998
   118fc:	e3407001 	movt	r7, #1
   11900:	e24dd010 	sub	sp, sp, #16
   11904:	e5972000 	ldr	r2, [r7]
   11908:	e3520000 	cmp	r2, #0
   1190c:	0a00003a 	beq	119fc <CInterruptSystem::InterruptHandler()+0x108>
   11910:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   11914:	e5916060 	ldr	r6, [r1, #96]	; 0x60
   11918:	e3c63e1f 	bic	r3, r6, #496	; 0x1f0
   1191c:	e3c33002 	bic	r3, r3, #2
   11920:	e3530000 	cmp	r3, #0
   11924:	1a00003a 	bne	11a14 <CInterruptSystem::InterruptHandler()+0x120>
   11928:	e2166002 	ands	r6, r6, #2
   1192c:	1a000025 	bne	119c8 <CInterruptSystem::InterruptHandler()+0xd4>
   11930:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11934:	e3433f00 	movt	r3, #16128	; 0x3f00
   11938:	e28d8008 	add	r8, sp, #8
   1193c:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   11940:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   11944:	e58d2008 	str	r2, [sp, #8]
   11948:	e3540000 	cmp	r4, #0
   1194c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   11950:	e6ef3073 	uxtb	r3, r3
   11954:	e58d300c 	str	r3, [sp, #12]
   11958:	1a000005 	bne	11974 <CInterruptSystem::InterruptHandler()+0x80>
   1195c:	e2866020 	add	r6, r6, #32
   11960:	e3560060 	cmp	r6, #96	; 0x60
   11964:	0a000033 	beq	11a38 <CInterruptSystem::InterruptHandler()+0x144>
   11968:	e4984004 	ldr	r4, [r8], #4
   1196c:	e3540000 	cmp	r4, #0
   11970:	0afffff9 	beq	1195c <CInterruptSystem::InterruptHandler()+0x68>
   11974:	e1a05006 	mov	r5, r6
   11978:	ea000002 	b	11988 <CInterruptSystem::InterruptHandler()+0x94>
   1197c:	e2855001 	add	r5, r5, #1
   11980:	e1b040a4 	lsrs	r4, r4, #1
   11984:	0afffff4 	beq	1195c <CInterruptSystem::InterruptHandler()+0x68>
   11988:	e3140001 	tst	r4, #1
   1198c:	0afffffa 	beq	1197c <CInterruptSystem::InterruptHandler()+0x88>
   11990:	e5973000 	ldr	r3, [r7]
   11994:	e3550053 	cmp	r5, #83	; 0x53
   11998:	8a000011 	bhi	119e4 <CInterruptSystem::InterruptHandler()+0xf0>
   1199c:	e7932105 	ldr	r2, [r3, r5, lsl #2]
   119a0:	e3520000 	cmp	r2, #0
   119a4:	0a000004 	beq	119bc <CInterruptSystem::InterruptHandler()+0xc8>
   119a8:	e2855054 	add	r5, r5, #84	; 0x54
   119ac:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   119b0:	e28dd010 	add	sp, sp, #16
   119b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   119b8:	e12fff12 	bx	r2
   119bc:	e1a00005 	mov	r0, r5
   119c0:	ebffff70 	bl	11788 <CInterruptSystem::DisableIRQ(unsigned int)>
   119c4:	eaffffec 	b	1197c <CInterruptSystem::InterruptHandler()+0x88>
   119c8:	e5923124 	ldr	r3, [r2, #292]	; 0x124
   119cc:	e3530000 	cmp	r3, #0
   119d0:	0a000015 	beq	11a2c <CInterruptSystem::InterruptHandler()+0x138>
   119d4:	e5920274 	ldr	r0, [r2, #628]	; 0x274
   119d8:	e28dd010 	add	sp, sp, #16
   119dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   119e0:	e12fff13 	bx	r3
   119e4:	e30511c0 	movw	r1, #20928	; 0x51c0
   119e8:	e3401001 	movt	r1, #1
   119ec:	e30501d0 	movw	r0, #20944	; 0x51d0
   119f0:	e3400001 	movt	r0, #1
   119f4:	e3a020ef 	mov	r2, #239	; 0xef
   119f8:	ebffde9e 	bl	9478 <assertion_failed>
   119fc:	e30511c0 	movw	r1, #20928	; 0x51c0
   11a00:	e3401001 	movt	r1, #1
   11a04:	e3040384 	movw	r0, #17284	; 0x4384
   11a08:	e3400001 	movt	r0, #1
   11a0c:	e3002102 	movw	r2, #258	; 0x102
   11a10:	ebffde98 	bl	9478 <assertion_failed>
   11a14:	e30511c0 	movw	r1, #20928	; 0x51c0
   11a18:	e3401001 	movt	r1, #1
   11a1c:	e3050280 	movw	r0, #21120	; 0x5280
   11a20:	e3400001 	movt	r0, #1
   11a24:	e3002106 	movw	r2, #262	; 0x106
   11a28:	ebffde92 	bl	9478 <assertion_failed>
   11a2c:	e5913040 	ldr	r3, [r1, #64]	; 0x40
   11a30:	e3c33002 	bic	r3, r3, #2
   11a34:	e5813040 	str	r3, [r1, #64]	; 0x40
   11a38:	e28dd010 	add	sp, sp, #16
   11a3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00011a40 <InterruptHandler>:
   11a40:	eaffffab 	b	118f4 <CInterruptSystem::InterruptHandler()>

00011a44 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   11a44:	e92d4030 	push	{r4, r5, lr}
   11a48:	e1a05000 	mov	r5, r0
   11a4c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   11a50:	e24dd014 	sub	sp, sp, #20
   11a54:	e3a01000 	mov	r1, #0
   11a58:	e3a02001 	mov	r2, #1
   11a5c:	e28d0008 	add	r0, sp, #8
   11a60:	e5c32011 	strb	r2, [r3, #17]
   11a64:	e5c3100c 	strb	r1, [r3, #12]
   11a68:	e5c3100d 	strb	r1, [r3, #13]
   11a6c:	e5c3100e 	strb	r1, [r3, #14]
   11a70:	e5c3100f 	strb	r1, [r3, #15]
   11a74:	e5c31010 	strb	r1, [r3, #16]
   11a78:	e5c31012 	strb	r1, [r3, #18]
   11a7c:	e5c31013 	strb	r1, [r3, #19]
   11a80:	eb00011e 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11a84:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   11a88:	e3003408 	movw	r3, #1032	; 0x408
   11a8c:	e28d0008 	add	r0, sp, #8
   11a90:	e58d3000 	str	r3, [sp]
   11a94:	e308100b 	movw	r1, #32779	; 0x800b
   11a98:	e3401004 	movt	r1, #4
   11a9c:	e3003414 	movw	r3, #1044	; 0x414
   11aa0:	eb00015c 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11aa4:	e2504000 	subs	r4, r0, #0
   11aa8:	0a000003 	beq	11abc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x78>
   11aac:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   11ab0:	e593300c 	ldr	r3, [r3, #12]
   11ab4:	e3530000 	cmp	r3, #0
   11ab8:	0a000000 	beq	11ac0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x7c>
   11abc:	e3a04000 	mov	r4, #0
   11ac0:	e28d0008 	add	r0, sp, #8
   11ac4:	eb000114 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11ac8:	e1a00004 	mov	r0, r4
   11acc:	e28dd014 	add	sp, sp, #20
   11ad0:	e8bd8030 	pop	{r4, r5, pc}

00011ad4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   11ad4:	e92d4070 	push	{r4, r5, r6, lr}
   11ad8:	e1a04000 	mov	r4, r0
   11adc:	e24dd028 	sub	sp, sp, #40	; 0x28
   11ae0:	e5803010 	str	r3, [r0, #16]
   11ae4:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   11ae8:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   11aec:	e8801006 	stm	r0, {r1, r2, ip}
   11af0:	e3550000 	cmp	r5, #0
   11af4:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   11af8:	e5805014 	str	r5, [r0, #20]
   11afc:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   11b00:	e584000c 	str	r0, [r4, #12]
   11b04:	e3a00000 	mov	r0, #0
   11b08:	e5840018 	str	r0, [r4, #24]
   11b0c:	e584001c 	str	r0, [r4, #28]
   11b10:	e5840020 	str	r0, [r4, #32]
   11b14:	e5840024 	str	r0, [r4, #36]	; 0x24
   11b18:	1a000032 	bne	11be8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x114>
   11b1c:	e1520000 	cmp	r2, r0
   11b20:	11510000 	cmpne	r1, r0
   11b24:	1a000019 	bne	11b90 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xbc>
   11b28:	e1a01005 	mov	r1, r5
   11b2c:	e28d000c 	add	r0, sp, #12
   11b30:	eb0000f2 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11b34:	e3a03014 	mov	r3, #20
   11b38:	e08d2003 	add	r2, sp, r3
   11b3c:	e3a01003 	mov	r1, #3
   11b40:	e3401004 	movt	r1, #4
   11b44:	e28d000c 	add	r0, sp, #12
   11b48:	e58d5000 	str	r5, [sp]
   11b4c:	eb000131 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11b50:	e3500000 	cmp	r0, #0
   11b54:	0a000006 	beq	11b74 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa0>
   11b58:	e1cd22d0 	ldrd	r2, [sp, #32]
   11b5c:	e1c420f0 	strd	r2, [r4]
   11b60:	e2422d0a 	sub	r2, r2, #640	; 0x280
   11b64:	e2433e1e 	sub	r3, r3, #480	; 0x1e0
   11b68:	e3530e69 	cmp	r3, #1680	; 0x690
   11b6c:	93520d36 	cmpls	r2, #3456	; 0xd80
   11b70:	9a000002 	bls	11b80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xac>
   11b74:	e3a02d0a 	mov	r2, #640	; 0x280
   11b78:	e3a03e1e 	mov	r3, #480	; 0x1e0
   11b7c:	e1c420f0 	strd	r2, [r4]
   11b80:	e28d000c 	add	r0, sp, #12
   11b84:	eb0000e4 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11b88:	e594c008 	ldr	ip, [r4, #8]
   11b8c:	e5943010 	ldr	r3, [r4, #16]
   11b90:	e35c0000 	cmp	ip, #0
   11b94:	1a000016 	bne	11bf4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x120>
   11b98:	e8940006 	ldm	r4, {r1, r2}
   11b9c:	e3530008 	cmp	r3, #8
   11ba0:	e5841008 	str	r1, [r4, #8]
   11ba4:	e0222296 	mla	r2, r6, r2, r2
   11ba8:	e584200c 	str	r2, [r4, #12]
   11bac:	9a000015 	bls	11c08 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x134>
   11bb0:	e3a02070 	mov	r2, #112	; 0x70
   11bb4:	e2840028 	add	r0, r4, #40	; 0x28
   11bb8:	e30512b4 	movw	r1, #21172	; 0x52b4
   11bbc:	e3401001 	movt	r1, #1
   11bc0:	ebfffa2a 	bl	10470 <memcpy>
   11bc4:	e5941008 	ldr	r1, [r4, #8]
   11bc8:	e8940009 	ldm	r4, {r0, r3}
   11bcc:	e5843038 	str	r3, [r4, #56]	; 0x38
   11bd0:	e594200c 	ldr	r2, [r4, #12]
   11bd4:	e5943010 	ldr	r3, [r4, #16]
   11bd8:	e5840034 	str	r0, [r4, #52]	; 0x34
   11bdc:	e5841048 	str	r1, [r4, #72]	; 0x48
   11be0:	e584204c 	str	r2, [r4, #76]	; 0x4c
   11be4:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11be8:	e1a00004 	mov	r0, r4
   11bec:	e28dd028 	add	sp, sp, #40	; 0x28
   11bf0:	e8bd8070 	pop	{r4, r5, r6, pc}
   11bf4:	e594200c 	ldr	r2, [r4, #12]
   11bf8:	e3520000 	cmp	r2, #0
   11bfc:	0affffe5 	beq	11b98 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>
   11c00:	e3530008 	cmp	r3, #8
   11c04:	8affffe9 	bhi	11bb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xdc>
   11c08:	e3000414 	movw	r0, #1044	; 0x414
   11c0c:	ebfffb2a 	bl	108bc <operator new[](unsigned int)>
   11c10:	e3a02b01 	mov	r2, #1024	; 0x400
   11c14:	e1a03000 	mov	r3, r0
   11c18:	e3a01000 	mov	r1, #0
   11c1c:	e5843024 	str	r3, [r4, #36]	; 0x24
   11c20:	e2800014 	add	r0, r0, #20
   11c24:	ebfff7b2 	bl	faf4 <memset>
   11c28:	eaffffe0 	b	11bb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xdc>

00011c2c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   11c2c:	e92d4010 	push	{r4, lr}
   11c30:	e1a04000 	mov	r4, r0
   11c34:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   11c38:	e3500000 	cmp	r0, #0
   11c3c:	0a000001 	beq	11c48 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   11c40:	e3a01014 	mov	r1, #20
   11c44:	ebfffb2e 	bl	10904 <operator delete(void*, unsigned int)>
   11c48:	e1a00004 	mov	r0, r4
   11c4c:	e8bd8010 	pop	{r4, pc}

00011c50 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   11c50:	e5903010 	ldr	r3, [r0, #16]
   11c54:	e3530008 	cmp	r3, #8
   11c58:	812fff1e 	bxhi	lr
   11c5c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   11c60:	e1a03982 	lsl	r3, r2, #19
   11c64:	e1a0c5a2 	lsr	ip, r2, #11
   11c68:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   11c6c:	e1a02282 	lsl	r2, r2, #5
   11c70:	e0801101 	add	r1, r0, r1, lsl #2
   11c74:	e183318c 	orr	r3, r3, ip, lsl #3
   11c78:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   11c7c:	e1822003 	orr	r2, r2, r3
   11c80:	e38224ff 	orr	r2, r2, #-16777216	; 0xff000000
   11c84:	e5812014 	str	r2, [r1, #20]
   11c88:	e12fff1e 	bx	lr

00011c8c <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   11c8c:	e5903010 	ldr	r3, [r0, #16]
   11c90:	e3530008 	cmp	r3, #8
   11c94:	95903024 	ldrls	r3, [r0, #36]	; 0x24
   11c98:	90831101 	addls	r1, r3, r1, lsl #2
   11c9c:	95812014 	strls	r2, [r1, #20]
   11ca0:	e12fff1e 	bx	lr

00011ca4 <CBcmFrameBuffer::Initialize()>:
   11ca4:	e5901014 	ldr	r1, [r0, #20]
   11ca8:	e92d4030 	push	{r4, r5, lr}
   11cac:	e3510000 	cmp	r1, #0
   11cb0:	e24dd00c 	sub	sp, sp, #12
   11cb4:	13a05000 	movne	r5, #0
   11cb8:	0a000002 	beq	11cc8 <CBcmFrameBuffer::Initialize()+0x24>
   11cbc:	e1a00005 	mov	r0, r5
   11cc0:	e28dd00c 	add	sp, sp, #12
   11cc4:	e8bd8030 	pop	{r4, r5, pc}
   11cc8:	e1a04000 	mov	r4, r0
   11ccc:	e1a0000d 	mov	r0, sp
   11cd0:	eb00008a 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11cd4:	e3a02070 	mov	r2, #112	; 0x70
   11cd8:	e2841028 	add	r1, r4, #40	; 0x28
   11cdc:	e1a0000d 	mov	r0, sp
   11ce0:	eb000092 	bl	11f30 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   11ce4:	e2505000 	subs	r5, r0, #0
   11ce8:	0a00001f 	beq	11d6c <CBcmFrameBuffer::Initialize()+0xc8>
   11cec:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   11cf0:	e3530000 	cmp	r3, #0
   11cf4:	0a00001b 	beq	11d68 <CBcmFrameBuffer::Initialize()+0xc4>
   11cf8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   11cfc:	e3530000 	cmp	r3, #0
   11d00:	0a000018 	beq	11d68 <CBcmFrameBuffer::Initialize()+0xc4>
   11d04:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   11d08:	e3530000 	cmp	r3, #0
   11d0c:	0a000015 	beq	11d68 <CBcmFrameBuffer::Initialize()+0xc4>
   11d10:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   11d14:	e3530000 	cmp	r3, #0
   11d18:	0a000012 	beq	11d68 <CBcmFrameBuffer::Initialize()+0xc4>
   11d1c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   11d20:	e3530000 	cmp	r3, #0
   11d24:	0a00000f 	beq	11d68 <CBcmFrameBuffer::Initialize()+0xc4>
   11d28:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   11d2c:	e3530000 	cmp	r3, #0
   11d30:	0a00000c 	beq	11d68 <CBcmFrameBuffer::Initialize()+0xc4>
   11d34:	e5942010 	ldr	r2, [r4, #16]
   11d38:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   11d3c:	e5941084 	ldr	r1, [r4, #132]	; 0x84
   11d40:	e5843018 	str	r3, [r4, #24]
   11d44:	e3520008 	cmp	r2, #8
   11d48:	e5943094 	ldr	r3, [r4, #148]	; 0x94
   11d4c:	e584101c 	str	r1, [r4, #28]
   11d50:	e5843020 	str	r3, [r4, #32]
   11d54:	8a000004 	bhi	11d6c <CBcmFrameBuffer::Initialize()+0xc8>
   11d58:	e1a00004 	mov	r0, r4
   11d5c:	ebffff38 	bl	11a44 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   11d60:	e1a05000 	mov	r5, r0
   11d64:	ea000000 	b	11d6c <CBcmFrameBuffer::Initialize()+0xc8>
   11d68:	e1a05003 	mov	r5, r3
   11d6c:	e1a0000d 	mov	r0, sp
   11d70:	eb000069 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11d74:	e1a00005 	mov	r0, r5
   11d78:	e28dd00c 	add	sp, sp, #12
   11d7c:	e8bd8030 	pop	{r4, r5, pc}

00011d80 <CBcmFrameBuffer::GetWidth() const>:
   11d80:	e5900000 	ldr	r0, [r0]
   11d84:	e12fff1e 	bx	lr

00011d88 <CBcmFrameBuffer::GetHeight() const>:
   11d88:	e5900004 	ldr	r0, [r0, #4]
   11d8c:	e12fff1e 	bx	lr

00011d90 <CBcmFrameBuffer::GetVirtWidth() const>:
   11d90:	e5900008 	ldr	r0, [r0, #8]
   11d94:	e12fff1e 	bx	lr

00011d98 <CBcmFrameBuffer::GetVirtHeight() const>:
   11d98:	e590000c 	ldr	r0, [r0, #12]
   11d9c:	e12fff1e 	bx	lr

00011da0 <CBcmFrameBuffer::GetPitch() const>:
   11da0:	e5900020 	ldr	r0, [r0, #32]
   11da4:	e12fff1e 	bx	lr

00011da8 <CBcmFrameBuffer::GetDepth() const>:
   11da8:	e5900010 	ldr	r0, [r0, #16]
   11dac:	e12fff1e 	bx	lr

00011db0 <CBcmFrameBuffer::GetBuffer() const>:
   11db0:	e5900018 	ldr	r0, [r0, #24]
   11db4:	e12fff1e 	bx	lr

00011db8 <CBcmFrameBuffer::GetSize() const>:
   11db8:	e590001c 	ldr	r0, [r0, #28]
   11dbc:	e12fff1e 	bx	lr

00011dc0 <CBcmFrameBuffer::UpdatePalette()>:
   11dc0:	e5903010 	ldr	r3, [r0, #16]
   11dc4:	e3530008 	cmp	r3, #8
   11dc8:	9a000001 	bls	11dd4 <CBcmFrameBuffer::UpdatePalette()+0x14>
   11dcc:	e3a00001 	mov	r0, #1
   11dd0:	e12fff1e 	bx	lr
   11dd4:	eaffff1a 	b	11a44 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00011dd8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   11dd8:	e92d4070 	push	{r4, r5, r6, lr}
   11ddc:	e1a05001 	mov	r5, r1
   11de0:	e3a01000 	mov	r1, #0
   11de4:	e24dd028 	sub	sp, sp, #40	; 0x28
   11de8:	e1a06002 	mov	r6, r2
   11dec:	e28d000c 	add	r0, sp, #12
   11df0:	eb000042 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11df4:	e3a03014 	mov	r3, #20
   11df8:	e3a02008 	mov	r2, #8
   11dfc:	e28d000c 	add	r0, sp, #12
   11e00:	e58d2000 	str	r2, [sp]
   11e04:	e3081009 	movw	r1, #32777	; 0x8009
   11e08:	e3401004 	movt	r1, #4
   11e0c:	e08d2003 	add	r2, sp, r3
   11e10:	e58d5020 	str	r5, [sp, #32]
   11e14:	e58d6024 	str	r6, [sp, #36]	; 0x24
   11e18:	eb00007e 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11e1c:	e2504000 	subs	r4, r0, #0
   11e20:	0a000006 	beq	11e40 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   11e24:	e59d3020 	ldr	r3, [sp, #32]
   11e28:	e1530005 	cmp	r3, r5
   11e2c:	13a04000 	movne	r4, #0
   11e30:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   11e34:	00404006 	subeq	r4, r0, r6
   11e38:	016f4f14 	clzeq	r4, r4
   11e3c:	01a042a4 	lsreq	r4, r4, #5
   11e40:	e28d000c 	add	r0, sp, #12
   11e44:	eb000034 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11e48:	e1a00004 	mov	r0, r4
   11e4c:	e28dd028 	add	sp, sp, #40	; 0x28
   11e50:	e8bd8070 	pop	{r4, r5, r6, pc}

00011e54 <CBcmFrameBuffer::WaitForVerticalSync()>:
   11e54:	e92d4010 	push	{r4, lr}
   11e58:	e3a01000 	mov	r1, #0
   11e5c:	e24dd020 	sub	sp, sp, #32
   11e60:	e28d0008 	add	r0, sp, #8
   11e64:	eb000025 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11e68:	e3a03010 	mov	r3, #16
   11e6c:	e08d2003 	add	r2, sp, r3
   11e70:	e3a01000 	mov	r1, #0
   11e74:	e28d0008 	add	r0, sp, #8
   11e78:	e58d1000 	str	r1, [sp]
   11e7c:	e308100e 	movw	r1, #32782	; 0x800e
   11e80:	e3401004 	movt	r1, #4
   11e84:	eb000063 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11e88:	e1a04000 	mov	r4, r0
   11e8c:	e28d0008 	add	r0, sp, #8
   11e90:	eb000021 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11e94:	e1a00004 	mov	r0, r4
   11e98:	e28dd020 	add	sp, sp, #32
   11e9c:	e8bd8010 	pop	{r4, pc}

00011ea0 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   11ea0:	e92d4010 	push	{r4, lr}
   11ea4:	e1a04001 	mov	r4, r1
   11ea8:	e3a01000 	mov	r1, #0
   11eac:	e24dd020 	sub	sp, sp, #32
   11eb0:	e28d0008 	add	r0, sp, #8
   11eb4:	eb000011 	bl	11f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11eb8:	e3a03010 	mov	r3, #16
   11ebc:	e08d2003 	add	r2, sp, r3
   11ec0:	e3a01004 	mov	r1, #4
   11ec4:	e28d0008 	add	r0, sp, #8
   11ec8:	e58d1000 	str	r1, [sp]
   11ecc:	e308100f 	movw	r1, #32783	; 0x800f
   11ed0:	e3401004 	movt	r1, #4
   11ed4:	e58d401c 	str	r4, [sp, #28]
   11ed8:	eb00004e 	bl	12018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11edc:	e1a04000 	mov	r4, r0
   11ee0:	e28d0008 	add	r0, sp, #8
   11ee4:	eb00000c 	bl	11f1c <CBcmPropertyTags::~CBcmPropertyTags()>
   11ee8:	e1a00004 	mov	r0, r4
   11eec:	e28dd020 	add	sp, sp, #32
   11ef0:	e8bd8010 	pop	{r4, pc}

00011ef4 <CBcmFrameBuffer::SetDisplay()>:
   11ef4:	e12fff1e 	bx	lr

00011ef8 <CBcmFrameBuffer::GetNumDisplays()>:
   11ef8:	e3a00001 	mov	r0, #1
   11efc:	e12fff1e 	bx	lr

00011f00 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   11f00:	e1a02001 	mov	r2, r1
   11f04:	e92d4010 	push	{r4, lr}
   11f08:	e3a01008 	mov	r1, #8
   11f0c:	e1a04000 	mov	r4, r0
   11f10:	eb00062c 	bl	137c8 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   11f14:	e1a00004 	mov	r0, r4
   11f18:	e8bd8010 	pop	{r4, pc}

00011f1c <CBcmPropertyTags::~CBcmPropertyTags()>:
   11f1c:	e92d4010 	push	{r4, lr}
   11f20:	e1a04000 	mov	r4, r0
   11f24:	eb00062a 	bl	137d4 <CBcmMailBox::~CBcmMailBox()>
   11f28:	e1a00004 	mov	r0, r4
   11f2c:	e8bd8010 	pop	{r4, pc}

00011f30 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   11f30:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f34:	e2518000 	subs	r8, r1, #0
   11f38:	0a000027 	beq	11fdc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xac>
   11f3c:	e1a04002 	mov	r4, r2
   11f40:	e352000f 	cmp	r2, #15
   11f44:	9a000029 	bls	11ff0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc0>
   11f48:	e282700c 	add	r7, r2, #12
   11f4c:	e2126003 	ands	r6, r2, #3
   11f50:	1a00002b 	bne	12004 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd4>
   11f54:	e1a09000 	mov	r9, r0
   11f58:	e1a00006 	mov	r0, r6
   11f5c:	ebfffc8f 	bl	111a0 <CMemorySystem::GetCoherentPage(unsigned int)>
   11f60:	e5807000 	str	r7, [r0]
   11f64:	e2807008 	add	r7, r0, #8
   11f68:	e5c06004 	strb	r6, [r0, #4]
   11f6c:	e5c06005 	strb	r6, [r0, #5]
   11f70:	e1a05000 	mov	r5, r0
   11f74:	e5c06006 	strb	r6, [r0, #6]
   11f78:	e1a02004 	mov	r2, r4
   11f7c:	e5c06007 	strb	r6, [r0, #7]
   11f80:	e1a01008 	mov	r1, r8
   11f84:	e1a00007 	mov	r0, r7
   11f88:	ebfff938 	bl	10470 <memcpy>
   11f8c:	e7876004 	str	r6, [r7, r4]
   11f90:	f57ff04f 	dsb	sy
   11f94:	e3856103 	orr	r6, r5, #-1073741824	; 0xc0000000
   11f98:	e1a00009 	mov	r0, r9
   11f9c:	e1a01006 	mov	r1, r6
   11fa0:	eb00060c 	bl	137d8 <CBcmMailBox::WriteRead(unsigned int)>
   11fa4:	e1500006 	cmp	r0, r6
   11fa8:	0a000001 	beq	11fb4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>
   11fac:	e3a00000 	mov	r0, #0
   11fb0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fb4:	f57ff05f 	dmb	sy
   11fb8:	e5953004 	ldr	r3, [r5, #4]
   11fbc:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   11fc0:	1afffff9 	bne	11fac <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
   11fc4:	e1a02004 	mov	r2, r4
   11fc8:	e1a01007 	mov	r1, r7
   11fcc:	e1a00008 	mov	r0, r8
   11fd0:	ebfff926 	bl	10470 <memcpy>
   11fd4:	e3a00001 	mov	r0, #1
   11fd8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fdc:	e3051324 	movw	r1, #21284	; 0x5324
   11fe0:	e3401001 	movt	r1, #1
   11fe4:	e3a0204b 	mov	r2, #75	; 0x4b
   11fe8:	e2810014 	add	r0, r1, #20
   11fec:	ebffdd21 	bl	9478 <assertion_failed>
   11ff0:	e3051324 	movw	r1, #21284	; 0x5324
   11ff4:	e3401001 	movt	r1, #1
   11ff8:	e3a0204c 	mov	r2, #76	; 0x4c
   11ffc:	e2810020 	add	r0, r1, #32
   12000:	ebffdd1c 	bl	9478 <assertion_failed>
   12004:	e3051324 	movw	r1, #21284	; 0x5324
   12008:	e3401001 	movt	r1, #1
   1200c:	e3a0204e 	mov	r2, #78	; 0x4e
   12010:	e281004c 	add	r0, r1, #76	; 0x4c
   12014:	ebffdd17 	bl	9478 <assertion_failed>

00012018 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   12018:	e92d4010 	push	{r4, lr}
   1201c:	e2524000 	subs	r4, r2, #0
   12020:	0a000012 	beq	12070 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x58>
   12024:	e353000f 	cmp	r3, #15
   12028:	9a000015 	bls	12084 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x6c>
   1202c:	e243c00c 	sub	ip, r3, #12
   12030:	e1a02003 	mov	r2, r3
   12034:	e59d3008 	ldr	r3, [sp, #8]
   12038:	e5841000 	str	r1, [r4]
   1203c:	e1a01004 	mov	r1, r4
   12040:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   12044:	e584c004 	str	ip, [r4, #4]
   12048:	e5843008 	str	r3, [r4, #8]
   1204c:	ebffffb7 	bl	11f30 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12050:	e3500000 	cmp	r0, #0
   12054:	08bd8010 	popeq	{r4, pc}
   12058:	e5940008 	ldr	r0, [r4, #8]
   1205c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   12060:	e5840008 	str	r0, [r4, #8]
   12064:	e2500000 	subs	r0, r0, #0
   12068:	13a00001 	movne	r0, #1
   1206c:	e8bd8010 	pop	{r4, pc}
   12070:	e3051324 	movw	r1, #21284	; 0x5324
   12074:	e3401001 	movt	r1, #1
   12078:	e3a02033 	mov	r2, #51	; 0x33
   1207c:	e2810064 	add	r0, r1, #100	; 0x64
   12080:	ebffdcfc 	bl	9478 <assertion_failed>
   12084:	e3051324 	movw	r1, #21284	; 0x5324
   12088:	e3401001 	movt	r1, #1
   1208c:	e3a02034 	mov	r2, #52	; 0x34
   12090:	e2810070 	add	r0, r1, #112	; 0x70
   12094:	ebffdcf7 	bl	9478 <assertion_failed>

00012098 <CCharGenerator::CCharGenerator()>:
   12098:	e3a03008 	mov	r3, #8
   1209c:	e5803000 	str	r3, [r0]
   120a0:	e12fff1e 	bx	lr

000120a4 <CCharGenerator::~CCharGenerator()>:
   120a4:	e12fff1e 	bx	lr

000120a8 <CCharGenerator::GetCharWidth() const>:
   120a8:	e5900000 	ldr	r0, [r0]
   120ac:	e12fff1e 	bx	lr

000120b0 <CCharGenerator::GetCharHeight() const>:
   120b0:	e3a00013 	mov	r0, #19
   120b4:	e12fff1e 	bx	lr

000120b8 <CCharGenerator::GetUnderline() const>:
   120b8:	e3a00010 	mov	r0, #16
   120bc:	e12fff1e 	bx	lr

000120c0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   120c0:	e6ef1071 	uxtb	r1, r1
   120c4:	e2411021 	sub	r1, r1, #33	; 0x21
   120c8:	e35100de 	cmp	r1, #222	; 0xde
   120cc:	8a00000d 	bhi	12108 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   120d0:	e5900000 	ldr	r0, [r0]
   120d4:	e1500002 	cmp	r0, r2
   120d8:	9a00000c 	bls	12110 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   120dc:	e353000f 	cmp	r3, #15
   120e0:	8a000008 	bhi	12108 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   120e4:	e30503e8 	movw	r0, #21480	; 0x53e8
   120e8:	e3400001 	movt	r0, #1
   120ec:	e0801201 	add	r1, r0, r1, lsl #4
   120f0:	e3a00080 	mov	r0, #128	; 0x80
   120f4:	e7d13003 	ldrb	r3, [r1, r3]
   120f8:	e0133250 	ands	r3, r3, r0, asr r2
   120fc:	13a00001 	movne	r0, #1
   12100:	03a00000 	moveq	r0, #0
   12104:	e12fff1e 	bx	lr
   12108:	e3a00000 	mov	r0, #0
   1210c:	e12fff1e 	bx	lr
   12110:	e30513bc 	movw	r1, #21436	; 0x53bc
   12114:	e3401001 	movt	r1, #1
   12118:	e30503d0 	movw	r0, #21456	; 0x53d0
   1211c:	e3400001 	movt	r0, #1
   12120:	e3a0204e 	mov	r2, #78	; 0x4e
   12124:	e92d4010 	push	{r4, lr}
   12128:	ebffdcd2 	bl	9478 <assertion_failed>
   1212c:	00000000 	andeq	r0, r0, r0

00012130 <DelayLoop>:
   12130:	e1a01001 	mov	r1, r1
   12134:	e1a02002 	mov	r2, r2
   12138:	e2500001 	subs	r0, r0, #1
   1213c:	8afffffb 	bhi	12130 <DelayLoop>
   12140:	e1a0f00e 	mov	pc, lr

00012144 <CDevice::~CDevice()>:
   12144:	e5903004 	ldr	r3, [r0, #4]
   12148:	e59f2020 	ldr	r2, [pc, #32]	; 12170 <CDevice::~CDevice()+0x2c>
   1214c:	e92d4010 	push	{r4, lr}
   12150:	e3530000 	cmp	r3, #0
   12154:	e1a04000 	mov	r4, r0
   12158:	e5802000 	str	r2, [r0]
   1215c:	0a000001 	beq	12168 <CDevice::~CDevice()+0x24>
   12160:	e5901008 	ldr	r1, [r0, #8]
   12164:	e12fff33 	blx	r3
   12168:	e1a00004 	mov	r0, r4
   1216c:	e8bd8010 	pop	{r4, pc}
   12170:	000161e0 	.word	0x000161e0

00012174 <CDevice::Read(void*, unsigned int)>:
   12174:	e3e00000 	mvn	r0, #0
   12178:	e12fff1e 	bx	lr

0001217c <CDevice::Seek(unsigned long long)>:
   1217c:	e3e00000 	mvn	r0, #0
   12180:	e3e01000 	mvn	r1, #0
   12184:	e12fff1e 	bx	lr

00012188 <CDevice::RemoveDevice()>:
   12188:	e3a00000 	mov	r0, #0
   1218c:	e12fff1e 	bx	lr

00012190 <CDevice::~CDevice()>:
   12190:	e5903004 	ldr	r3, [r0, #4]
   12194:	e59f202c 	ldr	r2, [pc, #44]	; 121c8 <CDevice::~CDevice()+0x38>
   12198:	e92d4010 	push	{r4, lr}
   1219c:	e3530000 	cmp	r3, #0
   121a0:	e1a04000 	mov	r4, r0
   121a4:	e5802000 	str	r2, [r0]
   121a8:	0a000001 	beq	121b4 <CDevice::~CDevice()+0x24>
   121ac:	e5901008 	ldr	r1, [r0, #8]
   121b0:	e12fff33 	blx	r3
   121b4:	e1a00004 	mov	r0, r4
   121b8:	e3a0100c 	mov	r1, #12
   121bc:	ebfff9d0 	bl	10904 <operator delete(void*, unsigned int)>
   121c0:	e1a00004 	mov	r0, r4
   121c4:	e8bd8010 	pop	{r4, pc}
   121c8:	000161e0 	.word	0x000161e0

000121cc <CDevice::CDevice()>:
   121cc:	e59f1008 	ldr	r1, [pc, #8]	; 121dc <CDevice::CDevice()+0x10>
   121d0:	e3a02000 	mov	r2, #0
   121d4:	e8800006 	stm	r0, {r1, r2}
   121d8:	e12fff1e 	bx	lr
   121dc:	000161e0 	.word	0x000161e0

000121e0 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   121e0:	e9800006 	stmib	r0, {r1, r2}
   121e4:	e12fff1e 	bx	lr

000121e8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   121e8:	e92d4070 	push	{r4, r5, r6, lr}
   121ec:	e1a04000 	mov	r4, r0
   121f0:	e1a05001 	mov	r5, r1
   121f4:	e1a06002 	mov	r6, r2
   121f8:	ebffe72e 	bl	beb8 <CMachineInfo::Get()>
   121fc:	e1a01005 	mov	r1, r5
   12200:	e3a05000 	mov	r5, #0
   12204:	ebffe6d9 	bl	bd70 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   12208:	e5845008 	str	r5, [r4, #8]
   1220c:	e3500080 	cmp	r0, #128	; 0x80
   12210:	e8840021 	stm	r4, {r0, r5}
   12214:	e584600c 	str	r6, [r4, #12]
   12218:	e5c45010 	strb	r5, [r4, #16]
   1221c:	e5845014 	str	r5, [r4, #20]
   12220:	e5845018 	str	r5, [r4, #24]
   12224:	e5c4501c 	strb	r5, [r4, #28]
   12228:	0a00001d 	beq	122a4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xbc>
   1222c:	e350000b 	cmp	r0, #11
   12230:	8a000020 	bhi	122b8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd0>
   12234:	e1a01005 	mov	r1, r5
   12238:	e3a0003f 	mov	r0, #63	; 0x3f
   1223c:	ebfff98a 	bl	1086c <operator new[](unsigned int, int)>
   12240:	e280301f 	add	r3, r0, #31
   12244:	e3c3301f 	bic	r3, r3, #31
   12248:	e3a02a07 	mov	r2, #28672	; 0x7000
   1224c:	e3432f00 	movt	r2, #16128	; 0x3f00
   12250:	e9840009 	stmib	r4, {r0, r3}
   12254:	e5941000 	ldr	r1, [r4]
   12258:	e3a00001 	mov	r0, #1
   1225c:	e5835018 	str	r5, [r3, #24]
   12260:	e583501c 	str	r5, [r3, #28]
   12264:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   12268:	e1833110 	orr	r3, r3, r0, lsl r1
   1226c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   12270:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   12274:	ebfff5e0 	bl	f9fc <CTimer::SimpleusDelay(unsigned int)>
   12278:	e5942000 	ldr	r2, [r4]
   1227c:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   12280:	e282283f 	add	r2, r2, #4128768	; 0x3f0000
   12284:	e2822070 	add	r2, r2, #112	; 0x70
   12288:	e1a02402 	lsl	r2, r2, #8
   1228c:	e5823000 	str	r3, [r2]
   12290:	e5923000 	ldr	r3, [r2]
   12294:	e3530000 	cmp	r3, #0
   12298:	bafffffc 	blt	12290 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xa8>
   1229c:	e1a00004 	mov	r0, r4
   122a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   122a4:	e30611f8 	movw	r1, #25080	; 0x61f8
   122a8:	e3401001 	movt	r1, #1
   122ac:	e3a02039 	mov	r2, #57	; 0x39
   122b0:	e2810010 	add	r0, r1, #16
   122b4:	ebffdc6f 	bl	9478 <assertion_failed>
   122b8:	e30611f8 	movw	r1, #25080	; 0x61f8
   122bc:	e3401001 	movt	r1, #1
   122c0:	e3a0203a 	mov	r2, #58	; 0x3a
   122c4:	e2810030 	add	r0, r1, #48	; 0x30
   122c8:	ebffdc6a 	bl	9478 <assertion_failed>

000122cc <CDMAChannel::~CDMAChannel()>:
   122cc:	e5903000 	ldr	r3, [r0]
   122d0:	e92d4010 	push	{r4, lr}
   122d4:	e353000b 	cmp	r3, #11
   122d8:	8a00002c 	bhi	12390 <CDMAChannel::~CDMAChannel()+0xc4>
   122dc:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   122e0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   122e4:	e2833070 	add	r3, r3, #112	; 0x70
   122e8:	e1a04000 	mov	r4, r0
   122ec:	e1a03403 	lsl	r3, r3, #8
   122f0:	e5832000 	str	r2, [r3]
   122f4:	e5901000 	ldr	r1, [r0]
   122f8:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   122fc:	e2822070 	add	r2, r2, #112	; 0x70
   12300:	e1a02402 	lsl	r2, r2, #8
   12304:	e5923000 	ldr	r3, [r2]
   12308:	e3530000 	cmp	r3, #0
   1230c:	bafffffc 	blt	12304 <CDMAChannel::~CDMAChannel()+0x38>
   12310:	e3a03a07 	mov	r3, #28672	; 0x7000
   12314:	e3433f00 	movt	r3, #16128	; 0x3f00
   12318:	e594000c 	ldr	r0, [r4, #12]
   1231c:	e3a0e001 	mov	lr, #1
   12320:	e3a0c000 	mov	ip, #0
   12324:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   12328:	e150000c 	cmp	r0, ip
   1232c:	e1c2211e 	bic	r2, r2, lr, lsl r1
   12330:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   12334:	e584c014 	str	ip, [r4, #20]
   12338:	0a000009 	beq	12364 <CDMAChannel::~CDMAChannel()+0x98>
   1233c:	e5d43010 	ldrb	r3, [r4, #16]
   12340:	e153000c 	cmp	r3, ip
   12344:	0a000004 	beq	1235c <CDMAChannel::~CDMAChannel()+0x90>
   12348:	e5941000 	ldr	r1, [r4]
   1234c:	e351000c 	cmp	r1, #12
   12350:	8a000013 	bhi	123a4 <CDMAChannel::~CDMAChannel()+0xd8>
   12354:	e2811010 	add	r1, r1, #16
   12358:	ebfffc73 	bl	1152c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1235c:	e3a03000 	mov	r3, #0
   12360:	e584300c 	str	r3, [r4, #12]
   12364:	ebffe6d3 	bl	beb8 <CMachineInfo::Get()>
   12368:	e5941000 	ldr	r1, [r4]
   1236c:	ebffe6b0 	bl	be34 <CMachineInfo::FreeDMAChannel(unsigned int)>
   12370:	e5940004 	ldr	r0, [r4, #4]
   12374:	e3a03000 	mov	r3, #0
   12378:	e5843008 	str	r3, [r4, #8]
   1237c:	e1500003 	cmp	r0, r3
   12380:	0a000000 	beq	12388 <CDMAChannel::~CDMAChannel()+0xbc>
   12384:	ebfff958 	bl	108ec <operator delete[](void*)>
   12388:	e1a00004 	mov	r0, r4
   1238c:	e8bd8010 	pop	{r4, pc}
   12390:	e30611f8 	movw	r1, #25080	; 0x61f8
   12394:	e3401001 	movt	r1, #1
   12398:	e3a02062 	mov	r2, #98	; 0x62
   1239c:	e2810030 	add	r0, r1, #48	; 0x30
   123a0:	ebffdc34 	bl	9478 <assertion_failed>
   123a4:	e30611f8 	movw	r1, #25080	; 0x61f8
   123a8:	e3401001 	movt	r1, #1
   123ac:	e3a02074 	mov	r2, #116	; 0x74
   123b0:	e281004c 	add	r0, r1, #76	; 0x4c
   123b4:	ebffdc2f 	bl	9478 <assertion_failed>

000123b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   123b8:	e92d4070 	push	{r4, r5, r6, lr}
   123bc:	e2515000 	subs	r5, r1, #0
   123c0:	e59d6010 	ldr	r6, [sp, #16]
   123c4:	e5dd1014 	ldrb	r1, [sp, #20]
   123c8:	0a000035 	beq	124a4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xec>
   123cc:	e3520000 	cmp	r2, #0
   123d0:	0a000038 	beq	124b8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x100>
   123d4:	e1a04003 	mov	r4, r3
   123d8:	e3530000 	cmp	r3, #0
   123dc:	0a00003a 	beq	124cc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x114>
   123e0:	e356000f 	cmp	r6, #15
   123e4:	8a00003d 	bhi	124e0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x128>
   123e8:	e590c008 	ldr	ip, [r0, #8]
   123ec:	e1a0e000 	mov	lr, r0
   123f0:	e35c0000 	cmp	ip, #0
   123f4:	0a00003e 	beq	124f4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x13c>
   123f8:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   123fc:	8a000041 	bhi	12508 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x150>
   12400:	e5903000 	ldr	r3, [r0]
   12404:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12408:	e2833070 	add	r3, r3, #112	; 0x70
   1240c:	e1a03403 	lsl	r3, r3, #8
   12410:	e5933020 	ldr	r3, [r3, #32]
   12414:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   12418:	e7e03e53 	ubfx	r3, r3, #28, #1
   1241c:	e3540801 	cmp	r4, #65536	; 0x10000
   12420:	33833001 	orrcc	r3, r3, #1
   12424:	e3530000 	cmp	r3, #0
   12428:	0a00003b 	beq	1251c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x164>
   1242c:	e1a06606 	lsl	r6, r6, #12
   12430:	e3a03000 	mov	r3, #0
   12434:	e3866e33 	orr	r6, r6, #816	; 0x330
   12438:	e5cc3010 	strb	r3, [ip, #16]
   1243c:	e5cc3011 	strb	r3, [ip, #17]
   12440:	e3510000 	cmp	r1, #0
   12444:	e5cc3012 	strb	r3, [ip, #18]
   12448:	e5cc3013 	strb	r3, [ip, #19]
   1244c:	e5cc3014 	strb	r3, [ip, #20]
   12450:	e5cc3015 	strb	r3, [ip, #21]
   12454:	e5cc3016 	strb	r3, [ip, #22]
   12458:	e5cc3017 	strb	r3, [ip, #23]
   1245c:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   12460:	e58c6000 	str	r6, [ip]
   12464:	e58c3004 	str	r3, [ip, #4]
   12468:	e3853103 	orr	r3, r5, #-1073741824	; 0xc0000000
   1246c:	e58c400c 	str	r4, [ip, #12]
   12470:	e58c3008 	str	r3, [ip, #8]
   12474:	1a000001 	bne	12480 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xc8>
   12478:	e5801020 	str	r1, [r0, #32]
   1247c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12480:	e1a01004 	mov	r1, r4
   12484:	e1a00002 	mov	r0, r2
   12488:	e58e5020 	str	r5, [lr, #32]
   1248c:	e58e4024 	str	r4, [lr, #36]	; 0x24
   12490:	ebfffa70 	bl	10e58 <CleanAndInvalidateDataCacheRange>
   12494:	e1a01004 	mov	r1, r4
   12498:	e1a00005 	mov	r0, r5
   1249c:	e8bd4070 	pop	{r4, r5, r6, lr}
   124a0:	eafffa6c 	b	10e58 <CleanAndInvalidateDataCacheRange>
   124a4:	e30611f8 	movw	r1, #25080	; 0x61f8
   124a8:	e3401001 	movt	r1, #1
   124ac:	e3a0208f 	mov	r2, #143	; 0x8f
   124b0:	e2810060 	add	r0, r1, #96	; 0x60
   124b4:	ebffdbef 	bl	9478 <assertion_failed>
   124b8:	e30611f8 	movw	r1, #25080	; 0x61f8
   124bc:	e3401001 	movt	r1, #1
   124c0:	e3a02090 	mov	r2, #144	; 0x90
   124c4:	e2810074 	add	r0, r1, #116	; 0x74
   124c8:	ebffdbea 	bl	9478 <assertion_failed>
   124cc:	e30611f8 	movw	r1, #25080	; 0x61f8
   124d0:	e3401001 	movt	r1, #1
   124d4:	e3a02091 	mov	r2, #145	; 0x91
   124d8:	e2810084 	add	r0, r1, #132	; 0x84
   124dc:	ebffdbe5 	bl	9478 <assertion_failed>
   124e0:	e30611f8 	movw	r1, #25080	; 0x61f8
   124e4:	e3401001 	movt	r1, #1
   124e8:	e3a02092 	mov	r2, #146	; 0x92
   124ec:	e2810090 	add	r0, r1, #144	; 0x90
   124f0:	ebffdbe0 	bl	9478 <assertion_failed>
   124f4:	e30611f8 	movw	r1, #25080	; 0x61f8
   124f8:	e3401001 	movt	r1, #1
   124fc:	e3a02094 	mov	r2, #148	; 0x94
   12500:	e28100a4 	add	r0, r1, #164	; 0xa4
   12504:	ebffdbdb 	bl	9478 <assertion_failed>
   12508:	e30611f8 	movw	r1, #25080	; 0x61f8
   1250c:	e3401001 	movt	r1, #1
   12510:	e3a02095 	mov	r2, #149	; 0x95
   12514:	e28100bc 	add	r0, r1, #188	; 0xbc
   12518:	ebffdbd6 	bl	9478 <assertion_failed>
   1251c:	e30611f8 	movw	r1, #25080	; 0x61f8
   12520:	e3401001 	movt	r1, #1
   12524:	e3a02096 	mov	r2, #150	; 0x96
   12528:	e28100d4 	add	r0, r1, #212	; 0xd4
   1252c:	ebffdbd1 	bl	9478 <assertion_failed>

00012530 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   12530:	e92d4010 	push	{r4, lr}
   12534:	e1a0e000 	mov	lr, r0
   12538:	e2510000 	subs	r0, r1, #0
   1253c:	e5dd4008 	ldrb	r4, [sp, #8]
   12540:	0a000029 	beq	125ec <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xbc>
   12544:	e3530000 	cmp	r3, #0
   12548:	0a00002c 	beq	12600 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xd0>
   1254c:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   12550:	8a00002f 	bhi	12614 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe4>
   12554:	e59ec000 	ldr	ip, [lr]
   12558:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   1255c:	e28cc070 	add	ip, ip, #112	; 0x70
   12560:	e1a0c40c 	lsl	ip, ip, #8
   12564:	e59cc020 	ldr	ip, [ip, #32]
   12568:	e22cc201 	eor	ip, ip, #268435456	; 0x10000000
   1256c:	e7e0ce5c 	ubfx	ip, ip, #28, #1
   12570:	e3530801 	cmp	r3, #65536	; 0x10000
   12574:	338cc001 	orrcc	ip, ip, #1
   12578:	e35c0000 	cmp	ip, #0
   1257c:	0a000033 	beq	12650 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   12580:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   12584:	0a000027 	beq	12628 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xf8>
   12588:	e282c47e 	add	ip, r2, #2113929216	; 0x7e000000
   1258c:	e59e2008 	ldr	r2, [lr, #8]
   12590:	e3520000 	cmp	r2, #0
   12594:	0a000028 	beq	1263c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x10c>
   12598:	e3001438 	movw	r1, #1080	; 0x438
   1259c:	e582c004 	str	ip, [r2, #4]
   125a0:	e1814804 	orr	r4, r1, r4, lsl #16
   125a4:	e582300c 	str	r3, [r2, #12]
   125a8:	e5824000 	str	r4, [r2]
   125ac:	e3801103 	orr	r1, r0, #-1073741824	; 0xc0000000
   125b0:	e5821008 	str	r1, [r2, #8]
   125b4:	e3a01000 	mov	r1, #0
   125b8:	e5c21010 	strb	r1, [r2, #16]
   125bc:	e5c21011 	strb	r1, [r2, #17]
   125c0:	e5c21012 	strb	r1, [r2, #18]
   125c4:	e5c21013 	strb	r1, [r2, #19]
   125c8:	e5c21014 	strb	r1, [r2, #20]
   125cc:	e5c21015 	strb	r1, [r2, #21]
   125d0:	e5c21016 	strb	r1, [r2, #22]
   125d4:	e5c21017 	strb	r1, [r2, #23]
   125d8:	e1a01003 	mov	r1, r3
   125dc:	e58e0020 	str	r0, [lr, #32]
   125e0:	e58e3024 	str	r3, [lr, #36]	; 0x24
   125e4:	e8bd4010 	pop	{r4, lr}
   125e8:	eafffa1a 	b	10e58 <CleanAndInvalidateDataCacheRange>
   125ec:	e30611f8 	movw	r1, #25080	; 0x61f8
   125f0:	e3401001 	movt	r1, #1
   125f4:	e3a020bd 	mov	r2, #189	; 0xbd
   125f8:	e2810060 	add	r0, r1, #96	; 0x60
   125fc:	ebffdb9d 	bl	9478 <assertion_failed>
   12600:	e30611f8 	movw	r1, #25080	; 0x61f8
   12604:	e3401001 	movt	r1, #1
   12608:	e3a020be 	mov	r2, #190	; 0xbe
   1260c:	e2810084 	add	r0, r1, #132	; 0x84
   12610:	ebffdb98 	bl	9478 <assertion_failed>
   12614:	e30611f8 	movw	r1, #25080	; 0x61f8
   12618:	e3401001 	movt	r1, #1
   1261c:	e3a020bf 	mov	r2, #191	; 0xbf
   12620:	e28100bc 	add	r0, r1, #188	; 0xbc
   12624:	ebffdb93 	bl	9478 <assertion_failed>
   12628:	e30611f8 	movw	r1, #25080	; 0x61f8
   1262c:	e3401001 	movt	r1, #1
   12630:	e3a020c4 	mov	r2, #196	; 0xc4
   12634:	e2810f4b 	add	r0, r1, #300	; 0x12c
   12638:	ebffdb8e 	bl	9478 <assertion_failed>
   1263c:	e30611f8 	movw	r1, #25080	; 0x61f8
   12640:	e3401001 	movt	r1, #1
   12644:	e3a020c7 	mov	r2, #199	; 0xc7
   12648:	e28100a4 	add	r0, r1, #164	; 0xa4
   1264c:	ebffdb89 	bl	9478 <assertion_failed>
   12650:	e30611f8 	movw	r1, #25080	; 0x61f8
   12654:	e3401001 	movt	r1, #1
   12658:	e3a020c0 	mov	r2, #192	; 0xc0
   1265c:	e28100d4 	add	r0, r1, #212	; 0xd4
   12660:	ebffdb84 	bl	9478 <assertion_failed>

00012664 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   12664:	e92d4070 	push	{r4, r5, r6, lr}
   12668:	e1a04000 	mov	r4, r0
   1266c:	e2520000 	subs	r0, r2, #0
   12670:	e5dd5010 	ldrb	r5, [sp, #16]
   12674:	0a000029 	beq	12720 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xbc>
   12678:	e1a0c001 	mov	ip, r1
   1267c:	e3530000 	cmp	r3, #0
   12680:	e1a01003 	mov	r1, r3
   12684:	0a00002a 	beq	12734 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xd0>
   12688:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   1268c:	8a00002d 	bhi	12748 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xe4>
   12690:	e5943000 	ldr	r3, [r4]
   12694:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12698:	e2833070 	add	r3, r3, #112	; 0x70
   1269c:	e1a03403 	lsl	r3, r3, #8
   126a0:	e5933020 	ldr	r3, [r3, #32]
   126a4:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   126a8:	e7e03e53 	ubfx	r3, r3, #28, #1
   126ac:	e3510801 	cmp	r1, #65536	; 0x10000
   126b0:	33833001 	orrcc	r3, r3, #1
   126b4:	e3530000 	cmp	r3, #0
   126b8:	0a000031 	beq	12784 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   126bc:	e3dcc4ff 	bics	ip, ip, #-16777216	; 0xff000000
   126c0:	0a000025 	beq	1275c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xf8>
   126c4:	e28ce47e 	add	lr, ip, #2113929216	; 0x7e000000
   126c8:	e594c008 	ldr	ip, [r4, #8]
   126cc:	e35c0000 	cmp	ip, #0
   126d0:	0a000026 	beq	12770 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   126d4:	e1a05805 	lsl	r5, r5, #16
   126d8:	e3803103 	orr	r3, r0, #-1073741824	; 0xc0000000
   126dc:	e3855fd2 	orr	r5, r5, #840	; 0x348
   126e0:	e58ce008 	str	lr, [ip, #8]
   126e4:	e58c5000 	str	r5, [ip]
   126e8:	e58c3004 	str	r3, [ip, #4]
   126ec:	e3a03000 	mov	r3, #0
   126f0:	e58c100c 	str	r1, [ip, #12]
   126f4:	e5cc3010 	strb	r3, [ip, #16]
   126f8:	e5cc3011 	strb	r3, [ip, #17]
   126fc:	e5cc3012 	strb	r3, [ip, #18]
   12700:	e5cc3013 	strb	r3, [ip, #19]
   12704:	e5cc3014 	strb	r3, [ip, #20]
   12708:	e5cc3015 	strb	r3, [ip, #21]
   1270c:	e5cc3016 	strb	r3, [ip, #22]
   12710:	e5cc3017 	strb	r3, [ip, #23]
   12714:	e5843020 	str	r3, [r4, #32]
   12718:	e8bd4070 	pop	{r4, r5, r6, lr}
   1271c:	eafff9cd 	b	10e58 <CleanAndInvalidateDataCacheRange>
   12720:	e30611f8 	movw	r1, #25080	; 0x61f8
   12724:	e3401001 	movt	r1, #1
   12728:	e3a020e5 	mov	r2, #229	; 0xe5
   1272c:	e2810074 	add	r0, r1, #116	; 0x74
   12730:	ebffdb50 	bl	9478 <assertion_failed>
   12734:	e30611f8 	movw	r1, #25080	; 0x61f8
   12738:	e3401001 	movt	r1, #1
   1273c:	e3a020e6 	mov	r2, #230	; 0xe6
   12740:	e2810084 	add	r0, r1, #132	; 0x84
   12744:	ebffdb4b 	bl	9478 <assertion_failed>
   12748:	e30611f8 	movw	r1, #25080	; 0x61f8
   1274c:	e3401001 	movt	r1, #1
   12750:	e3a020e7 	mov	r2, #231	; 0xe7
   12754:	e28100bc 	add	r0, r1, #188	; 0xbc
   12758:	ebffdb46 	bl	9478 <assertion_failed>
   1275c:	e30611f8 	movw	r1, #25080	; 0x61f8
   12760:	e3401001 	movt	r1, #1
   12764:	e3a020ec 	mov	r2, #236	; 0xec
   12768:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1276c:	ebffdb41 	bl	9478 <assertion_failed>
   12770:	e30611f8 	movw	r1, #25080	; 0x61f8
   12774:	e3401001 	movt	r1, #1
   12778:	e3a020ef 	mov	r2, #239	; 0xef
   1277c:	e28100a4 	add	r0, r1, #164	; 0xa4
   12780:	ebffdb3c 	bl	9478 <assertion_failed>
   12784:	e30611f8 	movw	r1, #25080	; 0x61f8
   12788:	e3401001 	movt	r1, #1
   1278c:	e3a020e8 	mov	r2, #232	; 0xe8
   12790:	e28100d4 	add	r0, r1, #212	; 0xd4
   12794:	ebffdb37 	bl	9478 <assertion_failed>

00012798 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   12798:	e92d4070 	push	{r4, r5, r6, lr}
   1279c:	e3510000 	cmp	r1, #0
   127a0:	e59d4010 	ldr	r4, [sp, #16]
   127a4:	e59d5014 	ldr	r5, [sp, #20]
   127a8:	e59d6018 	ldr	r6, [sp, #24]
   127ac:	0a000033 	beq	12880 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   127b0:	e3520000 	cmp	r2, #0
   127b4:	0a000036 	beq	12894 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   127b8:	e3530000 	cmp	r3, #0
   127bc:	0a000039 	beq	128a8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   127c0:	e3530801 	cmp	r3, #65536	; 0x10000
   127c4:	2a00003c 	bcs	128bc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x124>
   127c8:	e3540000 	cmp	r4, #0
   127cc:	0a00003f 	beq	128d0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   127d0:	e3540901 	cmp	r4, #16384	; 0x4000
   127d4:	2a000042 	bcs	128e4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   127d8:	e3550801 	cmp	r5, #65536	; 0x10000
   127dc:	2a000022 	bcs	1286c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   127e0:	e356000f 	cmp	r6, #15
   127e4:	8a000043 	bhi	128f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
   127e8:	e1a0c000 	mov	ip, r0
   127ec:	e5900000 	ldr	r0, [r0]
   127f0:	e280083f 	add	r0, r0, #4128768	; 0x3f0000
   127f4:	e2800070 	add	r0, r0, #112	; 0x70
   127f8:	e1a00400 	lsl	r0, r0, #8
   127fc:	e5900020 	ldr	r0, [r0, #32]
   12800:	e3100201 	tst	r0, #268435456	; 0x10000000
   12804:	1a000040 	bne	1290c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x174>
   12808:	e59ce008 	ldr	lr, [ip, #8]
   1280c:	e35e0000 	cmp	lr, #0
   12810:	0a000042 	beq	12920 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   12814:	e2440001 	sub	r0, r4, #1
   12818:	e3811103 	orr	r1, r1, #-1073741824	; 0xc0000000
   1281c:	e58e1008 	str	r1, [lr, #8]
   12820:	e0010394 	mul	r1, r4, r3
   12824:	e1833800 	orr	r3, r3, r0, lsl #16
   12828:	e58e300c 	str	r3, [lr, #12]
   1282c:	e3003332 	movw	r3, #818	; 0x332
   12830:	e1a05805 	lsl	r5, r5, #16
   12834:	e1836606 	orr	r6, r3, r6, lsl #12
   12838:	e58e5010 	str	r5, [lr, #16]
   1283c:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   12840:	e58e6000 	str	r6, [lr]
   12844:	e58e3004 	str	r3, [lr, #4]
   12848:	e1a00002 	mov	r0, r2
   1284c:	e3a03000 	mov	r3, #0
   12850:	e5ce3014 	strb	r3, [lr, #20]
   12854:	e5ce3015 	strb	r3, [lr, #21]
   12858:	e5ce3016 	strb	r3, [lr, #22]
   1285c:	e5ce3017 	strb	r3, [lr, #23]
   12860:	e8bd4070 	pop	{r4, r5, r6, lr}
   12864:	e58c3020 	str	r3, [ip, #32]
   12868:	eafff97a 	b	10e58 <CleanAndInvalidateDataCacheRange>
   1286c:	e30611f8 	movw	r1, #25080	; 0x61f8
   12870:	e3401001 	movt	r1, #1
   12874:	e2810e19 	add	r0, r1, #400	; 0x190
   12878:	e3002115 	movw	r2, #277	; 0x115
   1287c:	ebffdafd 	bl	9478 <assertion_failed>
   12880:	e30611f8 	movw	r1, #25080	; 0x61f8
   12884:	e3401001 	movt	r1, #1
   12888:	e2810060 	add	r0, r1, #96	; 0x60
   1288c:	e300210f 	movw	r2, #271	; 0x10f
   12890:	ebffdaf8 	bl	9478 <assertion_failed>
   12894:	e30611f8 	movw	r1, #25080	; 0x61f8
   12898:	e3401001 	movt	r1, #1
   1289c:	e3a02e11 	mov	r2, #272	; 0x110
   128a0:	e2810074 	add	r0, r1, #116	; 0x74
   128a4:	ebffdaf3 	bl	9478 <assertion_failed>
   128a8:	e30611f8 	movw	r1, #25080	; 0x61f8
   128ac:	e3401001 	movt	r1, #1
   128b0:	e2810f4f 	add	r0, r1, #316	; 0x13c
   128b4:	e3002111 	movw	r2, #273	; 0x111
   128b8:	ebffdaee 	bl	9478 <assertion_failed>
   128bc:	e30611f8 	movw	r1, #25080	; 0x61f8
   128c0:	e3401001 	movt	r1, #1
   128c4:	e2810e15 	add	r0, r1, #336	; 0x150
   128c8:	e3002112 	movw	r2, #274	; 0x112
   128cc:	ebffdae9 	bl	9478 <assertion_failed>
   128d0:	e30611f8 	movw	r1, #25080	; 0x61f8
   128d4:	e3401001 	movt	r1, #1
   128d8:	e2810f5a 	add	r0, r1, #360	; 0x168
   128dc:	e3002113 	movw	r2, #275	; 0x113
   128e0:	ebffdae4 	bl	9478 <assertion_failed>
   128e4:	e30611f8 	movw	r1, #25080	; 0x61f8
   128e8:	e3401001 	movt	r1, #1
   128ec:	e3a02f45 	mov	r2, #276	; 0x114
   128f0:	e2810f5e 	add	r0, r1, #376	; 0x178
   128f4:	ebffdadf 	bl	9478 <assertion_failed>
   128f8:	e30611f8 	movw	r1, #25080	; 0x61f8
   128fc:	e3401001 	movt	r1, #1
   12900:	e2810090 	add	r0, r1, #144	; 0x90
   12904:	e3002116 	movw	r2, #278	; 0x116
   12908:	ebffdada 	bl	9478 <assertion_failed>
   1290c:	e30611f8 	movw	r1, #25080	; 0x61f8
   12910:	e3401001 	movt	r1, #1
   12914:	e3a02f46 	mov	r2, #280	; 0x118
   12918:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   1291c:	ebffdad5 	bl	9478 <assertion_failed>
   12920:	e30611f8 	movw	r1, #25080	; 0x61f8
   12924:	e3401001 	movt	r1, #1
   12928:	e28100a4 	add	r0, r1, #164	; 0xa4
   1292c:	e300211a 	movw	r2, #282	; 0x11a
   12930:	ebffdad0 	bl	9478 <assertion_failed>

00012934 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   12934:	e92d4070 	push	{r4, r5, r6, lr}
   12938:	e1a05001 	mov	r5, r1
   1293c:	e5901000 	ldr	r1, [r0]
   12940:	e351000c 	cmp	r1, #12
   12944:	8a000014 	bhi	1299c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   12948:	e1a04000 	mov	r4, r0
   1294c:	e590000c 	ldr	r0, [r0, #12]
   12950:	e3500000 	cmp	r0, #0
   12954:	0a000015 	beq	129b0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   12958:	e5d43010 	ldrb	r3, [r4, #16]
   1295c:	e1a06002 	mov	r6, r2
   12960:	e3530000 	cmp	r3, #0
   12964:	0a000004 	beq	1297c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   12968:	e3550000 	cmp	r5, #0
   1296c:	e5845014 	str	r5, [r4, #20]
   12970:	0a000013 	beq	129c4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   12974:	e5846018 	str	r6, [r4, #24]
   12978:	e8bd8070 	pop	{r4, r5, r6, pc}
   1297c:	e1a03004 	mov	r3, r4
   12980:	e2811010 	add	r1, r1, #16
   12984:	e3022cf4 	movw	r2, #11508	; 0x2cf4
   12988:	e3402001 	movt	r2, #1
   1298c:	ebfffab3 	bl	11460 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   12990:	e3a03001 	mov	r3, #1
   12994:	e5c43010 	strb	r3, [r4, #16]
   12998:	eafffff2 	b	12968 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   1299c:	e30611f8 	movw	r1, #25080	; 0x61f8
   129a0:	e3401001 	movt	r1, #1
   129a4:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   129a8:	e3002139 	movw	r2, #313	; 0x139
   129ac:	ebffdab1 	bl	9478 <assertion_failed>
   129b0:	e30611f8 	movw	r1, #25080	; 0x61f8
   129b4:	e3401001 	movt	r1, #1
   129b8:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   129bc:	e300213a 	movw	r2, #314	; 0x13a
   129c0:	ebffdaac 	bl	9478 <assertion_failed>
   129c4:	e30611f8 	movw	r1, #25080	; 0x61f8
   129c8:	e3401001 	movt	r1, #1
   129cc:	e3a02f51 	mov	r2, #324	; 0x144
   129d0:	e2810f85 	add	r0, r1, #532	; 0x214
   129d4:	ebffdaa7 	bl	9478 <assertion_failed>

000129d8 <CDMAChannel::Start()>:
   129d8:	e5902000 	ldr	r2, [r0]
   129dc:	e92d4010 	push	{r4, lr}
   129e0:	e352000b 	cmp	r2, #11
   129e4:	8a00002c 	bhi	12a9c <CDMAChannel::Start()+0xc4>
   129e8:	e1a04000 	mov	r4, r0
   129ec:	e5900008 	ldr	r0, [r0, #8]
   129f0:	e3500000 	cmp	r0, #0
   129f4:	0a00002d 	beq	12ab0 <CDMAChannel::Start()+0xd8>
   129f8:	e5943014 	ldr	r3, [r4, #20]
   129fc:	e3530000 	cmp	r3, #0
   12a00:	0a000008 	beq	12a28 <CDMAChannel::Start()+0x50>
   12a04:	e594300c 	ldr	r3, [r4, #12]
   12a08:	e3530000 	cmp	r3, #0
   12a0c:	0a000036 	beq	12aec <CDMAChannel::Start()+0x114>
   12a10:	e5d43010 	ldrb	r3, [r4, #16]
   12a14:	e3530000 	cmp	r3, #0
   12a18:	0a00001a 	beq	12a88 <CDMAChannel::Start()+0xb0>
   12a1c:	e5903000 	ldr	r3, [r0]
   12a20:	e3833001 	orr	r3, r3, #1
   12a24:	e5803000 	str	r3, [r0]
   12a28:	e282383f 	add	r3, r2, #4128768	; 0x3f0000
   12a2c:	e2833070 	add	r3, r3, #112	; 0x70
   12a30:	e1a03403 	lsl	r3, r3, #8
   12a34:	e5931000 	ldr	r1, [r3]
   12a38:	e3110004 	tst	r1, #4
   12a3c:	1a000020 	bne	12ac4 <CDMAChannel::Start()+0xec>
   12a40:	e3a01a07 	mov	r1, #28672	; 0x7000
   12a44:	e3431f00 	movt	r1, #16128	; 0x3f00
   12a48:	e3a0c001 	mov	ip, #1
   12a4c:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   12a50:	e011221c 	ands	r2, r1, ip, lsl r2
   12a54:	1a00001f 	bne	12ad8 <CDMAChannel::Start()+0x100>
   12a58:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   12a5c:	e3a01020 	mov	r1, #32
   12a60:	e5832004 	str	r2, [r3, #4]
   12a64:	ebfff8fb 	bl	10e58 <CleanAndInvalidateDataCacheRange>
   12a68:	e5943000 	ldr	r3, [r4]
   12a6c:	e3a02001 	mov	r2, #1
   12a70:	e34120f1 	movt	r2, #4337	; 0x10f1
   12a74:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12a78:	e2833070 	add	r3, r3, #112	; 0x70
   12a7c:	e1a03403 	lsl	r3, r3, #8
   12a80:	e5832000 	str	r2, [r3]
   12a84:	e8bd8010 	pop	{r4, pc}
   12a88:	e30611f8 	movw	r1, #25080	; 0x61f8
   12a8c:	e3401001 	movt	r1, #1
   12a90:	e2810e23 	add	r0, r1, #560	; 0x230
   12a94:	e300215a 	movw	r2, #346	; 0x15a
   12a98:	ebffda76 	bl	9478 <assertion_failed>
   12a9c:	e30611f8 	movw	r1, #25080	; 0x61f8
   12aa0:	e3401001 	movt	r1, #1
   12aa4:	e3a02f55 	mov	r2, #340	; 0x154
   12aa8:	e2810030 	add	r0, r1, #48	; 0x30
   12aac:	ebffda71 	bl	9478 <assertion_failed>
   12ab0:	e30611f8 	movw	r1, #25080	; 0x61f8
   12ab4:	e3401001 	movt	r1, #1
   12ab8:	e28100a4 	add	r0, r1, #164	; 0xa4
   12abc:	e3002155 	movw	r2, #341	; 0x155
   12ac0:	ebffda6c 	bl	9478 <assertion_failed>
   12ac4:	e30611f8 	movw	r1, #25080	; 0x61f8
   12ac8:	e3401001 	movt	r1, #1
   12acc:	e3a02e16 	mov	r2, #352	; 0x160
   12ad0:	e2810d09 	add	r0, r1, #576	; 0x240
   12ad4:	ebffda67 	bl	9478 <assertion_failed>
   12ad8:	e30611f8 	movw	r1, #25080	; 0x61f8
   12adc:	e3401001 	movt	r1, #1
   12ae0:	e2810f9d 	add	r0, r1, #628	; 0x274
   12ae4:	e3002161 	movw	r2, #353	; 0x161
   12ae8:	ebffda62 	bl	9478 <assertion_failed>
   12aec:	e30611f8 	movw	r1, #25080	; 0x61f8
   12af0:	e3401001 	movt	r1, #1
   12af4:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   12af8:	e3002159 	movw	r2, #345	; 0x159
   12afc:	ebffda5d 	bl	9478 <assertion_failed>

00012b00 <CDMAChannel::Wait()>:
   12b00:	e5902000 	ldr	r2, [r0]
   12b04:	e92d4010 	push	{r4, lr}
   12b08:	e352000b 	cmp	r2, #11
   12b0c:	8a000014 	bhi	12b64 <CDMAChannel::Wait()+0x64>
   12b10:	e5903014 	ldr	r3, [r0, #20]
   12b14:	e1a04000 	mov	r4, r0
   12b18:	e3530000 	cmp	r3, #0
   12b1c:	0282283f 	addeq	r2, r2, #4128768	; 0x3f0000
   12b20:	02822070 	addeq	r2, r2, #112	; 0x70
   12b24:	01a02402 	lsleq	r2, r2, #8
   12b28:	1a000012 	bne	12b78 <CDMAChannel::Wait()+0x78>
   12b2c:	e5923000 	ldr	r3, [r2]
   12b30:	e3130001 	tst	r3, #1
   12b34:	1afffffc 	bne	12b2c <CDMAChannel::Wait()+0x2c>
   12b38:	e5942020 	ldr	r2, [r4, #32]
   12b3c:	e2233c01 	eor	r3, r3, #256	; 0x100
   12b40:	e3520000 	cmp	r2, #0
   12b44:	e7e00453 	ubfx	r0, r3, #8, #1
   12b48:	e5c4001c 	strb	r0, [r4, #28]
   12b4c:	08bd8010 	popeq	{r4, pc}
   12b50:	e1a00002 	mov	r0, r2
   12b54:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   12b58:	ebfff8be 	bl	10e58 <CleanAndInvalidateDataCacheRange>
   12b5c:	e5d4001c 	ldrb	r0, [r4, #28]
   12b60:	e8bd8010 	pop	{r4, pc}
   12b64:	e30611f8 	movw	r1, #25080	; 0x61f8
   12b68:	e3401001 	movt	r1, #1
   12b6c:	e3a02f5e 	mov	r2, #376	; 0x178
   12b70:	e2810030 	add	r0, r1, #48	; 0x30
   12b74:	ebffda3f 	bl	9478 <assertion_failed>
   12b78:	e30611f8 	movw	r1, #25080	; 0x61f8
   12b7c:	e3401001 	movt	r1, #1
   12b80:	e2810faa 	add	r0, r1, #680	; 0x2a8
   12b84:	e3002179 	movw	r2, #377	; 0x179
   12b88:	ebffda3a 	bl	9478 <assertion_failed>

00012b8c <CDMAChannel::GetStatus()>:
   12b8c:	e5903000 	ldr	r3, [r0]
   12b90:	e92d4010 	push	{r4, lr}
   12b94:	e353000b 	cmp	r3, #11
   12b98:	8a000007 	bhi	12bbc <CDMAChannel::GetStatus()+0x30>
   12b9c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12ba0:	e2833070 	add	r3, r3, #112	; 0x70
   12ba4:	e1a03403 	lsl	r3, r3, #8
   12ba8:	e5933000 	ldr	r3, [r3]
   12bac:	e3130001 	tst	r3, #1
   12bb0:	1a000006 	bne	12bd0 <CDMAChannel::GetStatus()+0x44>
   12bb4:	e5d0001c 	ldrb	r0, [r0, #28]
   12bb8:	e8bd8010 	pop	{r4, pc}
   12bbc:	e30611f8 	movw	r1, #25080	; 0x61f8
   12bc0:	e3401001 	movt	r1, #1
   12bc4:	e3a02f66 	mov	r2, #408	; 0x198
   12bc8:	e2810030 	add	r0, r1, #48	; 0x30
   12bcc:	ebffda29 	bl	9478 <assertion_failed>
   12bd0:	e30611f8 	movw	r1, #25080	; 0x61f8
   12bd4:	e3401001 	movt	r1, #1
   12bd8:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   12bdc:	e3002199 	movw	r2, #409	; 0x199
   12be0:	ebffda24 	bl	9478 <assertion_failed>

00012be4 <CDMAChannel::InterruptHandler()>:
   12be4:	e92d4010 	push	{r4, lr}
   12be8:	e1a04000 	mov	r4, r0
   12bec:	e5900020 	ldr	r0, [r0, #32]
   12bf0:	e3500000 	cmp	r0, #0
   12bf4:	1a000020 	bne	12c7c <CDMAChannel::InterruptHandler()+0x98>
   12bf8:	e5941000 	ldr	r1, [r4]
   12bfc:	e351000b 	cmp	r1, #11
   12c00:	8a000022 	bhi	12c90 <CDMAChannel::InterruptHandler()+0xac>
   12c04:	e3a02a07 	mov	r2, #28672	; 0x7000
   12c08:	e3432f00 	movt	r2, #16128	; 0x3f00
   12c0c:	e3a03001 	mov	r3, #1
   12c10:	e5920fe0 	ldr	r0, [r2, #4064]	; 0xfe0
   12c14:	e1a03113 	lsl	r3, r3, r1
   12c18:	e1130000 	tst	r3, r0
   12c1c:	0a000020 	beq	12ca4 <CDMAChannel::InterruptHandler()+0xc0>
   12c20:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   12c24:	e5943000 	ldr	r3, [r4]
   12c28:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12c2c:	e2833070 	add	r3, r3, #112	; 0x70
   12c30:	e1a03403 	lsl	r3, r3, #8
   12c34:	e5931000 	ldr	r1, [r3]
   12c38:	e3110004 	tst	r1, #4
   12c3c:	0a00001d 	beq	12cb8 <CDMAChannel::InterruptHandler()+0xd4>
   12c40:	e3110001 	tst	r1, #1
   12c44:	1a000020 	bne	12ccc <CDMAChannel::InterruptHandler()+0xe8>
   12c48:	e594e014 	ldr	lr, [r4, #20]
   12c4c:	e2211c01 	eor	r1, r1, #256	; 0x100
   12c50:	e3a02004 	mov	r2, #4
   12c54:	e5832000 	str	r2, [r3]
   12c58:	e7e01451 	ubfx	r1, r1, #8, #1
   12c5c:	e35e0000 	cmp	lr, #0
   12c60:	e5c4101c 	strb	r1, [r4, #28]
   12c64:	0a00001d 	beq	12ce0 <CDMAChannel::InterruptHandler()+0xfc>
   12c68:	e5942018 	ldr	r2, [r4, #24]
   12c6c:	e1a0300e 	mov	r3, lr
   12c70:	e5940000 	ldr	r0, [r4]
   12c74:	e8bd4010 	pop	{r4, lr}
   12c78:	e12fff13 	bx	r3
   12c7c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   12c80:	ebfff874 	bl	10e58 <CleanAndInvalidateDataCacheRange>
   12c84:	e5941000 	ldr	r1, [r4]
   12c88:	e351000b 	cmp	r1, #11
   12c8c:	9affffdc 	bls	12c04 <CDMAChannel::InterruptHandler()+0x20>
   12c90:	e30611f8 	movw	r1, #25080	; 0x61f8
   12c94:	e3401001 	movt	r1, #1
   12c98:	e2810030 	add	r0, r1, #48	; 0x30
   12c9c:	e30021a7 	movw	r2, #423	; 0x1a7
   12ca0:	ebffd9f4 	bl	9478 <assertion_failed>
   12ca4:	e30611f8 	movw	r1, #25080	; 0x61f8
   12ca8:	e3401001 	movt	r1, #1
   12cac:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   12cb0:	e30021ad 	movw	r2, #429	; 0x1ad
   12cb4:	ebffd9ef 	bl	9478 <assertion_failed>
   12cb8:	e30611f8 	movw	r1, #25080	; 0x61f8
   12cbc:	e3401001 	movt	r1, #1
   12cc0:	e2810e31 	add	r0, r1, #784	; 0x310
   12cc4:	e30021b1 	movw	r2, #433	; 0x1b1
   12cc8:	ebffd9ea 	bl	9478 <assertion_failed>
   12ccc:	e30611f8 	movw	r1, #25080	; 0x61f8
   12cd0:	e3401001 	movt	r1, #1
   12cd4:	e2810e32 	add	r0, r1, #800	; 0x320
   12cd8:	e30021b2 	movw	r2, #434	; 0x1b2
   12cdc:	ebffd9e5 	bl	9478 <assertion_failed>
   12ce0:	e30611f8 	movw	r1, #25080	; 0x61f8
   12ce4:	e3401001 	movt	r1, #1
   12ce8:	e2810f85 	add	r0, r1, #532	; 0x214
   12cec:	e30021b9 	movw	r2, #441	; 0x1b9
   12cf0:	ebffd9e0 	bl	9478 <assertion_failed>

00012cf4 <CDMAChannel::InterruptStub(void*)>:
   12cf4:	e3500000 	cmp	r0, #0
   12cf8:	0a000000 	beq	12d00 <CDMAChannel::InterruptStub(void*)+0xc>
   12cfc:	eaffffb8 	b	12be4 <CDMAChannel::InterruptHandler()>
   12d00:	e30611f8 	movw	r1, #25080	; 0x61f8
   12d04:	e3401001 	movt	r1, #1
   12d08:	e3a02d07 	mov	r2, #448	; 0x1c0
   12d0c:	e2810fcd 	add	r0, r1, #820	; 0x334
   12d10:	e92d4010 	push	{r4, lr}
   12d14:	ebffd9d7 	bl	9478 <assertion_failed>

00012d18 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   12d18:	e1a03000 	mov	r3, r0
   12d1c:	e280c0dc 	add	ip, r0, #220	; 0xdc
   12d20:	e3a02000 	mov	r2, #0
   12d24:	e5801000 	str	r1, [r0]
   12d28:	e5e32004 	strb	r2, [r3, #4]!
   12d2c:	e5a32004 	str	r2, [r3, #4]!
   12d30:	e153000c 	cmp	r3, ip
   12d34:	1afffffc 	bne	12d2c <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   12d38:	e12fff1e 	bx	lr

00012d3c <CGPIOManager::~CGPIOManager()>:
   12d3c:	e92d4010 	push	{r4, lr}
   12d40:	e2803004 	add	r3, r0, #4
   12d44:	e1a04000 	mov	r4, r0
   12d48:	e28010dc 	add	r1, r0, #220	; 0xdc
   12d4c:	ea000001 	b	12d58 <CGPIOManager::~CGPIOManager()+0x1c>
   12d50:	e1530001 	cmp	r3, r1
   12d54:	0a000008 	beq	12d7c <CGPIOManager::~CGPIOManager()+0x40>
   12d58:	e5b32004 	ldr	r2, [r3, #4]!
   12d5c:	e3520000 	cmp	r2, #0
   12d60:	0afffffa 	beq	12d50 <CGPIOManager::~CGPIOManager()+0x14>
   12d64:	e3061538 	movw	r1, #25912	; 0x6538
   12d68:	e3401001 	movt	r1, #1
   12d6c:	e3060548 	movw	r0, #25928	; 0x6548
   12d70:	e3400001 	movt	r0, #1
   12d74:	e3a0202c 	mov	r2, #44	; 0x2c
   12d78:	ebffd9be 	bl	9478 <assertion_failed>
   12d7c:	e5d43004 	ldrb	r3, [r4, #4]
   12d80:	e3530000 	cmp	r3, #0
   12d84:	0a000004 	beq	12d9c <CGPIOManager::~CGPIOManager()+0x60>
   12d88:	e5940000 	ldr	r0, [r4]
   12d8c:	e3500000 	cmp	r0, #0
   12d90:	0a000003 	beq	12da4 <CGPIOManager::~CGPIOManager()+0x68>
   12d94:	e3a01034 	mov	r1, #52	; 0x34
   12d98:	ebfff9e3 	bl	1152c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   12d9c:	e1a00004 	mov	r0, r4
   12da0:	e8bd8010 	pop	{r4, pc}
   12da4:	e3061538 	movw	r1, #25912	; 0x6538
   12da8:	e3401001 	movt	r1, #1
   12dac:	e306055c 	movw	r0, #25948	; 0x655c
   12db0:	e3400001 	movt	r0, #1
   12db4:	e3a02032 	mov	r2, #50	; 0x32
   12db8:	ebffd9ae 	bl	9478 <assertion_failed>

00012dbc <CGPIOManager::Initialize()>:
   12dbc:	e5d03004 	ldrb	r3, [r0, #4]
   12dc0:	e92d4010 	push	{r4, lr}
   12dc4:	e3530000 	cmp	r3, #0
   12dc8:	1a00000b 	bne	12dfc <CGPIOManager::Initialize()+0x40>
   12dcc:	e1a04000 	mov	r4, r0
   12dd0:	e5900000 	ldr	r0, [r0]
   12dd4:	e3500000 	cmp	r0, #0
   12dd8:	0a00000d 	beq	12e14 <CGPIOManager::Initialize()+0x58>
   12ddc:	e1a03004 	mov	r3, r4
   12de0:	e3a01034 	mov	r1, #52	; 0x34
   12de4:	e3032028 	movw	r2, #12328	; 0x3028
   12de8:	e3402001 	movt	r2, #1
   12dec:	ebfff99b 	bl	11460 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   12df0:	e3a00001 	mov	r0, #1
   12df4:	e5c40004 	strb	r0, [r4, #4]
   12df8:	e8bd8010 	pop	{r4, pc}
   12dfc:	e3061538 	movw	r1, #25912	; 0x6538
   12e00:	e3401001 	movt	r1, #1
   12e04:	e3060570 	movw	r0, #25968	; 0x6570
   12e08:	e3400001 	movt	r0, #1
   12e0c:	e3a0203b 	mov	r2, #59	; 0x3b
   12e10:	ebffd998 	bl	9478 <assertion_failed>
   12e14:	e3061538 	movw	r1, #25912	; 0x6538
   12e18:	e3401001 	movt	r1, #1
   12e1c:	e306055c 	movw	r0, #25948	; 0x655c
   12e20:	e3400001 	movt	r0, #1
   12e24:	e3a0203c 	mov	r2, #60	; 0x3c
   12e28:	ebffd992 	bl	9478 <assertion_failed>

00012e2c <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   12e2c:	e5d03004 	ldrb	r3, [r0, #4]
   12e30:	e92d4010 	push	{r4, lr}
   12e34:	e3530000 	cmp	r3, #0
   12e38:	0a00000a 	beq	12e68 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   12e3c:	e3510000 	cmp	r1, #0
   12e40:	0a00000e 	beq	12e80 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   12e44:	e5913004 	ldr	r3, [r1, #4]
   12e48:	e3530035 	cmp	r3, #53	; 0x35
   12e4c:	8a000011 	bhi	12e98 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   12e50:	e0800103 	add	r0, r0, r3, lsl #2
   12e54:	e5903008 	ldr	r3, [r0, #8]
   12e58:	e3530000 	cmp	r3, #0
   12e5c:	1a000013 	bne	12eb0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   12e60:	e5801008 	str	r1, [r0, #8]
   12e64:	e8bd8010 	pop	{r4, pc}
   12e68:	e3061538 	movw	r1, #25912	; 0x6538
   12e6c:	e3401001 	movt	r1, #1
   12e70:	e3060584 	movw	r0, #25988	; 0x6584
   12e74:	e3400001 	movt	r0, #1
   12e78:	e3a02045 	mov	r2, #69	; 0x45
   12e7c:	ebffd97d 	bl	9478 <assertion_failed>
   12e80:	e3061538 	movw	r1, #25912	; 0x6538
   12e84:	e3401001 	movt	r1, #1
   12e88:	e3060594 	movw	r0, #26004	; 0x6594
   12e8c:	e3400001 	movt	r0, #1
   12e90:	e3a02047 	mov	r2, #71	; 0x47
   12e94:	ebffd977 	bl	9478 <assertion_failed>
   12e98:	e3061538 	movw	r1, #25912	; 0x6538
   12e9c:	e3401001 	movt	r1, #1
   12ea0:	e30605a0 	movw	r0, #26016	; 0x65a0
   12ea4:	e3400001 	movt	r0, #1
   12ea8:	e3a02049 	mov	r2, #73	; 0x49
   12eac:	ebffd971 	bl	9478 <assertion_failed>
   12eb0:	e3061538 	movw	r1, #25912	; 0x6538
   12eb4:	e3401001 	movt	r1, #1
   12eb8:	e3060548 	movw	r0, #25928	; 0x6548
   12ebc:	e3400001 	movt	r0, #1
   12ec0:	e3a0204b 	mov	r2, #75	; 0x4b
   12ec4:	ebffd96b 	bl	9478 <assertion_failed>

00012ec8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   12ec8:	e5d03004 	ldrb	r3, [r0, #4]
   12ecc:	e92d4010 	push	{r4, lr}
   12ed0:	e3530000 	cmp	r3, #0
   12ed4:	0a00000b 	beq	12f08 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   12ed8:	e3510000 	cmp	r1, #0
   12edc:	0a00000f 	beq	12f20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   12ee0:	e5913004 	ldr	r3, [r1, #4]
   12ee4:	e3530035 	cmp	r3, #53	; 0x35
   12ee8:	8a000012 	bhi	12f38 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   12eec:	e0800103 	add	r0, r0, r3, lsl #2
   12ef0:	e5903008 	ldr	r3, [r0, #8]
   12ef4:	e3530000 	cmp	r3, #0
   12ef8:	0a000014 	beq	12f50 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   12efc:	e3a03000 	mov	r3, #0
   12f00:	e5803008 	str	r3, [r0, #8]
   12f04:	e8bd8010 	pop	{r4, pc}
   12f08:	e3061538 	movw	r1, #25912	; 0x6538
   12f0c:	e3401001 	movt	r1, #1
   12f10:	e3060584 	movw	r0, #25988	; 0x6584
   12f14:	e3400001 	movt	r0, #1
   12f18:	e3a02052 	mov	r2, #82	; 0x52
   12f1c:	ebffd955 	bl	9478 <assertion_failed>
   12f20:	e3061538 	movw	r1, #25912	; 0x6538
   12f24:	e3401001 	movt	r1, #1
   12f28:	e3060594 	movw	r0, #26004	; 0x6594
   12f2c:	e3400001 	movt	r0, #1
   12f30:	e3a02054 	mov	r2, #84	; 0x54
   12f34:	ebffd94f 	bl	9478 <assertion_failed>
   12f38:	e3061538 	movw	r1, #25912	; 0x6538
   12f3c:	e3401001 	movt	r1, #1
   12f40:	e30605a0 	movw	r0, #26016	; 0x65a0
   12f44:	e3400001 	movt	r0, #1
   12f48:	e3a02056 	mov	r2, #86	; 0x56
   12f4c:	ebffd949 	bl	9478 <assertion_failed>
   12f50:	e3061538 	movw	r1, #25912	; 0x6538
   12f54:	e3401001 	movt	r1, #1
   12f58:	e30605b4 	movw	r0, #26036	; 0x65b4
   12f5c:	e3400001 	movt	r0, #1
   12f60:	e3a02058 	mov	r2, #88	; 0x58
   12f64:	ebffd943 	bl	9478 <assertion_failed>

00012f68 <CGPIOManager::InterruptHandler()>:
   12f68:	e5d03004 	ldrb	r3, [r0, #4]
   12f6c:	e92d4070 	push	{r4, r5, r6, lr}
   12f70:	e3530000 	cmp	r3, #0
   12f74:	0a000025 	beq	13010 <CGPIOManager::InterruptHandler()+0xa8>
   12f78:	e3a02000 	mov	r2, #0
   12f7c:	e3432f20 	movt	r2, #16160	; 0x3f20
   12f80:	e3a04000 	mov	r4, #0
   12f84:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   12f88:	ea000005 	b	12fa4 <CGPIOManager::InterruptHandler()+0x3c>
   12f8c:	e2844001 	add	r4, r4, #1
   12f90:	e314001f 	tst	r4, #31
   12f94:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   12f98:	11a030a3 	lsrne	r3, r3, #1
   12f9c:	e3540036 	cmp	r4, #54	; 0x36
   12fa0:	08bd8070 	popeq	{r4, r5, r6, pc}
   12fa4:	e3130001 	tst	r3, #1
   12fa8:	0afffff7 	beq	12f8c <CGPIOManager::InterruptHandler()+0x24>
   12fac:	e2843002 	add	r3, r4, #2
   12fb0:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   12fb4:	e3550000 	cmp	r5, #0
   12fb8:	0a000009 	beq	12fe4 <CGPIOManager::InterruptHandler()+0x7c>
   12fbc:	e1a00005 	mov	r0, r5
   12fc0:	ebffddf1 	bl	a78c <CGPIOPin::InterruptHandler()>
   12fc4:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   12fc8:	e3530000 	cmp	r3, #0
   12fcc:	13a03040 	movne	r3, #64	; 0x40
   12fd0:	13433f20 	movtne	r3, #16160	; 0x3f20
   12fd4:	15952008 	ldrne	r2, [r5, #8]
   12fd8:	1595100c 	ldrne	r1, [r5, #12]
   12fdc:	17821003 	strne	r1, [r2, r3]
   12fe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   12fe4:	e1a00004 	mov	r0, r4
   12fe8:	ebffde06 	bl	a808 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   12fec:	e3a03010 	mov	r3, #16
   12ff0:	e3403fc8 	movt	r3, #4040	; 0xfc8
   12ff4:	e204101f 	and	r1, r4, #31
   12ff8:	e08332a4 	add	r3, r3, r4, lsr #5
   12ffc:	e3a02001 	mov	r2, #1
   13000:	e1a03103 	lsl	r3, r3, #2
   13004:	e1a02112 	lsl	r2, r2, r1
   13008:	e5832000 	str	r2, [r3]
   1300c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13010:	e3061538 	movw	r1, #25912	; 0x6538
   13014:	e3401001 	movt	r1, #1
   13018:	e3060584 	movw	r0, #25988	; 0x6584
   1301c:	e3400001 	movt	r0, #1
   13020:	e3a0205e 	mov	r2, #94	; 0x5e
   13024:	ebffd913 	bl	9478 <assertion_failed>

00013028 <CGPIOManager::InterruptStub(void*)>:
   13028:	e3500000 	cmp	r0, #0
   1302c:	0a000000 	beq	13034 <CGPIOManager::InterruptStub(void*)+0xc>
   13030:	eaffffcc 	b	12f68 <CGPIOManager::InterruptHandler()>
   13034:	e3061538 	movw	r1, #25912	; 0x6538
   13038:	e3401001 	movt	r1, #1
   1303c:	e30605c8 	movw	r0, #26056	; 0x65c8
   13040:	e3400001 	movt	r0, #1
   13044:	e3a0208e 	mov	r2, #142	; 0x8e
   13048:	e92d4010 	push	{r4, lr}
   1304c:	ebffd909 	bl	9478 <assertion_failed>

00013050 <CPtrList::CPtrList()>:
   13050:	e3a02000 	mov	r2, #0
   13054:	e5802000 	str	r2, [r0]
   13058:	e12fff1e 	bx	lr

0001305c <CPtrList::~CPtrList()>:
   1305c:	e5903000 	ldr	r3, [r0]
   13060:	e3530000 	cmp	r3, #0
   13064:	012fff1e 	bxeq	lr
   13068:	e30615d4 	movw	r1, #26068	; 0x65d4
   1306c:	e3401001 	movt	r1, #1
   13070:	e30605e0 	movw	r0, #26080	; 0x65e0
   13074:	e3400001 	movt	r0, #1
   13078:	e3a0202a 	mov	r2, #42	; 0x2a
   1307c:	e92d4010 	push	{r4, lr}
   13080:	ebffd8fc 	bl	9478 <assertion_failed>

00013084 <CPtrList::GetFirst()>:
   13084:	e5900000 	ldr	r0, [r0]
   13088:	e12fff1e 	bx	lr

0001308c <CPtrList::GetNext(TPtrListElement*)>:
   1308c:	e3510000 	cmp	r1, #0
   13090:	e92d4010 	push	{r4, lr}
   13094:	0a000006 	beq	130b4 <CPtrList::GetNext(TPtrListElement*)+0x28>
   13098:	e5912000 	ldr	r2, [r1]
   1309c:	e3043d43 	movw	r3, #19779	; 0x4d43
   130a0:	e345304c 	movt	r3, #20556	; 0x504c
   130a4:	e1520003 	cmp	r2, r3
   130a8:	1a000007 	bne	130cc <CPtrList::GetNext(TPtrListElement*)+0x40>
   130ac:	e5910008 	ldr	r0, [r1, #8]
   130b0:	e8bd8010 	pop	{r4, pc}
   130b4:	e30615d4 	movw	r1, #26068	; 0x65d4
   130b8:	e3401001 	movt	r1, #1
   130bc:	e30605f0 	movw	r0, #26096	; 0x65f0
   130c0:	e3400001 	movt	r0, #1
   130c4:	e3a02034 	mov	r2, #52	; 0x34
   130c8:	ebffd8ea 	bl	9478 <assertion_failed>
   130cc:	e30615d4 	movw	r1, #26068	; 0x65d4
   130d0:	e3401001 	movt	r1, #1
   130d4:	e3060600 	movw	r0, #26112	; 0x6600
   130d8:	e3400001 	movt	r0, #1
   130dc:	e3a02035 	mov	r2, #53	; 0x35
   130e0:	ebffd8e4 	bl	9478 <assertion_failed>

000130e4 <CPtrList::GetPtr(TPtrListElement*)>:
   130e4:	e3510000 	cmp	r1, #0
   130e8:	e92d4010 	push	{r4, lr}
   130ec:	0a000006 	beq	1310c <CPtrList::GetPtr(TPtrListElement*)+0x28>
   130f0:	e5912000 	ldr	r2, [r1]
   130f4:	e3043d43 	movw	r3, #19779	; 0x4d43
   130f8:	e345304c 	movt	r3, #20556	; 0x504c
   130fc:	e1520003 	cmp	r2, r3
   13100:	1a000007 	bne	13124 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   13104:	e591000c 	ldr	r0, [r1, #12]
   13108:	e8bd8010 	pop	{r4, pc}
   1310c:	e30615d4 	movw	r1, #26068	; 0x65d4
   13110:	e3401001 	movt	r1, #1
   13114:	e30605f0 	movw	r0, #26096	; 0x65f0
   13118:	e3400001 	movt	r0, #1
   1311c:	e3a0203c 	mov	r2, #60	; 0x3c
   13120:	ebffd8d4 	bl	9478 <assertion_failed>
   13124:	e30615d4 	movw	r1, #26068	; 0x65d4
   13128:	e3401001 	movt	r1, #1
   1312c:	e3060600 	movw	r0, #26112	; 0x6600
   13130:	e3400001 	movt	r0, #1
   13134:	e3a0203d 	mov	r2, #61	; 0x3d
   13138:	ebffd8ce 	bl	9478 <assertion_failed>

0001313c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   1313c:	e92d4070 	push	{r4, r5, r6, lr}
   13140:	e1a05000 	mov	r5, r0
   13144:	e3a00010 	mov	r0, #16
   13148:	e1a06002 	mov	r6, r2
   1314c:	e1a04001 	mov	r4, r1
   13150:	ebfff5d3 	bl	108a4 <operator new(unsigned int)>
   13154:	e5952000 	ldr	r2, [r5]
   13158:	e3043d43 	movw	r3, #19779	; 0x4d43
   1315c:	e345304c 	movt	r3, #20556	; 0x504c
   13160:	e3520000 	cmp	r2, #0
   13164:	e5803000 	str	r3, [r0]
   13168:	e580600c 	str	r6, [r0, #12]
   1316c:	0a000016 	beq	131cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   13170:	e3540000 	cmp	r4, #0
   13174:	0a00001a 	beq	131e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   13178:	e5941000 	ldr	r1, [r4]
   1317c:	e1510003 	cmp	r1, r3
   13180:	1a00001d 	bne	131fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   13184:	e1520004 	cmp	r2, r4
   13188:	0a000009 	beq	131b4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   1318c:	e5943004 	ldr	r3, [r4, #4]
   13190:	e9800018 	stmib	r0, {r3, r4}
   13194:	e3530000 	cmp	r3, #0
   13198:	0a000003 	beq	131ac <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   1319c:	e5932000 	ldr	r2, [r3]
   131a0:	e1520001 	cmp	r2, r1
   131a4:	05830008 	streq	r0, [r3, #8]
   131a8:	1a000019 	bne	13214 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   131ac:	e5840004 	str	r0, [r4, #4]
   131b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   131b4:	e3a03000 	mov	r3, #0
   131b8:	e5820004 	str	r0, [r2, #4]
   131bc:	e5803004 	str	r3, [r0, #4]
   131c0:	e5802008 	str	r2, [r0, #8]
   131c4:	e5850000 	str	r0, [r5]
   131c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   131cc:	e30615d4 	movw	r1, #26068	; 0x65d4
   131d0:	e3401001 	movt	r1, #1
   131d4:	e3060624 	movw	r0, #26148	; 0x6624
   131d8:	e3400001 	movt	r0, #1
   131dc:	e3a0204c 	mov	r2, #76	; 0x4c
   131e0:	ebffd8a4 	bl	9478 <assertion_failed>
   131e4:	e30615d4 	movw	r1, #26068	; 0x65d4
   131e8:	e3401001 	movt	r1, #1
   131ec:	e3060634 	movw	r0, #26164	; 0x6634
   131f0:	e3400001 	movt	r0, #1
   131f4:	e3a0204d 	mov	r2, #77	; 0x4d
   131f8:	ebffd89e 	bl	9478 <assertion_failed>
   131fc:	e30615d4 	movw	r1, #26068	; 0x65d4
   13200:	e3401001 	movt	r1, #1
   13204:	e3060640 	movw	r0, #26176	; 0x6640
   13208:	e3400001 	movt	r0, #1
   1320c:	e3a0204e 	mov	r2, #78	; 0x4e
   13210:	ebffd898 	bl	9478 <assertion_failed>
   13214:	e30615d4 	movw	r1, #26068	; 0x65d4
   13218:	e3401001 	movt	r1, #1
   1321c:	e3060664 	movw	r0, #26212	; 0x6664
   13220:	e3400001 	movt	r0, #1
   13224:	e3a02060 	mov	r2, #96	; 0x60
   13228:	ebffd892 	bl	9478 <assertion_failed>

0001322c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   1322c:	e92d4070 	push	{r4, r5, r6, lr}
   13230:	e1a04001 	mov	r4, r1
   13234:	e1a05000 	mov	r5, r0
   13238:	e3a00010 	mov	r0, #16
   1323c:	e1a06002 	mov	r6, r2
   13240:	ebfff597 	bl	108a4 <operator new(unsigned int)>
   13244:	e3043d43 	movw	r3, #19779	; 0x4d43
   13248:	e345304c 	movt	r3, #20556	; 0x504c
   1324c:	e3540000 	cmp	r4, #0
   13250:	e5803000 	str	r3, [r0]
   13254:	e580600c 	str	r6, [r0, #12]
   13258:	0a000010 	beq	132a0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   1325c:	e5952000 	ldr	r2, [r5]
   13260:	e3520000 	cmp	r2, #0
   13264:	0a000014 	beq	132bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   13268:	e5942000 	ldr	r2, [r4]
   1326c:	e1520003 	cmp	r2, r3
   13270:	1a000017 	bne	132d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   13274:	e5943008 	ldr	r3, [r4, #8]
   13278:	e5804004 	str	r4, [r0, #4]
   1327c:	e3530000 	cmp	r3, #0
   13280:	e5803008 	str	r3, [r0, #8]
   13284:	0a000003 	beq	13298 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   13288:	e5931000 	ldr	r1, [r3]
   1328c:	e1510002 	cmp	r1, r2
   13290:	05830004 	streq	r0, [r3, #4]
   13294:	1a000014 	bne	132ec <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   13298:	e5840008 	str	r0, [r4, #8]
   1329c:	e8bd8070 	pop	{r4, r5, r6, pc}
   132a0:	e5953000 	ldr	r3, [r5]
   132a4:	e3530000 	cmp	r3, #0
   132a8:	1a000015 	bne	13304 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   132ac:	e5803004 	str	r3, [r0, #4]
   132b0:	e5803008 	str	r3, [r0, #8]
   132b4:	e5850000 	str	r0, [r5]
   132b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   132bc:	e30615d4 	movw	r1, #26068	; 0x65d4
   132c0:	e3401001 	movt	r1, #1
   132c4:	e3060624 	movw	r0, #26148	; 0x6624
   132c8:	e3400001 	movt	r0, #1
   132cc:	e3a0207d 	mov	r2, #125	; 0x7d
   132d0:	ebffd868 	bl	9478 <assertion_failed>
   132d4:	e30615d4 	movw	r1, #26068	; 0x65d4
   132d8:	e3401001 	movt	r1, #1
   132dc:	e306068c 	movw	r0, #26252	; 0x668c
   132e0:	e3400001 	movt	r0, #1
   132e4:	e3a0207e 	mov	r2, #126	; 0x7e
   132e8:	ebffd862 	bl	9478 <assertion_failed>
   132ec:	e30615d4 	movw	r1, #26068	; 0x65d4
   132f0:	e3401001 	movt	r1, #1
   132f4:	e30606b0 	movw	r0, #26288	; 0x66b0
   132f8:	e3400001 	movt	r0, #1
   132fc:	e3a02085 	mov	r2, #133	; 0x85
   13300:	ebffd85c 	bl	9478 <assertion_failed>
   13304:	e30615d4 	movw	r1, #26068	; 0x65d4
   13308:	e3401001 	movt	r1, #1
   1330c:	e30605e0 	movw	r0, #26080	; 0x65e0
   13310:	e3400001 	movt	r0, #1
   13314:	e3a02074 	mov	r2, #116	; 0x74
   13318:	ebffd856 	bl	9478 <assertion_failed>

0001331c <CPtrList::Remove(TPtrListElement*)>:
   1331c:	e1a03000 	mov	r3, r0
   13320:	e92d4010 	push	{r4, lr}
   13324:	e2510000 	subs	r0, r1, #0
   13328:	0a00002d 	beq	133e4 <CPtrList::Remove(TPtrListElement*)+0xc8>
   1332c:	e5901000 	ldr	r1, [r0]
   13330:	e3042d43 	movw	r2, #19779	; 0x4d43
   13334:	e345204c 	movt	r2, #20556	; 0x504c
   13338:	e1510002 	cmp	r1, r2
   1333c:	1a00002e 	bne	133fc <CPtrList::Remove(TPtrListElement*)+0xe0>
   13340:	e5932000 	ldr	r2, [r3]
   13344:	e1520000 	cmp	r2, r0
   13348:	0a000010 	beq	13390 <CPtrList::Remove(TPtrListElement*)+0x74>
   1334c:	e5903004 	ldr	r3, [r0, #4]
   13350:	e3530000 	cmp	r3, #0
   13354:	0a00002e 	beq	13414 <CPtrList::Remove(TPtrListElement*)+0xf8>
   13358:	e593c000 	ldr	ip, [r3]
   1335c:	e15c0001 	cmp	ip, r1
   13360:	1a000019 	bne	133cc <CPtrList::Remove(TPtrListElement*)+0xb0>
   13364:	e5902008 	ldr	r2, [r0, #8]
   13368:	e5832008 	str	r2, [r3, #8]
   1336c:	e3520000 	cmp	r2, #0
   13370:	0a000003 	beq	13384 <CPtrList::Remove(TPtrListElement*)+0x68>
   13374:	e5921000 	ldr	r1, [r2]
   13378:	e151000c 	cmp	r1, ip
   1337c:	05823004 	streq	r3, [r2, #4]
   13380:	1a000029 	bne	1342c <CPtrList::Remove(TPtrListElement*)+0x110>
   13384:	e8bd4010 	pop	{r4, lr}
   13388:	e3a01010 	mov	r1, #16
   1338c:	eafff55c 	b	10904 <operator delete(void*, unsigned int)>
   13390:	e5922008 	ldr	r2, [r2, #8]
   13394:	e5832000 	str	r2, [r3]
   13398:	e3520000 	cmp	r2, #0
   1339c:	0afffff8 	beq	13384 <CPtrList::Remove(TPtrListElement*)+0x68>
   133a0:	e5923000 	ldr	r3, [r2]
   133a4:	e1530001 	cmp	r3, r1
   133a8:	03a03000 	moveq	r3, #0
   133ac:	05823004 	streq	r3, [r2, #4]
   133b0:	0afffff3 	beq	13384 <CPtrList::Remove(TPtrListElement*)+0x68>
   133b4:	e30615d4 	movw	r1, #26068	; 0x65d4
   133b8:	e3401001 	movt	r1, #1
   133bc:	e30606dc 	movw	r0, #26332	; 0x66dc
   133c0:	e3400001 	movt	r0, #1
   133c4:	e3a02098 	mov	r2, #152	; 0x98
   133c8:	ebffd82a 	bl	9478 <assertion_failed>
   133cc:	e30615d4 	movw	r1, #26068	; 0x65d4
   133d0:	e3401001 	movt	r1, #1
   133d4:	e3060720 	movw	r0, #26400	; 0x6720
   133d8:	e3400001 	movt	r0, #1
   133dc:	e3a0209f 	mov	r2, #159	; 0x9f
   133e0:	ebffd824 	bl	9478 <assertion_failed>
   133e4:	e30615d4 	movw	r1, #26068	; 0x65d4
   133e8:	e3401001 	movt	r1, #1
   133ec:	e30605f0 	movw	r0, #26096	; 0x65f0
   133f0:	e3400001 	movt	r0, #1
   133f4:	e3a0208f 	mov	r2, #143	; 0x8f
   133f8:	ebffd81e 	bl	9478 <assertion_failed>
   133fc:	e30615d4 	movw	r1, #26068	; 0x65d4
   13400:	e3401001 	movt	r1, #1
   13404:	e3060600 	movw	r0, #26112	; 0x6600
   13408:	e3400001 	movt	r0, #1
   1340c:	e3a02090 	mov	r2, #144	; 0x90
   13410:	ebffd818 	bl	9478 <assertion_failed>
   13414:	e30615d4 	movw	r1, #26068	; 0x65d4
   13418:	e3401001 	movt	r1, #1
   1341c:	e3060708 	movw	r0, #26376	; 0x6708
   13420:	e3400001 	movt	r0, #1
   13424:	e3a0209e 	mov	r2, #158	; 0x9e
   13428:	ebffd812 	bl	9478 <assertion_failed>
   1342c:	e30615d4 	movw	r1, #26068	; 0x65d4
   13430:	e3401001 	movt	r1, #1
   13434:	e30606dc 	movw	r0, #26332	; 0x66dc
   13438:	e3400001 	movt	r0, #1
   1343c:	e3a020a4 	mov	r2, #164	; 0xa4
   13440:	ebffd80c 	bl	9478 <assertion_failed>

00013444 <CPtrList::Find(void*)>:
   13444:	e5900000 	ldr	r0, [r0]
   13448:	e3500000 	cmp	r0, #0
   1344c:	012fff1e 	bxeq	lr
   13450:	e3042d43 	movw	r2, #19779	; 0x4d43
   13454:	e345204c 	movt	r2, #20556	; 0x504c
   13458:	ea000005 	b	13474 <CPtrList::Find(void*)+0x30>
   1345c:	e590300c 	ldr	r3, [r0, #12]
   13460:	e1530001 	cmp	r3, r1
   13464:	012fff1e 	bxeq	lr
   13468:	e5900008 	ldr	r0, [r0, #8]
   1346c:	e3500000 	cmp	r0, #0
   13470:	012fff1e 	bxeq	lr
   13474:	e5903000 	ldr	r3, [r0]
   13478:	e1530002 	cmp	r3, r2
   1347c:	0afffff6 	beq	1345c <CPtrList::Find(void*)+0x18>
   13480:	e30615d4 	movw	r1, #26068	; 0x65d4
   13484:	e3401001 	movt	r1, #1
   13488:	e3060600 	movw	r0, #26112	; 0x6600
   1348c:	e3400001 	movt	r0, #1
   13490:	e3a020b3 	mov	r2, #179	; 0xb3
   13494:	e92d4010 	push	{r4, lr}
   13498:	ebffd7f6 	bl	9478 <assertion_failed>

0001349c <CPageAllocator::CPageAllocator()>:
   1349c:	e3a02000 	mov	r2, #0
   134a0:	e3a01001 	mov	r1, #1
   134a4:	e5802000 	str	r2, [r0]
   134a8:	e5802004 	str	r2, [r0, #4]
   134ac:	e5802008 	str	r2, [r0, #8]
   134b0:	e580100c 	str	r1, [r0, #12]
   134b4:	e12fff1e 	bx	lr

000134b8 <CPageAllocator::~CPageAllocator()>:
   134b8:	e12fff1e 	bx	lr

000134bc <CPageAllocator::Setup(unsigned int, unsigned int)>:
   134bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   134c0:	e28db000 	add	fp, sp, #0
   134c4:	e24dd014 	sub	sp, sp, #20
   134c8:	e50b0008 	str	r0, [fp, #-8]
   134cc:	e50b100c 	str	r1, [fp, #-12]
   134d0:	e50b2010 	str	r2, [fp, #-16]
   134d4:	e51b300c 	ldr	r3, [fp, #-12]
   134d8:	e2833eff 	add	r3, r3, #4080	; 0xff0
   134dc:	e283300f 	add	r3, r3, #15
   134e0:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   134e4:	e3c3300f 	bic	r3, r3, #15
   134e8:	e1a02003 	mov	r2, r3
   134ec:	e51b3008 	ldr	r3, [fp, #-8]
   134f0:	e5832000 	str	r2, [r3]
   134f4:	e51b200c 	ldr	r2, [fp, #-12]
   134f8:	e51b3010 	ldr	r3, [fp, #-16]
   134fc:	e0823003 	add	r3, r2, r3
   13500:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   13504:	e3c3300f 	bic	r3, r3, #15
   13508:	e1a02003 	mov	r2, r3
   1350c:	e51b3008 	ldr	r3, [fp, #-8]
   13510:	e5832004 	str	r2, [r3, #4]
   13514:	e320f000 	nop	{0}
   13518:	e28bd000 	add	sp, fp, #0
   1351c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13520:	e12fff1e 	bx	lr

00013524 <CPageAllocator::GetFreeSpace() const>:
   13524:	e8900005 	ldm	r0, {r0, r2}
   13528:	e0420000 	sub	r0, r2, r0
   1352c:	e12fff1e 	bx	lr

00013530 <CPageAllocator::Allocate()>:
   13530:	e5903000 	ldr	r3, [r0]
   13534:	e92d4070 	push	{r4, r5, r6, lr}
   13538:	e3530000 	cmp	r3, #0
   1353c:	0a000024 	beq	135d4 <CPageAllocator::Allocate()+0xa4>
   13540:	e1a04000 	mov	r4, r0
   13544:	e590000c 	ldr	r0, [r0, #12]
   13548:	e3500000 	cmp	r0, #0
   1354c:	1a000010 	bne	13594 <CPageAllocator::Allocate()+0x64>
   13550:	e5945008 	ldr	r5, [r4, #8]
   13554:	e3550000 	cmp	r5, #0
   13558:	0a000011 	beq	135a4 <CPageAllocator::Allocate()+0x74>
   1355c:	e5952000 	ldr	r2, [r5]
   13560:	e3043d43 	movw	r3, #19779	; 0x4d43
   13564:	e3453047 	movt	r3, #20551	; 0x5047
   13568:	e1520003 	cmp	r2, r3
   1356c:	1a00001d 	bne	135e8 <CPageAllocator::Allocate()+0xb8>
   13570:	e5952004 	ldr	r2, [r5, #4]
   13574:	e3a03000 	mov	r3, #0
   13578:	e5842008 	str	r2, [r4, #8]
   1357c:	e5853000 	str	r3, [r5]
   13580:	e594300c 	ldr	r3, [r4, #12]
   13584:	e3530000 	cmp	r3, #0
   13588:	1a00000e 	bne	135c8 <CPageAllocator::Allocate()+0x98>
   1358c:	e1a00005 	mov	r0, r5
   13590:	e8bd8070 	pop	{r4, r5, r6, pc}
   13594:	ebfff732 	bl	11264 <EnterCritical>
   13598:	e5945008 	ldr	r5, [r4, #8]
   1359c:	e3550000 	cmp	r5, #0
   135a0:	1affffed 	bne	1355c <CPageAllocator::Allocate()+0x2c>
   135a4:	e5942000 	ldr	r2, [r4]
   135a8:	e5941004 	ldr	r1, [r4, #4]
   135ac:	e2823a01 	add	r3, r2, #4096	; 0x1000
   135b0:	e5843000 	str	r3, [r4]
   135b4:	e1530001 	cmp	r3, r1
   135b8:	e594300c 	ldr	r3, [r4, #12]
   135bc:	91a05002 	movls	r5, r2
   135c0:	e3530000 	cmp	r3, #0
   135c4:	0afffff0 	beq	1358c <CPageAllocator::Allocate()+0x5c>
   135c8:	ebfff750 	bl	11310 <LeaveCritical>
   135cc:	e1a00005 	mov	r0, r5
   135d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   135d4:	e306174c 	movw	r1, #26444	; 0x674c
   135d8:	e3401001 	movt	r1, #1
   135dc:	e3a02036 	mov	r2, #54	; 0x36
   135e0:	e2810014 	add	r0, r1, #20
   135e4:	ebffd7a3 	bl	9478 <assertion_failed>
   135e8:	e306174c 	movw	r1, #26444	; 0x674c
   135ec:	e3401001 	movt	r1, #1
   135f0:	e3a02044 	mov	r2, #68	; 0x44
   135f4:	e2810024 	add	r0, r1, #36	; 0x24
   135f8:	ebffd79e 	bl	9478 <assertion_failed>

000135fc <CPageAllocator::Free(void*)>:
   135fc:	e92d4070 	push	{r4, r5, r6, lr}
   13600:	e2514000 	subs	r4, r1, #0
   13604:	08bd8070 	popeq	{r4, r5, r6, pc}
   13608:	e1a05000 	mov	r5, r0
   1360c:	e590000c 	ldr	r0, [r0, #12]
   13610:	e3500000 	cmp	r0, #0
   13614:	1a000006 	bne	13634 <CPageAllocator::Free(void*)+0x38>
   13618:	e5952008 	ldr	r2, [r5, #8]
   1361c:	e3043d43 	movw	r3, #19779	; 0x4d43
   13620:	e3453047 	movt	r3, #20551	; 0x5047
   13624:	e5842004 	str	r2, [r4, #4]
   13628:	e5843000 	str	r3, [r4]
   1362c:	e5854008 	str	r4, [r5, #8]
   13630:	e8bd8070 	pop	{r4, r5, r6, pc}
   13634:	ebfff70a 	bl	11264 <EnterCritical>
   13638:	e595200c 	ldr	r2, [r5, #12]
   1363c:	e5951008 	ldr	r1, [r5, #8]
   13640:	e3043d43 	movw	r3, #19779	; 0x4d43
   13644:	e3453047 	movt	r3, #20551	; 0x5047
   13648:	e3520000 	cmp	r2, #0
   1364c:	e5841004 	str	r1, [r4, #4]
   13650:	e5843000 	str	r3, [r4]
   13654:	e5854008 	str	r4, [r5, #8]
   13658:	08bd8070 	popeq	{r4, r5, r6, pc}
   1365c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13660:	eafff72a 	b	11310 <LeaveCritical>

00013664 <UndefinedInstructionInternal>:
   13664:	e24dd004 	sub	sp, sp, #4
   13668:	e24ee004 	sub	lr, lr, #4
   1366c:	e92d4000 	stmfd	sp!, {lr}
   13670:	e14fe000 	mrs	lr, SPSR
   13674:	e92d4000 	stmfd	sp!, {lr}
   13678:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1367c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   13680:	e1a0100d 	mov	r1, sp
   13684:	f1020012 	cps	#18
   13688:	e1a0200d 	mov	r2, sp
   1368c:	e1a0300e 	mov	r3, lr
   13690:	f1020011 	cps	#17
   13694:	e1a0400d 	mov	r4, sp
   13698:	e1a0500e 	mov	r5, lr
   1369c:	f102001f 	cps	#31
   136a0:	e1a0d001 	mov	sp, r1
   136a4:	e92d003c 	push	{r2, r3, r4, r5}
   136a8:	e1a0100d 	mov	r1, sp
   136ac:	e3a00001 	mov	r0, #1
   136b0:	ea00013e 	b	13bb0 <ExceptionHandler>

000136b4 <PrefetchAbortStub>:
   136b4:	e24dd004 	sub	sp, sp, #4
   136b8:	e24ee004 	sub	lr, lr, #4
   136bc:	e92d4000 	stmfd	sp!, {lr}
   136c0:	e14fe000 	mrs	lr, SPSR
   136c4:	e92d4000 	stmfd	sp!, {lr}
   136c8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   136cc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   136d0:	e1a0100d 	mov	r1, sp
   136d4:	f1020012 	cps	#18
   136d8:	e1a0200d 	mov	r2, sp
   136dc:	e1a0300e 	mov	r3, lr
   136e0:	f1020011 	cps	#17
   136e4:	e1a0400d 	mov	r4, sp
   136e8:	e1a0500e 	mov	r5, lr
   136ec:	f102001f 	cps	#31
   136f0:	e1a0d001 	mov	sp, r1
   136f4:	e92d003c 	push	{r2, r3, r4, r5}
   136f8:	e1a0100d 	mov	r1, sp
   136fc:	e3a00002 	mov	r0, #2
   13700:	ea00012a 	b	13bb0 <ExceptionHandler>

00013704 <DataAbortStub>:
   13704:	e24dd004 	sub	sp, sp, #4
   13708:	e24ee008 	sub	lr, lr, #8
   1370c:	e92d4000 	stmfd	sp!, {lr}
   13710:	e14fe000 	mrs	lr, SPSR
   13714:	e92d4000 	stmfd	sp!, {lr}
   13718:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1371c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   13720:	e1a0100d 	mov	r1, sp
   13724:	f1020012 	cps	#18
   13728:	e1a0200d 	mov	r2, sp
   1372c:	e1a0300e 	mov	r3, lr
   13730:	f1020011 	cps	#17
   13734:	e1a0400d 	mov	r4, sp
   13738:	e1a0500e 	mov	r5, lr
   1373c:	f102001f 	cps	#31
   13740:	e1a0d001 	mov	sp, r1
   13744:	e92d003c 	push	{r2, r3, r4, r5}
   13748:	e1a0100d 	mov	r1, sp
   1374c:	e3a00003 	mov	r0, #3
   13750:	ea000116 	b	13bb0 <ExceptionHandler>

00013754 <UndefinedInstructionStub>:
   13754:	e92d4001 	push	{r0, lr}
   13758:	eef80a10 	vmrs	r0, fpexc
   1375c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   13760:	0affffbf 	beq	13664 <UndefinedInstructionInternal>
   13764:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   13768:	eee80a10 	vmsr	fpexc, r0
   1376c:	e8fd8001 	ldm	sp!, {r0, pc}^

00013770 <IRQStub>:
   13770:	e24ee004 	sub	lr, lr, #4
   13774:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   13778:	e59f003c 	ldr	r0, [pc, #60]	; 137bc <FIQStub+0x34>
   1377c:	e580e000 	str	lr, [r0]
   13780:	ebfff8ae 	bl	11a40 <InterruptHandler>
   13784:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00013788 <FIQStub>:
   13788:	e24ee004 	sub	lr, lr, #4
   1378c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   13790:	e59f2028 	ldr	r2, [pc, #40]	; 137c0 <FIQStub+0x38>
   13794:	e5921000 	ldr	r1, [r2]
   13798:	e3510000 	cmp	r1, #0
   1379c:	0a000002 	beq	137ac <FIQStub+0x24>
   137a0:	e5920004 	ldr	r0, [r2, #4]
   137a4:	e12fff31 	blx	r1
   137a8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   137ac:	e59f1010 	ldr	r1, [pc, #16]	; 137c4 <FIQStub+0x3c>
   137b0:	e3a00000 	mov	r0, #0
   137b4:	e5810000 	str	r0, [r1]
   137b8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   137bc:	000168f0 	.word	0x000168f0
   137c0:	000168e4 	.word	0x000168e4
   137c4:	3f00b20c 	.word	0x3f00b20c

000137c8 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   137c8:	e5801000 	str	r1, [r0]
   137cc:	e5c02004 	strb	r2, [r0, #4]
   137d0:	e12fff1e 	bx	lr

000137d4 <CBcmMailBox::~CBcmMailBox()>:
   137d4:	e12fff1e 	bx	lr

000137d8 <CBcmMailBox::WriteRead(unsigned int)>:
   137d8:	e92d4070 	push	{r4, r5, r6, lr}
   137dc:	e1a05000 	mov	r5, r0
   137e0:	e5d03004 	ldrb	r3, [r0, #4]
   137e4:	e24dd008 	sub	sp, sp, #8
   137e8:	e1a06001 	mov	r6, r1
   137ec:	e3530000 	cmp	r3, #0
   137f0:	1a000004 	bne	13808 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   137f4:	e306399c 	movw	r3, #27036	; 0x699c
   137f8:	e3403001 	movt	r3, #1
   137fc:	e5930000 	ldr	r0, [r3]
   13800:	e3500000 	cmp	r0, #0
   13804:	1a000029 	bne	138b0 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   13808:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1380c:	e3434f00 	movt	r4, #16128	; 0x3f00
   13810:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   13814:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13818:	1a000005 	bne	13834 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   1381c:	e3a00014 	mov	r0, #20
   13820:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   13824:	ebfff065 	bl	f9c0 <CTimer::SimpleMsDelay(unsigned int)>
   13828:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1382c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13830:	0afffff9 	beq	1381c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   13834:	e3a00a0b 	mov	r0, #45056	; 0xb000
   13838:	e3430f00 	movt	r0, #16128	; 0x3f00
   1383c:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   13840:	e3530000 	cmp	r3, #0
   13844:	bafffffc 	blt	1383c <CBcmMailBox::WriteRead(unsigned int)+0x64>
   13848:	e316000f 	tst	r6, #15
   1384c:	1a00001e 	bne	138cc <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   13850:	e5953000 	ldr	r3, [r5]
   13854:	e3a02a0b 	mov	r2, #45056	; 0xb000
   13858:	e3432f00 	movt	r2, #16128	; 0x3f00
   1385c:	e1866003 	orr	r6, r6, r3
   13860:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   13864:	e5950000 	ldr	r0, [r5]
   13868:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   1386c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13870:	1afffffc 	bne	13868 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   13874:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   13878:	e203100f 	and	r1, r3, #15
   1387c:	e1510000 	cmp	r1, r0
   13880:	1afffff8 	bne	13868 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   13884:	e5d52004 	ldrb	r2, [r5, #4]
   13888:	e3c3000f 	bic	r0, r3, #15
   1388c:	e3520000 	cmp	r2, #0
   13890:	1a000004 	bne	138a8 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   13894:	e306399c 	movw	r3, #27036	; 0x699c
   13898:	e3403001 	movt	r3, #1
   1389c:	e5933000 	ldr	r3, [r3]
   138a0:	e3530000 	cmp	r3, #0
   138a4:	1a000003 	bne	138b8 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   138a8:	e28dd008 	add	sp, sp, #8
   138ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   138b0:	ebfff66b 	bl	11264 <EnterCritical>
   138b4:	eaffffd3 	b	13808 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   138b8:	e58d0004 	str	r0, [sp, #4]
   138bc:	ebfff693 	bl	11310 <LeaveCritical>
   138c0:	e59d0004 	ldr	r0, [sp, #4]
   138c4:	e28dd008 	add	sp, sp, #8
   138c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   138cc:	e3061794 	movw	r1, #26516	; 0x6794
   138d0:	e3401001 	movt	r1, #1
   138d4:	e30607a4 	movw	r0, #26532	; 0x67a4
   138d8:	e3400001 	movt	r0, #1
   138dc:	e3a02062 	mov	r2, #98	; 0x62
   138e0:	ebffd6e4 	bl	9478 <assertion_failed>

000138e4 <CBcmMailBox::Flush()>:
   138e4:	e92d4010 	push	{r4, lr}
   138e8:	e3a04a0b 	mov	r4, #45056	; 0xb000
   138ec:	e3434f00 	movt	r4, #16128	; 0x3f00
   138f0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   138f4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   138f8:	18bd8010 	popne	{r4, pc}
   138fc:	e3a00014 	mov	r0, #20
   13900:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   13904:	ebfff02d 	bl	f9c0 <CTimer::SimpleMsDelay(unsigned int)>
   13908:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1390c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   13910:	0afffff9 	beq	138fc <CBcmMailBox::Flush()+0x18>
   13914:	e8bd8010 	pop	{r4, pc}

00013918 <CBcmMailBox::Read()>:
   13918:	e5901000 	ldr	r1, [r0]
   1391c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   13920:	e3432f00 	movt	r2, #16128	; 0x3f00
   13924:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   13928:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1392c:	1afffffc 	bne	13924 <CBcmMailBox::Read()+0xc>
   13930:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   13934:	e200300f 	and	r3, r0, #15
   13938:	e1530001 	cmp	r3, r1
   1393c:	1afffff8 	bne	13924 <CBcmMailBox::Read()+0xc>
   13940:	e3c0000f 	bic	r0, r0, #15
   13944:	e12fff1e 	bx	lr

00013948 <CBcmMailBox::Write(unsigned int)>:
   13948:	e3a02a0b 	mov	r2, #45056	; 0xb000
   1394c:	e3432f00 	movt	r2, #16128	; 0x3f00
   13950:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   13954:	e3530000 	cmp	r3, #0
   13958:	bafffffc 	blt	13950 <CBcmMailBox::Write(unsigned int)+0x8>
   1395c:	e311000f 	tst	r1, #15
   13960:	1a000003 	bne	13974 <CBcmMailBox::Write(unsigned int)+0x2c>
   13964:	e5903000 	ldr	r3, [r0]
   13968:	e1811003 	orr	r1, r1, r3
   1396c:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   13970:	e12fff1e 	bx	lr
   13974:	e3061794 	movw	r1, #26516	; 0x6794
   13978:	e3401001 	movt	r1, #1
   1397c:	e30607a4 	movw	r0, #26532	; 0x67a4
   13980:	e3400001 	movt	r0, #1
   13984:	e3a02062 	mov	r2, #98	; 0x62
   13988:	e92d4010 	push	{r4, lr}
   1398c:	ebffd6b9 	bl	9478 <assertion_failed>

00013990 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   13990:	e306399c 	movw	r3, #27036	; 0x699c
   13994:	e3403001 	movt	r3, #1
   13998:	e3a02000 	mov	r2, #0
   1399c:	e5832000 	str	r2, [r3]
   139a0:	e12fff1e 	bx	lr

000139a4 <CExceptionHandler::CExceptionHandler()>:
   139a4:	e306c9a0 	movw	ip, #27040	; 0x69a0
   139a8:	e340c001 	movt	ip, #1
   139ac:	e92d4010 	push	{r4, lr}
   139b0:	e59c1000 	ldr	r1, [ip]
   139b4:	e3510000 	cmp	r1, #0
   139b8:	1a000019 	bne	13a24 <CExceptionHandler::CExceptionHandler()+0x80>
   139bc:	e3032754 	movw	r2, #14164	; 0x3754
   139c0:	e3402001 	movt	r2, #1
   139c4:	e1a04000 	mov	r4, r0
   139c8:	e2420004 	sub	r0, r2, #4
   139cc:	e30336b4 	movw	r3, #14004	; 0x36b4
   139d0:	e3403001 	movt	r3, #1
   139d4:	e243200c 	sub	r2, r3, #12
   139d8:	e1a03140 	asr	r3, r0, #2
   139dc:	e2433002 	sub	r3, r3, #2
   139e0:	e58c4000 	str	r4, [ip]
   139e4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   139e8:	e5813004 	str	r3, [r1, #4]
   139ec:	e3033704 	movw	r3, #14084	; 0x3704
   139f0:	e3403001 	movt	r3, #1
   139f4:	e2433010 	sub	r3, r3, #16
   139f8:	e1a02142 	asr	r2, r2, #2
   139fc:	e2422002 	sub	r2, r2, #2
   13a00:	e1a03143 	asr	r3, r3, #2
   13a04:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   13a08:	e2433002 	sub	r3, r3, #2
   13a0c:	e581200c 	str	r2, [r1, #12]
   13a10:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   13a14:	e5813010 	str	r3, [r1, #16]
   13a18:	ebfff651 	bl	11364 <SyncDataAndInstructionCache>
   13a1c:	e1a00004 	mov	r0, r4
   13a20:	e8bd8010 	pop	{r4, pc}
   13a24:	e30617b8 	movw	r1, #26552	; 0x67b8
   13a28:	e3401001 	movt	r1, #1
   13a2c:	e30401b4 	movw	r0, #16820	; 0x41b4
   13a30:	e3400001 	movt	r0, #1
   13a34:	e3a02030 	mov	r2, #48	; 0x30
   13a38:	ebffd68e 	bl	9478 <assertion_failed>

00013a3c <CExceptionHandler::~CExceptionHandler()>:
   13a3c:	e30639a0 	movw	r3, #27040	; 0x69a0
   13a40:	e3403001 	movt	r3, #1
   13a44:	e3a02000 	mov	r2, #0
   13a48:	e5832000 	str	r2, [r3]
   13a4c:	e12fff1e 	bx	lr

00013a50 <CExceptionHandler::Throw(unsigned int)>:
   13a50:	e92d4010 	push	{r4, lr}
   13a54:	e1a04001 	mov	r4, r1
   13a58:	e24dd008 	sub	sp, sp, #8
   13a5c:	ebffdd0f 	bl	aea0 <CLogger::Get()>
   13a60:	e306c8f4 	movw	ip, #26868	; 0x68f4
   13a64:	e340c001 	movt	ip, #1
   13a68:	e3a02000 	mov	r2, #0
   13a6c:	e30637d0 	movw	r3, #26576	; 0x67d0
   13a70:	e3403001 	movt	r3, #1
   13a74:	e79c1104 	ldr	r1, [ip, r4, lsl #2]
   13a78:	e58d1000 	str	r1, [sp]
   13a7c:	e306187c 	movw	r1, #26748	; 0x687c
   13a80:	e3401001 	movt	r1, #1
   13a84:	ebffdee5 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13a88:	e28dd008 	add	sp, sp, #8
   13a8c:	e8bd8010 	pop	{r4, pc}

00013a90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   13a90:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13a94:	e3510002 	cmp	r1, #2
   13a98:	e1a05001 	mov	r5, r1
   13a9c:	e24dd024 	sub	sp, sp, #36	; 0x24
   13aa0:	e1a04002 	mov	r4, r2
   13aa4:	0a000028 	beq	13b4c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   13aa8:	e3510003 	cmp	r1, #3
   13aac:	13a07000 	movne	r7, #0
   13ab0:	11a09007 	movne	r9, r7
   13ab4:	1a000001 	bne	13ac0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   13ab8:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   13abc:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   13ac0:	e3540000 	cmp	r4, #0
   13ac4:	0a000024 	beq	13b5c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   13ac8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   13acc:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   13ad0:	e203301f 	and	r3, r3, #31
   13ad4:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   13ad8:	e3530011 	cmp	r3, #17
   13adc:	0a000024 	beq	13b74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   13ae0:	e3530012 	cmp	r3, #18
   13ae4:	08940140 	ldmeq	r4, {r6, r8}
   13ae8:	e1a00006 	mov	r0, r6
   13aec:	e306187c 	movw	r1, #26748	; 0x687c
   13af0:	e3401001 	movt	r1, #1
   13af4:	ebffd6c4 	bl	960c <debug_stacktrace(unsigned int const*, char const*)>
   13af8:	ebffdce8 	bl	aea0 <CLogger::Get()>
   13afc:	e58d8014 	str	r8, [sp, #20]
   13b00:	e58d6010 	str	r6, [sp, #16]
   13b04:	e30638f4 	movw	r3, #26868	; 0x68f4
   13b08:	e3403001 	movt	r3, #1
   13b0c:	e58d700c 	str	r7, [sp, #12]
   13b10:	e306187c 	movw	r1, #26748	; 0x687c
   13b14:	e3401001 	movt	r1, #1
   13b18:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   13b1c:	e58d2004 	str	r2, [sp, #4]
   13b20:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   13b24:	e58d2018 	str	r2, [sp, #24]
   13b28:	e3a02000 	mov	r2, #0
   13b2c:	e58d9008 	str	r9, [sp, #8]
   13b30:	e793c105 	ldr	ip, [r3, r5, lsl #2]
   13b34:	e30637ec 	movw	r3, #26604	; 0x67ec
   13b38:	e3403001 	movt	r3, #1
   13b3c:	e58dc000 	str	ip, [sp]
   13b40:	ebffdeb6 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13b44:	e28dd024 	add	sp, sp, #36	; 0x24
   13b48:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13b4c:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   13b50:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   13b54:	e3540000 	cmp	r4, #0
   13b58:	1affffda 	bne	13ac8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x38>
   13b5c:	e30617b8 	movw	r1, #26552	; 0x67b8
   13b60:	e3401001 	movt	r1, #1
   13b64:	e30607e0 	movw	r0, #26592	; 0x67e0
   13b68:	e3400001 	movt	r0, #1
   13b6c:	e3a02069 	mov	r2, #105	; 0x69
   13b70:	ebffd640 	bl	9478 <assertion_failed>
   13b74:	e594800c 	ldr	r8, [r4, #12]
   13b78:	e5946008 	ldr	r6, [r4, #8]
   13b7c:	eaffffd9 	b	13ae8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>

00013b80 <CExceptionHandler::Get()>:
   13b80:	e30639a0 	movw	r3, #27040	; 0x69a0
   13b84:	e3403001 	movt	r3, #1
   13b88:	e5930000 	ldr	r0, [r3]
   13b8c:	e3500000 	cmp	r0, #0
   13b90:	112fff1e 	bxne	lr
   13b94:	e30617b8 	movw	r1, #26552	; 0x67b8
   13b98:	e3401001 	movt	r1, #1
   13b9c:	e3040384 	movw	r0, #17284	; 0x4384
   13ba0:	e3400001 	movt	r0, #1
   13ba4:	e3a02087 	mov	r2, #135	; 0x87
   13ba8:	e92d4010 	push	{r4, lr}
   13bac:	ebffd631 	bl	9478 <assertion_failed>

00013bb0 <ExceptionHandler>:
   13bb0:	e92d4070 	push	{r4, r5, r6, lr}
   13bb4:	e1a04000 	mov	r4, r0
   13bb8:	e1a05001 	mov	r5, r1
   13bbc:	ebfff726 	bl	1185c <CInterruptSystem::DisableFIQ()>
   13bc0:	f1080040 	cpsie	f
   13bc4:	e30639a0 	movw	r3, #27040	; 0x69a0
   13bc8:	e3403001 	movt	r3, #1
   13bcc:	e5930000 	ldr	r0, [r3]
   13bd0:	e3500000 	cmp	r0, #0
   13bd4:	0a000003 	beq	13be8 <ExceptionHandler+0x38>
   13bd8:	e1a02005 	mov	r2, r5
   13bdc:	e1a01004 	mov	r1, r4
   13be0:	e8bd4070 	pop	{r4, r5, r6, lr}
   13be4:	eaffffa9 	b	13a90 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   13be8:	e30617b8 	movw	r1, #26552	; 0x67b8
   13bec:	e3401001 	movt	r1, #1
   13bf0:	e3040384 	movw	r0, #17284	; 0x4384
   13bf4:	e3400001 	movt	r0, #1
   13bf8:	e3a02087 	mov	r2, #135	; 0x87
   13bfc:	ebffd61d 	bl	9478 <assertion_failed>

00013c00 <raise>:
   13c00:	e30639a0 	movw	r3, #27040	; 0x69a0
   13c04:	e3403001 	movt	r3, #1
   13c08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13c0c:	e5933000 	ldr	r3, [r3]
   13c10:	e24dd00c 	sub	sp, sp, #12
   13c14:	e3530000 	cmp	r3, #0
   13c18:	0a00000d 	beq	13c54 <raise+0x54>
   13c1c:	ebffdc9f 	bl	aea0 <CLogger::Get()>
   13c20:	e306c8f4 	movw	ip, #26868	; 0x68f4
   13c24:	e340c001 	movt	ip, #1
   13c28:	e3a02000 	mov	r2, #0
   13c2c:	e30637d0 	movw	r3, #26576	; 0x67d0
   13c30:	e3403001 	movt	r3, #1
   13c34:	e306187c 	movw	r1, #26748	; 0x687c
   13c38:	e3401001 	movt	r1, #1
   13c3c:	e59cc010 	ldr	ip, [ip, #16]
   13c40:	e58dc000 	str	ip, [sp]
   13c44:	ebffde75 	bl	b620 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13c48:	e3a00000 	mov	r0, #0
   13c4c:	e28dd00c 	add	sp, sp, #12
   13c50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13c54:	e30617b8 	movw	r1, #26552	; 0x67b8
   13c58:	e3401001 	movt	r1, #1
   13c5c:	e3040384 	movw	r0, #17284	; 0x4384
   13c60:	e3400001 	movt	r0, #1
   13c64:	e3a02087 	mov	r2, #135	; 0x87
   13c68:	ebffd602 	bl	9478 <assertion_failed>

00013c6c <__aeabi_ldivmod>:
   13c6c:	b97b      	cbnz	r3, 13c8e <__aeabi_ldivmod+0x22>
   13c6e:	b972      	cbnz	r2, 13c8e <__aeabi_ldivmod+0x22>
   13c70:	2900      	cmp	r1, #0
   13c72:	bfbe      	ittt	lt
   13c74:	2000      	movlt	r0, #0
   13c76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   13c7a:	e006      	blt.n	13c8a <__aeabi_ldivmod+0x1e>
   13c7c:	bf08      	it	eq
   13c7e:	2800      	cmpeq	r0, #0
   13c80:	bf1c      	itt	ne
   13c82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   13c86:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   13c8a:	f000 ba09 	b.w	140a0 <__aeabi_idiv0>
   13c8e:	f1ad 0c08 	sub.w	ip, sp, #8
   13c92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   13c96:	2900      	cmp	r1, #0
   13c98:	db09      	blt.n	13cae <__aeabi_ldivmod+0x42>
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	db1a      	blt.n	13cd4 <__aeabi_ldivmod+0x68>
   13c9e:	f000 f84d 	bl	13d3c <__udivmoddi4>
   13ca2:	f8dd e004 	ldr.w	lr, [sp, #4]
   13ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13caa:	b004      	add	sp, #16
   13cac:	4770      	bx	lr
   13cae:	4240      	negs	r0, r0
   13cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13cb4:	2b00      	cmp	r3, #0
   13cb6:	db1b      	blt.n	13cf0 <__aeabi_ldivmod+0x84>
   13cb8:	f000 f840 	bl	13d3c <__udivmoddi4>
   13cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
   13cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13cc4:	b004      	add	sp, #16
   13cc6:	4240      	negs	r0, r0
   13cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13ccc:	4252      	negs	r2, r2
   13cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13cd2:	4770      	bx	lr
   13cd4:	4252      	negs	r2, r2
   13cd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13cda:	f000 f82f 	bl	13d3c <__udivmoddi4>
   13cde:	f8dd e004 	ldr.w	lr, [sp, #4]
   13ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13ce6:	b004      	add	sp, #16
   13ce8:	4240      	negs	r0, r0
   13cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13cee:	4770      	bx	lr
   13cf0:	4252      	negs	r2, r2
   13cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13cf6:	f000 f821 	bl	13d3c <__udivmoddi4>
   13cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
   13cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13d02:	b004      	add	sp, #16
   13d04:	4252      	negs	r2, r2
   13d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13d0a:	4770      	bx	lr

00013d0c <__aeabi_uldivmod>:
   13d0c:	b953      	cbnz	r3, 13d24 <__aeabi_uldivmod+0x18>
   13d0e:	b94a      	cbnz	r2, 13d24 <__aeabi_uldivmod+0x18>
   13d10:	2900      	cmp	r1, #0
   13d12:	bf08      	it	eq
   13d14:	2800      	cmpeq	r0, #0
   13d16:	bf1c      	itt	ne
   13d18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   13d1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   13d20:	f000 b9be 	b.w	140a0 <__aeabi_idiv0>
   13d24:	f1ad 0c08 	sub.w	ip, sp, #8
   13d28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   13d2c:	f000 f806 	bl	13d3c <__udivmoddi4>
   13d30:	f8dd e004 	ldr.w	lr, [sp, #4]
   13d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13d38:	b004      	add	sp, #16
   13d3a:	4770      	bx	lr

00013d3c <__udivmoddi4>:
   13d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d40:	460d      	mov	r5, r1
   13d42:	4604      	mov	r4, r0
   13d44:	b083      	sub	sp, #12
   13d46:	460f      	mov	r7, r1
   13d48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	d157      	bne.n	13dfe <__udivmoddi4+0xc2>
   13d4e:	4694      	mov	ip, r2
   13d50:	428a      	cmp	r2, r1
   13d52:	d975      	bls.n	13e40 <__udivmoddi4+0x104>
   13d54:	fab2 f382 	clz	r3, r2
   13d58:	b143      	cbz	r3, 13d6c <__udivmoddi4+0x30>
   13d5a:	f1c3 0120 	rsb	r1, r3, #32
   13d5e:	409f      	lsls	r7, r3
   13d60:	fa02 fc03 	lsl.w	ip, r2, r3
   13d64:	fa20 f101 	lsr.w	r1, r0, r1
   13d68:	430f      	orrs	r7, r1
   13d6a:	409c      	lsls	r4, r3
   13d6c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   13d70:	fa1f f58c 	uxth.w	r5, ip
   13d74:	0c22      	lsrs	r2, r4, #16
   13d76:	fbb7 f1fe 	udiv	r1, r7, lr
   13d7a:	fb0e 7711 	mls	r7, lr, r1, r7
   13d7e:	fb01 f005 	mul.w	r0, r1, r5
   13d82:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   13d86:	4290      	cmp	r0, r2
   13d88:	d910      	bls.n	13dac <__udivmoddi4+0x70>
   13d8a:	eb1c 0202 	adds.w	r2, ip, r2
   13d8e:	f04f 0701 	mov.w	r7, #1
   13d92:	bf28      	it	cs
   13d94:	2700      	movcs	r7, #0
   13d96:	4290      	cmp	r0, r2
   13d98:	f007 0701 	and.w	r7, r7, #1
   13d9c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   13da0:	bf98      	it	ls
   13da2:	2700      	movls	r7, #0
   13da4:	2f00      	cmp	r7, #0
   13da6:	f040 8172 	bne.w	1408e <__udivmoddi4+0x352>
   13daa:	4641      	mov	r1, r8
   13dac:	1a12      	subs	r2, r2, r0
   13dae:	b2a4      	uxth	r4, r4
   13db0:	fbb2 f0fe 	udiv	r0, r2, lr
   13db4:	fb0e 2210 	mls	r2, lr, r0, r2
   13db8:	fb00 f505 	mul.w	r5, r0, r5
   13dbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   13dc0:	42a5      	cmp	r5, r4
   13dc2:	d910      	bls.n	13de6 <__udivmoddi4+0xaa>
   13dc4:	eb1c 0404 	adds.w	r4, ip, r4
   13dc8:	f04f 0201 	mov.w	r2, #1
   13dcc:	bf28      	it	cs
   13dce:	2200      	movcs	r2, #0
   13dd0:	42a5      	cmp	r5, r4
   13dd2:	f002 0201 	and.w	r2, r2, #1
   13dd6:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
   13dda:	bf98      	it	ls
   13ddc:	2200      	movls	r2, #0
   13dde:	2a00      	cmp	r2, #0
   13de0:	f040 8152 	bne.w	14088 <__udivmoddi4+0x34c>
   13de4:	4638      	mov	r0, r7
   13de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   13dea:	1b64      	subs	r4, r4, r5
   13dec:	2100      	movs	r1, #0
   13dee:	b11e      	cbz	r6, 13df8 <__udivmoddi4+0xbc>
   13df0:	40dc      	lsrs	r4, r3
   13df2:	2300      	movs	r3, #0
   13df4:	e9c6 4300 	strd	r4, r3, [r6]
   13df8:	b003      	add	sp, #12
   13dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dfe:	428b      	cmp	r3, r1
   13e00:	d909      	bls.n	13e16 <__udivmoddi4+0xda>
   13e02:	2e00      	cmp	r6, #0
   13e04:	f000 8125 	beq.w	14052 <__udivmoddi4+0x316>
   13e08:	2100      	movs	r1, #0
   13e0a:	6030      	str	r0, [r6, #0]
   13e0c:	6075      	str	r5, [r6, #4]
   13e0e:	4608      	mov	r0, r1
   13e10:	b003      	add	sp, #12
   13e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e16:	fab3 f183 	clz	r1, r3
   13e1a:	2900      	cmp	r1, #0
   13e1c:	d15c      	bne.n	13ed8 <__udivmoddi4+0x19c>
   13e1e:	42ab      	cmp	r3, r5
   13e20:	bf28      	it	cs
   13e22:	4282      	cmpcs	r2, r0
   13e24:	bf88      	it	hi
   13e26:	4608      	movhi	r0, r1
   13e28:	d805      	bhi.n	13e36 <__udivmoddi4+0xfa>
   13e2a:	1aa5      	subs	r5, r4, r2
   13e2c:	eb67 0303 	sbc.w	r3, r7, r3
   13e30:	2001      	movs	r0, #1
   13e32:	461f      	mov	r7, r3
   13e34:	462c      	mov	r4, r5
   13e36:	2e00      	cmp	r6, #0
   13e38:	d0de      	beq.n	13df8 <__udivmoddi4+0xbc>
   13e3a:	e9c6 4700 	strd	r4, r7, [r6]
   13e3e:	e7db      	b.n	13df8 <__udivmoddi4+0xbc>
   13e40:	b902      	cbnz	r2, 13e44 <__udivmoddi4+0x108>
   13e42:	deff      	udf	#255	; 0xff
   13e44:	fab2 f382 	clz	r3, r2
   13e48:	2b00      	cmp	r3, #0
   13e4a:	f040 80b9 	bne.w	13fc0 <__udivmoddi4+0x284>
   13e4e:	1a8d      	subs	r5, r1, r2
   13e50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   13e54:	b297      	uxth	r7, r2
   13e56:	2101      	movs	r1, #1
   13e58:	fbb5 f2fe 	udiv	r2, r5, lr
   13e5c:	fb0e 5012 	mls	r0, lr, r2, r5
   13e60:	0c25      	lsrs	r5, r4, #16
   13e62:	fb07 f802 	mul.w	r8, r7, r2
   13e66:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   13e6a:	45a8      	cmp	r8, r5
   13e6c:	d912      	bls.n	13e94 <__udivmoddi4+0x158>
   13e6e:	eb1c 0505 	adds.w	r5, ip, r5
   13e72:	f04f 0001 	mov.w	r0, #1
   13e76:	bf38      	it	cc
   13e78:	2000      	movcc	r0, #0
   13e7a:	45a8      	cmp	r8, r5
   13e7c:	f080 0001 	eor.w	r0, r0, #1
   13e80:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   13e84:	f000 0001 	and.w	r0, r0, #1
   13e88:	bf98      	it	ls
   13e8a:	2000      	movls	r0, #0
   13e8c:	2800      	cmp	r0, #0
   13e8e:	f040 8104 	bne.w	1409a <__udivmoddi4+0x35e>
   13e92:	464a      	mov	r2, r9
   13e94:	eba5 0508 	sub.w	r5, r5, r8
   13e98:	b2a4      	uxth	r4, r4
   13e9a:	fbb5 f0fe 	udiv	r0, r5, lr
   13e9e:	fb0e 5510 	mls	r5, lr, r0, r5
   13ea2:	fb00 f707 	mul.w	r7, r0, r7
   13ea6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   13eaa:	42a7      	cmp	r7, r4
   13eac:	d910      	bls.n	13ed0 <__udivmoddi4+0x194>
   13eae:	eb1c 0404 	adds.w	r4, ip, r4
   13eb2:	f04f 0501 	mov.w	r5, #1
   13eb6:	bf28      	it	cs
   13eb8:	2500      	movcs	r5, #0
   13eba:	42a7      	cmp	r7, r4
   13ebc:	f005 0501 	and.w	r5, r5, #1
   13ec0:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   13ec4:	bf98      	it	ls
   13ec6:	2500      	movls	r5, #0
   13ec8:	2d00      	cmp	r5, #0
   13eca:	f040 80e3 	bne.w	14094 <__udivmoddi4+0x358>
   13ece:	4670      	mov	r0, lr
   13ed0:	1be4      	subs	r4, r4, r7
   13ed2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   13ed6:	e78a      	b.n	13dee <__udivmoddi4+0xb2>
   13ed8:	f1c1 0c20 	rsb	ip, r1, #32
   13edc:	408b      	lsls	r3, r1
   13ede:	fa05 f701 	lsl.w	r7, r5, r1
   13ee2:	fa22 f40c 	lsr.w	r4, r2, ip
   13ee6:	4323      	orrs	r3, r4
   13ee8:	fa20 f40c 	lsr.w	r4, r0, ip
   13eec:	fa25 f90c 	lsr.w	r9, r5, ip
   13ef0:	4327      	orrs	r7, r4
   13ef2:	0c1c      	lsrs	r4, r3, #16
   13ef4:	fa00 fe01 	lsl.w	lr, r0, r1
   13ef8:	fa1f f883 	uxth.w	r8, r3
   13efc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   13f00:	408a      	lsls	r2, r1
   13f02:	9201      	str	r2, [sp, #4]
   13f04:	fbb9 f0f4 	udiv	r0, r9, r4
   13f08:	fb04 9510 	mls	r5, r4, r0, r9
   13f0c:	fb00 f908 	mul.w	r9, r0, r8
   13f10:	ea4a 4505 	orr.w	r5, sl, r5, lsl #16
   13f14:	45a9      	cmp	r9, r5
   13f16:	d911      	bls.n	13f3c <__udivmoddi4+0x200>
   13f18:	195d      	adds	r5, r3, r5
   13f1a:	f04f 0201 	mov.w	r2, #1
   13f1e:	bf38      	it	cc
   13f20:	2200      	movcc	r2, #0
   13f22:	45a9      	cmp	r9, r5
   13f24:	f082 0a01 	eor.w	sl, r2, #1
   13f28:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
   13f2c:	f00a 0201 	and.w	r2, sl, #1
   13f30:	bf98      	it	ls
   13f32:	2200      	movls	r2, #0
   13f34:	2a00      	cmp	r2, #0
   13f36:	f040 809e 	bne.w	14076 <__udivmoddi4+0x33a>
   13f3a:	4658      	mov	r0, fp
   13f3c:	eba5 0509 	sub.w	r5, r5, r9
   13f40:	b2bf      	uxth	r7, r7
   13f42:	fbb5 f9f4 	udiv	r9, r5, r4
   13f46:	fb04 5519 	mls	r5, r4, r9, r5
   13f4a:	fb09 f808 	mul.w	r8, r9, r8
   13f4e:	ea47 4405 	orr.w	r4, r7, r5, lsl #16
   13f52:	45a0      	cmp	r8, r4
   13f54:	d90e      	bls.n	13f74 <__udivmoddi4+0x238>
   13f56:	191c      	adds	r4, r3, r4
   13f58:	f04f 0501 	mov.w	r5, #1
   13f5c:	bf28      	it	cs
   13f5e:	2500      	movcs	r5, #0
   13f60:	45a0      	cmp	r8, r4
   13f62:	f005 0501 	and.w	r5, r5, #1
   13f66:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   13f6a:	bf98      	it	ls
   13f6c:	2500      	movls	r5, #0
   13f6e:	2d00      	cmp	r5, #0
   13f70:	d17a      	bne.n	14068 <__udivmoddi4+0x32c>
   13f72:	46b9      	mov	r9, r7
   13f74:	9a01      	ldr	r2, [sp, #4]
   13f76:	ea49 4000 	orr.w	r0, r9, r0, lsl #16
   13f7a:	eba4 0408 	sub.w	r4, r4, r8
   13f7e:	fba0 8502 	umull	r8, r5, r0, r2
   13f82:	4647      	mov	r7, r8
   13f84:	46a9      	mov	r9, r5
   13f86:	42ac      	cmp	r4, r5
   13f88:	d366      	bcc.n	14058 <__udivmoddi4+0x31c>
   13f8a:	f04f 0201 	mov.w	r2, #1
   13f8e:	bf18      	it	ne
   13f90:	2200      	movne	r2, #0
   13f92:	45c6      	cmp	lr, r8
   13f94:	f002 0201 	and.w	r2, r2, #1
   13f98:	bf28      	it	cs
   13f9a:	2200      	movcs	r2, #0
   13f9c:	2a00      	cmp	r2, #0
   13f9e:	d15b      	bne.n	14058 <__udivmoddi4+0x31c>
   13fa0:	2e00      	cmp	r6, #0
   13fa2:	d06f      	beq.n	14084 <__udivmoddi4+0x348>
   13fa4:	ebbe 0307 	subs.w	r3, lr, r7
   13fa8:	eb64 0409 	sbc.w	r4, r4, r9
   13fac:	fa23 f201 	lsr.w	r2, r3, r1
   13fb0:	fa04 f30c 	lsl.w	r3, r4, ip
   13fb4:	4313      	orrs	r3, r2
   13fb6:	40cc      	lsrs	r4, r1
   13fb8:	2100      	movs	r1, #0
   13fba:	e9c6 3400 	strd	r3, r4, [r6]
   13fbe:	e71b      	b.n	13df8 <__udivmoddi4+0xbc>
   13fc0:	fa02 fc03 	lsl.w	ip, r2, r3
   13fc4:	f1c3 0220 	rsb	r2, r3, #32
   13fc8:	4099      	lsls	r1, r3
   13fca:	40d5      	lsrs	r5, r2
   13fcc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   13fd0:	fa20 f202 	lsr.w	r2, r0, r2
   13fd4:	fa1f f78c 	uxth.w	r7, ip
   13fd8:	430a      	orrs	r2, r1
   13fda:	409c      	lsls	r4, r3
   13fdc:	fbb5 fafe 	udiv	sl, r5, lr
   13fe0:	0c10      	lsrs	r0, r2, #16
   13fe2:	fb0e 551a 	mls	r5, lr, sl, r5
   13fe6:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
   13fea:	fb0a f007 	mul.w	r0, sl, r7
   13fee:	42a8      	cmp	r0, r5
   13ff0:	d910      	bls.n	14014 <__udivmoddi4+0x2d8>
   13ff2:	eb1c 0505 	adds.w	r5, ip, r5
   13ff6:	f04f 0101 	mov.w	r1, #1
   13ffa:	bf38      	it	cc
   13ffc:	2100      	movcc	r1, #0
   13ffe:	42a8      	cmp	r0, r5
   14000:	f081 0801 	eor.w	r8, r1, #1
   14004:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
   14008:	f008 0101 	and.w	r1, r8, #1
   1400c:	bf98      	it	ls
   1400e:	2100      	movls	r1, #0
   14010:	bba1      	cbnz	r1, 1407c <__udivmoddi4+0x340>
   14012:	46ca      	mov	sl, r9
   14014:	1a28      	subs	r0, r5, r0
   14016:	b295      	uxth	r5, r2
   14018:	fbb0 f2fe 	udiv	r2, r0, lr
   1401c:	fb0e 0012 	mls	r0, lr, r2, r0
   14020:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   14024:	fb02 f007 	mul.w	r0, r2, r7
   14028:	42a8      	cmp	r0, r5
   1402a:	d90e      	bls.n	1404a <__udivmoddi4+0x30e>
   1402c:	eb1c 0505 	adds.w	r5, ip, r5
   14030:	f04f 0101 	mov.w	r1, #1
   14034:	bf28      	it	cs
   14036:	2100      	movcs	r1, #0
   14038:	42a8      	cmp	r0, r5
   1403a:	f001 0101 	and.w	r1, r1, #1
   1403e:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   14042:	bf98      	it	ls
   14044:	2100      	movls	r1, #0
   14046:	b999      	cbnz	r1, 14070 <__udivmoddi4+0x334>
   14048:	464a      	mov	r2, r9
   1404a:	1a2d      	subs	r5, r5, r0
   1404c:	ea42 410a 	orr.w	r1, r2, sl, lsl #16
   14050:	e702      	b.n	13e58 <__udivmoddi4+0x11c>
   14052:	4631      	mov	r1, r6
   14054:	4630      	mov	r0, r6
   14056:	e6cf      	b.n	13df8 <__udivmoddi4+0xbc>
   14058:	9a01      	ldr	r2, [sp, #4]
   1405a:	3801      	subs	r0, #1
   1405c:	ebb8 0702 	subs.w	r7, r8, r2
   14060:	eb65 0203 	sbc.w	r2, r5, r3
   14064:	4691      	mov	r9, r2
   14066:	e79b      	b.n	13fa0 <__udivmoddi4+0x264>
   14068:	f1a9 0902 	sub.w	r9, r9, #2
   1406c:	441c      	add	r4, r3
   1406e:	e781      	b.n	13f74 <__udivmoddi4+0x238>
   14070:	3a02      	subs	r2, #2
   14072:	4465      	add	r5, ip
   14074:	e7e9      	b.n	1404a <__udivmoddi4+0x30e>
   14076:	3802      	subs	r0, #2
   14078:	441d      	add	r5, r3
   1407a:	e75f      	b.n	13f3c <__udivmoddi4+0x200>
   1407c:	f1aa 0a02 	sub.w	sl, sl, #2
   14080:	4465      	add	r5, ip
   14082:	e7c7      	b.n	14014 <__udivmoddi4+0x2d8>
   14084:	4631      	mov	r1, r6
   14086:	e6b7      	b.n	13df8 <__udivmoddi4+0xbc>
   14088:	4464      	add	r4, ip
   1408a:	3802      	subs	r0, #2
   1408c:	e6ab      	b.n	13de6 <__udivmoddi4+0xaa>
   1408e:	3902      	subs	r1, #2
   14090:	4462      	add	r2, ip
   14092:	e68b      	b.n	13dac <__udivmoddi4+0x70>
   14094:	4464      	add	r4, ip
   14096:	3802      	subs	r0, #2
   14098:	e71a      	b.n	13ed0 <__udivmoddi4+0x194>
   1409a:	3a02      	subs	r2, #2
   1409c:	4465      	add	r5, ip
   1409e:	e6f9      	b.n	13e94 <__udivmoddi4+0x158>

000140a0 <__aeabi_idiv0>:
   140a0:	4770      	bx	lr
   140a2:	bf00      	nop
